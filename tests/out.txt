============================= test session starts ==============================
platform linux -- Python 3.10.5, pytest-7.1.2, pluggy-1.0.0
rootdir: /home/dmrivers/Code/allfed-integrated-model
collected 96 items

test_food.py F.....................F............F..F.................... [ 61%]
F..F..F..F...........F..F.......F....                                    [100%]

=================================== FAILURES ===================================
___________________________ test_get_nutrient_names ____________________________

    def test_get_nutrient_names():
        """
        Tests of the correct nutrients are returned
        """
>       assert (Food.get_nutrient_names() == ["kcals", "fat", "protein"]).all()
E       AttributeError: 'bool' object has no attribute 'all'

test_food.py:45: AttributeError
_______________________ test_division_monthly_by_number ________________________

    def test_division_monthly_by_number():
        """
        Tests if a food list can be divided by a number
        This should fail.
        """
        food1 = create_food_monthly()
>       with pytest.raises(AssertionError):
E       Failed: DID NOT RAISE <class 'AssertionError'>

test_food.py:315: Failed
_________________________ test_foods_not_equal_scalar __________________________

    def test_foods_not_equal_scalar():
        """
        Tests if two foods are not equal
        """
        food1 = Food(kcals=1, fat=1, protein=1)
        food2 = Food(kcals=2, fat=2, protein=2)
        assert food1 != food2
    
>       assert create_food_monthly() != create_food_monthly(kcals=[1, 2, 3])
E       assert <src.food_system.food.Food object at 0x7f415c69c9d0> != <src.food_system.food.Food object at 0x7f415c69c400>
E        +  where <src.food_system.food.Food object at 0x7f415c69c9d0> = create_food_monthly()
E        +  and   <src.food_system.food.Food object at 0x7f415c69c400> = create_food_monthly(kcals=[1, 2, 3])

test_food.py:512: AssertionError
_______________________ test_food_string_representation ________________________

    def test_food_string_representation():
        """
        Tests if the string representation of a food is correct
        """
        food1 = Food()
>       assert (
            str(food1)
            == "    kcals: 0 billion kcals\n    fat: 0  thousand tons\n    protein: 0  thousand tons"
        )
E       AssertionError: assert '    kcals: 0...ousand tons\n' == '    kcals: 0...thousand tons'
E               kcals: 0 billion kcals
E         -     fat: 0  thousand tons
E         ?           -
E         +     fat: 0 thousand tons
E         -     protein: 0  thousand tons
E         ?               -
E         +     protein: 0 thousand tons...
E         
E         ...Full output truncated (2 lines hidden), use '-vv' to show

test_food.py:544: AssertionError
_________________ test_all_greater_than_or_equal_monthly_food __________________

    def test_all_greater_than_or_equal_monthly_food():
        """
        Tests if all nutrients of a food are larger than or equal those of another food
        """
        food1 = create_food_monthly()
        food2 = create_food_monthly()
        food3 = create_food_monthly(kcals=[5, 5, 5], fat=[5, 5, 5], protein=[5, 5, 5])
>       assert food1.all_greater_than_or_equal_to(food2) == False
E       assert True == False
E        +  where True = <bound method Food.all_greater_than_or_equal_to of <src.food_system.food.Food object at 0x7f415c7f29e0>>(<src.food_system.food.Food object at 0x7f415c7f2a70>)
E        +    where <bound method Food.all_greater_than_or_equal_to of <src.food_system.food.Food object at 0x7f415c7f29e0>> = <src.food_system.food.Food object at 0x7f415c7f29e0>.all_greater_than_or_equal_to

test_food.py:785: AssertionError
___________________ test_all_less_than_or_equal_monthly_food ___________________

    def test_all_less_than_or_equal_monthly_food():
        """
        Tests if all nutrients of a food are smaller than or equal those of another food
        """
        food1 = create_food_monthly()
        food2 = create_food_monthly()
        food3 = create_food_monthly(kcals=[2, 2, 2], fat=[2, 2, 2], protein=[2, 2, 2])
>       assert food1.all_less_than_or_equal(food2) == False
E       AttributeError: 'Food' object has no attribute 'all_less_than_or_equal'

test_food.py:821: AttributeError
_________________ test_any_greater_than_or_equal_monthly_food __________________

    def test_any_greater_than_or_equal_monthly_food():
        """
        Tests if any nutrient of a food is larger than or equal those of another food
        """
        food1 = create_food_monthly()
        food2 = create_food_monthly()
        food3 = create_food_monthly(kcals=[5, 5, 5], fat=[5, 5, 5], protein=[5, 5, 5])
>       assert food1.any_greater_than_or_equal(food2) == True
E       AttributeError: 'Food' object has no attribute 'any_greater_than_or_equal'

test_food.py:857: AttributeError
___________________ test_any_less_than_or_equal_monthly_food ___________________

    def test_any_less_than_or_equal_monthly_food():
        """
        Tests if any nutrient of a food is smaller than or equal those of another food
        """
        food1 = create_food_monthly()
        food2 = create_food_monthly()
        food3 = create_food_monthly(kcals=[5, 5, 5], fat=[5, 5, 5], protein=[5, 5, 5])
>       assert food1.any_less_than_or_equal(food2) == True
E       AttributeError: 'Food' object has no attribute 'any_less_than_or_equal'

test_food.py:895: AttributeError
_________________________________ test_as_list _________________________________

    def test_as_list():
        """
        Tests if the to_list function works
        """
        food_scalar = Food()
>       assert (list(food_scalar.as_list()) == [0, 0, 0]).all()
E       AttributeError: 'Food' object has no attribute 'as_list'

test_food.py:1021: AttributeError
________________________ test_min_nutrient_monthly_food ________________________

    def test_min_nutrient_monthly_food():
        """
        Tests if the get_min_nutrient function works
        """
        food = Food(
            kcals=[1, 1, 1],
            fat=[1, 1, 1],
            protein=[0, 0, 0],
            kcals_units="thousand tons each month",
            protein_units="thousand tons each month",
            fat_units="thousand tons each month",
        )
>       with pytest.raises(AssertionError):
E       Failed: DID NOT RAISE <class 'AssertionError'>

test_food.py:1052: Failed
_________________________ test_get_month_monthly_food __________________________

    def test_get_month_monthly_food():
        """
        Tests if the get_months function works
        """
        food = create_food_monthly(kcals=[1, 1, 1], fat=[1, 1, 1], protein=[1, 1, 1])
        food = food.get_month(1)
        assert food.kcals == 1
        assert food.fat == 1
        assert food.protein == 1
>       assert food.kcals_units == "kcals per months"
E       AssertionError: assert 'kcals per month' == 'kcals per months'
E         - kcals per months
E         ?                -
E         + kcals per month

test_food.py:1149: AssertionError
=============================== warnings summary ===============================
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/seaborn/rcmod.py:82
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/seaborn/rcmod.py:82: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(mpl.__version__) >= "3.0":

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/setuptools/_distutils/version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:17
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:17: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    PANDAS_GE_025 = str(pd.__version__) >= LooseVersion("0.25.0")

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:18
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:18: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    PANDAS_GE_10 = str(pd.__version__) >= LooseVersion("1.0.0")

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:19
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:19: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    PANDAS_GE_11 = str(pd.__version__) >= LooseVersion("1.1.0")

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:20
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:20: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    PANDAS_GE_115 = str(pd.__version__) >= LooseVersion("1.1.5")

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:21
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:21: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    PANDAS_GE_12 = str(pd.__version__) >= LooseVersion("1.2.0")

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:29
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:29: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    SHAPELY_GE_17 = str(shapely.__version__) >= LooseVersion("1.7.0")

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:30
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:30: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    SHAPELY_GE_18 = str(shapely.__version__) >= LooseVersion("1.8")

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:31
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:31: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    SHAPELY_GE_20 = str(shapely.__version__) >= LooseVersion("2.0")

../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:212
../../../Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:212
  /home/dmrivers/Apps/miniconda3/envs/intmodel/lib/python3.10/site-packages/geopandas/_compat.py:212: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    PYPROJ_LT_3 = LooseVersion(pyproj.__version__) < LooseVersion("3")

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test_food.py::test_get_nutrient_names - AttributeError: 'bool' object ...
FAILED test_food.py::test_division_monthly_by_number - Failed: DID NOT RAISE ...
FAILED test_food.py::test_foods_not_equal_scalar - assert <src.food_system.fo...
FAILED test_food.py::test_food_string_representation - AssertionError: assert...
FAILED test_food.py::test_all_greater_than_or_equal_monthly_food - assert Tru...
FAILED test_food.py::test_all_less_than_or_equal_monthly_food - AttributeErro...
FAILED test_food.py::test_any_greater_than_or_equal_monthly_food - AttributeE...
FAILED test_food.py::test_any_less_than_or_equal_monthly_food - AttributeErro...
FAILED test_food.py::test_as_list - AttributeError: 'Food' object has no attr...
FAILED test_food.py::test_min_nutrient_monthly_food - Failed: DID NOT RAISE <...
FAILED test_food.py::test_get_month_monthly_food - AssertionError: assert 'kc...
================== 11 failed, 85 passed, 20 warnings in 1.78s ==================
