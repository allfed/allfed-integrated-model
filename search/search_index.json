{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ALLFED Integrated Food System Model An integrated food supply model for resilient foods in nuclear winter Run the model You can create a variety of different scenarios with this model. A collection of possible scenarios are already available in the scenarios folder (e.g. run_model_with_resilient_foods.py ). Examples of usage can be found in the scripts folder. Resulting pptx can be found in results/large_reports/. If you don't wish to run these results yourself, you can find more pregenerated results in the Zenodo repository (https://zenodo.org/record/7039924). Running on command line (See Dependencies section first) Results from the paper can be rerun using the following command: python3 plot_manuscript_figures.py rerun all You can always just run python3 plot_manuscript_figures.py To see how to run fewer plots, load plots you already ran, or show specific results from the paper. Individual scenarios, or a series of scenarios of interest, can be specified in the scenarios/ folder. ./run_scenarios_from_yaml.sh True False True argentina.yaml This shows a series of stackplots of argentina with no food trade, including animal slaughter, feed, and food available to humans after waste each month. The scenarios shown are: Baseline net production (continued feed/biofuel, normal climate) Baseline gross production (shut off feed/biofuel, normal climate) Nuclear winter net production (continued feed/biofuel, 150 Tg nuclear winter) Nuclear winter with reduced feed/waste (continued feed/biofuel, nuclear winter, reduced waste) Nuclear winter with resilient foods (continued feed/biofuel, nuclear winter, reduced waste, resilient foods) Nuclear winter with resilient foods & more area (continued feed/biofuel, nuclear winter, reduced waste, resilient foods, cropland expansion) The first argument is whether to show plotted simulation results for the different rounds of optimization. The second argument is whether to show a map of percent people fed for all countries, and shows at the end for each type of scenario specified in the yaml file. The third argument should be set to False unless you are running the model from the web interface . Rounds of optimization: Round1 is zero feed/biofuel for ascertaining minimum human needs that can be satisfied, Round2 determines the amount of feed and biofuel that could be used to optimally produce feed and optionally biofuel, and the Round3 finally combines the appropriate amount of feed and biofuel used while still satisfying human minimum caloric needs. You can alter the plots shown by commenting out display code in scenarios/run_scenario.py display_results_of_optimizer_round function calls. To run these scenarios for a specific country, you can create a new yaml file with a specific country specified in the yaml file. For example, to run Oman, you can add the following to the yaml: settings: countries: \"OMN\" Where \"OMN\" is the 3 letter iso3 code for Oman. If you name this new yaml file for the scenarios as: \"your_yaml_file_here.yaml\", then you would run: ./run_scenarios_from_yaml.sh True False your_yaml_file_here.yaml To see the results for Oman baseline, nuclear winter, and nuclear winter with resilient foods. More Details See the zenodo repository for more results and reports: https://zenodo.org/record/7039924 How the model works in general more details Dependency management with Anaconda The integrated model is written in python 3, ensure you have some version of python3, although it has only been tested with python 3.9 or later. Then, install the required packages using conda or miniconda: You'll also need to install conda or miniconda, micromamba, or similar. See https://docs.anaconda.com/anaconda/install/index.html for installation instructions. Once the program is installed on your device, set up a separate environment for the project (do not use your base environment). This step and the following can be done in two ways: - using the GUI or - using the Anaconda Prompt. For people new to coding the GUI is more intuitive. GUI Open the Anaconda Navigator. Select the tap \"Environments\". Click \"Import\" and select the \"environment.yml\" file from the repository and name the new environment. All dependencies will be installed automatically. Anaconda Prompt Open Anaconda Prompt. Type in the following line: conda env create -f environment.yml The dependencies will be installed automatically and the environment will be name intmodel. If you close out the terminal and open it later you will want to activate the environment again using conda activate intmodel For both versions: Code from this project will only run smoothly when opened in the new environment and when the working directory is set to the path location of the repository on your machine. Regenerate documentation python3 automate_mkdocs.py gendocs --config mkgendocs.yml mkdocs serve Then navigate to http://127.0.0.1:8000/ in your web browser. Detailed Explanation of Files and Folders in this Repository Below we explain all of the folders and files used for getting data, processing data, running simulations, then displaying and saving results of models. Files purely for mentation or creating the python environment are not included below. Directory Structure \u251c\u2500\u2500 data/ \u2502 \u2502 All the tabulated data used for the repository, as well as intermediary \u2502 processed results from import scripts. Also contains data explaining \u2502 assumptions of the model in the Supplemental_Data.xlsx file. \u2502 \u251c\u2500\u2500 results/ \u2502 \u2502 Outputs of the model including figures and pptx generated reports. \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 Convenient scripts used to run sets of python scripts. \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 All of the code used to model the food system and to run simulations. \u2502 data/ All data for the use of generating scenarios is contained in this directory, with the exception that some aggregate global constants for the food system are stored in the src/scenarios/scenarios.py file. (Note: currently getting rid of \"magic numbers\" in other files, but it is a long process) resilient_food_primary_results.npy , no_resilient_food_primary_results.npy These are used for plotting data from src/scenarios/plot_primary_food.py. Supplemental_Data.xlsx This is part of the raw data imported in the case of Nutrition, or used directly for estimating the performance of crop relocation or expected diet availability, as well as crop seasonality. The spreadsheet contains the following tabs: Summary of field margins Cost modelling Diet affordability Crop years Production & stocks seasonality Crop Model Results Crop Model ASRS Relocation Estimate Crop Model No Relocation Crop Model 2005 Production 2005 Production 2005 Raw Nutrition data/no_food_trade/ Contains data used to run the country-by-country no food trade model. processed_data/ All of the CSV files in this folder are generated by running the scripts/run_all_imports.sh file. They contain data in standard format for each country on values of interest for the food system models (for no food trade scenarios). raw_data/ All data files used for each country in the no food trade scenarios, directly from the data source (before processing to make standard format). Processing of these files happens using the import files in /src/import_scripts_no_food_trade/ directory, which can in turn be called all at once using the scripts/run_all_imports.sh script. computer_readable_combined.csv The ultimate result from running all the import scripts in src/import_scripts_no_food_trade , (also accomplished using scripts/run_all_scripts.py ). In particular, the src/import_scripts_no_food_trade/import_food_data.py file creates this by merging the csvs into a dataframe then exporting the result to this csv. data/no_food_trade/raw_data/ Raw data files for each country in the no food trade scenarios, directly from the data source (before processing to make standard format). Processing of these files happens using the import files in /src/import_scripts_no_food_trade/ directory, which can in turn be called all at once using the scripts/run_all_imports.sh script. FAOSTAT_*_.CSV Data files imported directly from FAOSTAT for the year in question. Integrated Model With No Food Trade.xlsx The spreadsheet is used as a remaining set of data pertaining to no food trade scenarios, which is imported in addition to raw FAOSTAT data to create the final computer_readable_code.csv file. Contains the following tabs: * Population * Food waste * Outdoor crop Production Seasonality * Outdoor Crop Production Baseline * Outdoor Crop Production NW * Food Stocks * Seafood - excluding seaweeds * Grazing * Seaweed * Cellulosic Sugar * Greenhouses * Methane SCP * Combined rutgers_nw_production_raw.csv Raw data provided by the Rutgers Toon group from Xia et al publication regarding grasses and staple crops (spring wheat, maize, soybean, rice) fractional crop yields to baseline in a 150 tg nuclear winter scenario. results/ Outputs of the model including figures and pptx generated reports. large_reports/ Reports generated with the run_model_no_trade_baseline.py , run_model_no_trade_no_resilient_foods.py , and run_model_no_trade_with_resilient_foods.py in src/scenarios/ . Figure_4/ Diagrammatic flow chart of the integrated model. *.fig Figures produced by running some src/scenarios/ files. The last stage of figure generation (plotting itself) always occurs in the src/utilities/plotter.py file. scripts/ Convenient scripts used to run sets of python scripts. create_all_no_trade_scenario_pptx.sh Generates a full set of results in results/large_reports/ by running run_model_no_trade scripts in src/scenarios/ , using both the \"single\" and \"multi\" arguments. run_all_imports.sh This script creates all the imported .csv files in the data/no_food_trade/processed_data folder, by running all the import_*_csv.py scripts in src/import_scripts_no_food_trade/ . It's required to run this for importing all the food system input data before running simulations if no_food_trade scenarios are being run. src/ All of the code used to model the food system and to run simulations food_system/ Called by the compute_parameters function in src/optimizer/parameters.py , each function represents a different part of the food system. import_scripts_no_food_trade/ This is required to be run before other files in src/ in order to import raw data into a usable format for other files in src/ . It is a set of scripts that are run to import food system data, typically by the scripts/run_all_imports.sh file. These create the imported .csv files in the data/no_food_trade/processed_data folder. It's required to run this for importing all the food system input data before running simulations for no_food_trade scenarios. src/optimizer/ The optimizer folder runs the following sequence in order for every scenario: compute_parameters, run_optimizer, extract_results, interpret_results, validate_results. The parameters.py file also imports all the src/food_system category-specific calculations. The results of parameters.py are sent to the optimizer.py through the constants_out variable. Optimization in optimizer uses the PuLP linear optimizer to optimally satisfy the series of constraints used in that model. src/scenarios/ Running a script in scenarios is done after completing import of the scripts, if no_food_trade scenarios are being run. The scenarios are all either involving full food trade or no food trade between trading blocs, as determined by the trading bloc data in no_food_trade/computer_readable_combined.csv and globally-aggregated data stored in scenarios.py . Utility files used to specify the scenarios are: scenarios.py Finally the results are returned from run_scenario back up the call chain in reverse order. utilities/ various useful utilities that are called elsewhere in the program, that do not serve any core function for the modelling. Notably, all the plotting code is located in the utilities directory.","title":"ALLFED Integrated Food System Model"},{"location":"#allfed-integrated-food-system-model","text":"An integrated food supply model for resilient foods in nuclear winter","title":"ALLFED Integrated Food System Model"},{"location":"#run-the-model","text":"You can create a variety of different scenarios with this model. A collection of possible scenarios are already available in the scenarios folder (e.g. run_model_with_resilient_foods.py ). Examples of usage can be found in the scripts folder. Resulting pptx can be found in results/large_reports/. If you don't wish to run these results yourself, you can find more pregenerated results in the Zenodo repository (https://zenodo.org/record/7039924).","title":"Run the model"},{"location":"#running-on-command-line","text":"(See Dependencies section first) Results from the paper can be rerun using the following command: python3 plot_manuscript_figures.py rerun all You can always just run python3 plot_manuscript_figures.py To see how to run fewer plots, load plots you already ran, or show specific results from the paper. Individual scenarios, or a series of scenarios of interest, can be specified in the scenarios/ folder. ./run_scenarios_from_yaml.sh True False True argentina.yaml This shows a series of stackplots of argentina with no food trade, including animal slaughter, feed, and food available to humans after waste each month. The scenarios shown are: Baseline net production (continued feed/biofuel, normal climate) Baseline gross production (shut off feed/biofuel, normal climate) Nuclear winter net production (continued feed/biofuel, 150 Tg nuclear winter) Nuclear winter with reduced feed/waste (continued feed/biofuel, nuclear winter, reduced waste) Nuclear winter with resilient foods (continued feed/biofuel, nuclear winter, reduced waste, resilient foods) Nuclear winter with resilient foods & more area (continued feed/biofuel, nuclear winter, reduced waste, resilient foods, cropland expansion) The first argument is whether to show plotted simulation results for the different rounds of optimization. The second argument is whether to show a map of percent people fed for all countries, and shows at the end for each type of scenario specified in the yaml file. The third argument should be set to False unless you are running the model from the web interface . Rounds of optimization: Round1 is zero feed/biofuel for ascertaining minimum human needs that can be satisfied, Round2 determines the amount of feed and biofuel that could be used to optimally produce feed and optionally biofuel, and the Round3 finally combines the appropriate amount of feed and biofuel used while still satisfying human minimum caloric needs. You can alter the plots shown by commenting out display code in scenarios/run_scenario.py display_results_of_optimizer_round function calls. To run these scenarios for a specific country, you can create a new yaml file with a specific country specified in the yaml file. For example, to run Oman, you can add the following to the yaml: settings: countries: \"OMN\" Where \"OMN\" is the 3 letter iso3 code for Oman. If you name this new yaml file for the scenarios as: \"your_yaml_file_here.yaml\", then you would run: ./run_scenarios_from_yaml.sh True False your_yaml_file_here.yaml To see the results for Oman baseline, nuclear winter, and nuclear winter with resilient foods.","title":"Running on command line"},{"location":"#more-details","text":"See the zenodo repository for more results and reports: https://zenodo.org/record/7039924","title":"More Details"},{"location":"#how-the-model-works-in-general","text":"","title":"How the model works in general"},{"location":"#more-details_1","text":"","title":"more details"},{"location":"#dependency-management-with-anaconda","text":"The integrated model is written in python 3, ensure you have some version of python3, although it has only been tested with python 3.9 or later. Then, install the required packages using conda or miniconda: You'll also need to install conda or miniconda, micromamba, or similar. See https://docs.anaconda.com/anaconda/install/index.html for installation instructions. Once the program is installed on your device, set up a separate environment for the project (do not use your base environment). This step and the following can be done in two ways: - using the GUI or - using the Anaconda Prompt. For people new to coding the GUI is more intuitive.","title":"Dependency management with Anaconda"},{"location":"#gui","text":"Open the Anaconda Navigator. Select the tap \"Environments\". Click \"Import\" and select the \"environment.yml\" file from the repository and name the new environment. All dependencies will be installed automatically.","title":"GUI"},{"location":"#anaconda-prompt","text":"Open Anaconda Prompt. Type in the following line: conda env create -f environment.yml The dependencies will be installed automatically and the environment will be name intmodel. If you close out the terminal and open it later you will want to activate the environment again using conda activate intmodel For both versions: Code from this project will only run smoothly when opened in the new environment and when the working directory is set to the path location of the repository on your machine.","title":"Anaconda Prompt"},{"location":"#regenerate-documentation","text":"python3 automate_mkdocs.py gendocs --config mkgendocs.yml mkdocs serve Then navigate to http://127.0.0.1:8000/ in your web browser.","title":"Regenerate documentation"},{"location":"#detailed-explanation-of-files-and-folders-in-this-repository","text":"Below we explain all of the folders and files used for getting data, processing data, running simulations, then displaying and saving results of models. Files purely for mentation or creating the python environment are not included below.","title":"Detailed Explanation of Files and Folders in this Repository"},{"location":"#directory-structure","text":"\u251c\u2500\u2500 data/ \u2502 \u2502 All the tabulated data used for the repository, as well as intermediary \u2502 processed results from import scripts. Also contains data explaining \u2502 assumptions of the model in the Supplemental_Data.xlsx file. \u2502 \u251c\u2500\u2500 results/ \u2502 \u2502 Outputs of the model including figures and pptx generated reports. \u2502 \u251c\u2500\u2500 scripts/ \u2502 \u2502 Convenient scripts used to run sets of python scripts. \u2502 \u251c\u2500\u2500 src/ \u2502 \u2502 All of the code used to model the food system and to run simulations. \u2502","title":"Directory Structure"},{"location":"#data","text":"All data for the use of generating scenarios is contained in this directory, with the exception that some aggregate global constants for the food system are stored in the src/scenarios/scenarios.py file. (Note: currently getting rid of \"magic numbers\" in other files, but it is a long process) resilient_food_primary_results.npy , no_resilient_food_primary_results.npy These are used for plotting data from src/scenarios/plot_primary_food.py. Supplemental_Data.xlsx This is part of the raw data imported in the case of Nutrition, or used directly for estimating the performance of crop relocation or expected diet availability, as well as crop seasonality. The spreadsheet contains the following tabs: Summary of field margins Cost modelling Diet affordability Crop years Production & stocks seasonality Crop Model Results Crop Model ASRS Relocation Estimate Crop Model No Relocation Crop Model 2005 Production 2005 Production 2005 Raw Nutrition","title":"data/"},{"location":"#datano_food_trade","text":"Contains data used to run the country-by-country no food trade model. processed_data/ All of the CSV files in this folder are generated by running the scripts/run_all_imports.sh file. They contain data in standard format for each country on values of interest for the food system models (for no food trade scenarios). raw_data/ All data files used for each country in the no food trade scenarios, directly from the data source (before processing to make standard format). Processing of these files happens using the import files in /src/import_scripts_no_food_trade/ directory, which can in turn be called all at once using the scripts/run_all_imports.sh script. computer_readable_combined.csv The ultimate result from running all the import scripts in src/import_scripts_no_food_trade , (also accomplished using scripts/run_all_scripts.py ). In particular, the src/import_scripts_no_food_trade/import_food_data.py file creates this by merging the csvs into a dataframe then exporting the result to this csv.","title":"data/no_food_trade/"},{"location":"#datano_food_traderaw_data","text":"Raw data files for each country in the no food trade scenarios, directly from the data source (before processing to make standard format). Processing of these files happens using the import files in /src/import_scripts_no_food_trade/ directory, which can in turn be called all at once using the scripts/run_all_imports.sh script. FAOSTAT_*_.CSV Data files imported directly from FAOSTAT for the year in question. Integrated Model With No Food Trade.xlsx The spreadsheet is used as a remaining set of data pertaining to no food trade scenarios, which is imported in addition to raw FAOSTAT data to create the final computer_readable_code.csv file. Contains the following tabs: * Population * Food waste * Outdoor crop Production Seasonality * Outdoor Crop Production Baseline * Outdoor Crop Production NW * Food Stocks * Seafood - excluding seaweeds * Grazing * Seaweed * Cellulosic Sugar * Greenhouses * Methane SCP * Combined rutgers_nw_production_raw.csv Raw data provided by the Rutgers Toon group from Xia et al publication regarding grasses and staple crops (spring wheat, maize, soybean, rice) fractional crop yields to baseline in a 150 tg nuclear winter scenario.","title":"data/no_food_trade/raw_data/"},{"location":"#results","text":"Outputs of the model including figures and pptx generated reports. large_reports/ Reports generated with the run_model_no_trade_baseline.py , run_model_no_trade_no_resilient_foods.py , and run_model_no_trade_with_resilient_foods.py in src/scenarios/ . Figure_4/ Diagrammatic flow chart of the integrated model. *.fig Figures produced by running some src/scenarios/ files. The last stage of figure generation (plotting itself) always occurs in the src/utilities/plotter.py file.","title":"results/"},{"location":"#scripts","text":"Convenient scripts used to run sets of python scripts. create_all_no_trade_scenario_pptx.sh Generates a full set of results in results/large_reports/ by running run_model_no_trade scripts in src/scenarios/ , using both the \"single\" and \"multi\" arguments. run_all_imports.sh This script creates all the imported .csv files in the data/no_food_trade/processed_data folder, by running all the import_*_csv.py scripts in src/import_scripts_no_food_trade/ . It's required to run this for importing all the food system input data before running simulations if no_food_trade scenarios are being run.","title":"scripts/"},{"location":"#src","text":"All of the code used to model the food system and to run simulations food_system/ Called by the compute_parameters function in src/optimizer/parameters.py , each function represents a different part of the food system. import_scripts_no_food_trade/ This is required to be run before other files in src/ in order to import raw data into a usable format for other files in src/ . It is a set of scripts that are run to import food system data, typically by the scripts/run_all_imports.sh file. These create the imported .csv files in the data/no_food_trade/processed_data folder. It's required to run this for importing all the food system input data before running simulations for no_food_trade scenarios.","title":"src/"},{"location":"#srcoptimizer","text":"The optimizer folder runs the following sequence in order for every scenario: compute_parameters, run_optimizer, extract_results, interpret_results, validate_results. The parameters.py file also imports all the src/food_system category-specific calculations. The results of parameters.py are sent to the optimizer.py through the constants_out variable. Optimization in optimizer uses the PuLP linear optimizer to optimally satisfy the series of constraints used in that model.","title":"src/optimizer/"},{"location":"#srcscenarios","text":"Running a script in scenarios is done after completing import of the scripts, if no_food_trade scenarios are being run. The scenarios are all either involving full food trade or no food trade between trading blocs, as determined by the trading bloc data in no_food_trade/computer_readable_combined.csv and globally-aggregated data stored in scenarios.py . Utility files used to specify the scenarios are: scenarios.py Finally the results are returned from run_scenario back up the call chain in reverse order. utilities/ various useful utilities that are called elsewhere in the program, that do not serve any core function for the modelling. Notably, all the plotting code is located in the utilities directory.","title":"src/scenarios/"},{"location":"modules/src/food_system/animal_populations/","text":"CalculateFeedAndMeat source CalculateFeedAndMeat( country_code, available_feed, available_grass, scenario, kcals_per_head_meat_dict, constants_inputs = None ) Methods: .get_meat_produced source .get_meat_produced() .get_total_dairy_cows source .get_total_dairy_cows() .get_total_milk_bearing_animals source .get_total_milk_bearing_animals() Calculates the total number of milk-bearing animals in the population. Returns ndarray : An array containing the total number of milk-bearing animals for each month CountryData source CountryData( country_name ) Main functionalities: CountryData is a class that represents data for a specific country in the food system model. It contains fields for various data points such as slaughter hours, homekill hours, and meat output. The class has methods for setting livestock unit factors, calculating homekill hours, and calculating total slaughter hours. Methods: - init (self, country_name): initializes the CountryData object with the given country name and sets various fields to empty lists or 0. LSU conversion factors for the country based on the given dataframes. homekill_desperation_parameters(self): sets the homekill fraction and other death homekill rate. calculate_homekill_hours(self): calculates the number of hours required to slaughter homekill animals. the given list. Fields: - country_name: the name of the country. - slaughter_hours: a list of total slaughter hours for each month. - homekill_hours_total_month: a list of total homekill hours for each month. - homekill_hours_budget: a list of budgeted homekill hours for each month. - meat_output: a list of meat output for each month. - small_slaughter_hours: the number of small animal slaughter hours for the country. - medium_slaughter_hours: the number of medium animal hours for the country. - large_slaughter_hours: the number of large animal hours for the country. - EK_region: the FAO region for the country. - LSU_conversion_factors: a dictionary of livestock unit conversion factors for the country. Methods: .set_livestock_unit_factors source .set_livestock_unit_factors( df_country_info, df_regional_conversion_factors ) Requires inputs of the country info dataframe, and the regional conversion factors dataframe df_regional_conversion_factors dataframe contains the conversion factors for the LSU for each animal type, based on ther region. And the other, df_country_info contains the mapping from the country to the region. Country Name needs to be the index of the df_country_info dataframe .homekill_desperation_parameters source .homekill_desperation_parameters() .calculate_homekill_hours source .calculate_homekill_hours() Function to calculate the number of hours required to slaughter the homekill animals. .calculate_total_slaughter_hours source .calculate_total_slaughter_hours( all_animals ) Probably unneccesary, but could be sueful to ibnterogate the number of salughter hours to compare between countries. Not required for the program to work (and not called) AnimalSpecies source AnimalSpecies( animal_type, animal_species ) Class to store animal population data in. Needs to store the following: animal type, population, and slaughter. Parameters animal_type : str Type of animal (beef, pork, chicken etc...) population : int Number of animals (total) slaughter : int Number of animals slaughtered this month pregnant : int Number of animals pregnant this month starving : int Number of animals starving this month feed_balance : int Amount of feed required this month nutrition_ratio : object Object containing the nutrition ratio for the animal type Methods: .update_attributes source .update_attributes( **kwargs ) .set_animal_attributes source .set_animal_attributes( population, slaughter, animal_function, livestock_unit, digestion_type, animal_size, approximate_feed_conversion, digestion_efficiency_grass = 0.6, digestion_efficiency_feed = 0.8, carb_requirement = -1, protein_requirement = -1, fat_requirement = -1 ) .set_LSU_attributes source .set_LSU_attributes( country_object ) .set_species_milk_attributes source .set_species_milk_attributes( productive_milk_age_start, productive_milk_age_end, insemination_cycle_time_for_milk, milk_production_per_month_per_head = None ) .retiring_milk_head_monthly source .retiring_milk_head_monthly() Function to calculate the number of retiring milk animals per month .set_species_slaughter_attributes source .set_species_slaughter_attributes( gestation, other_animal_death_rate_annual, animals_per_pregnancy, animal_slaughter_hours, change_in_slaughter_rate, pregnant_animal_slaughter_fraction, reduction_in_animal_breeding, target_population_fraction, starvation_death_fraction, transfer_births_or_head ) Function to set the attributes of the animal species that are related to slaughter Parameters gestation : int gestation period in months annual death rate of animals number of animals per pregnancy hours per animal spent slaughtering 0.5 = half of animals slaughtered animals are attempted to be slaughtered, 0.5 = half of pregnant animals 1 = no reduction, 0.5 = half of animals are bred = target population is equal to the iniitla population, 0 = targetting to kill all animals population or head imported from other countries Returns None .set_milk_birth source .set_milk_birth() .set_initial_milk_transfer source .set_initial_milk_transfer() .total_homekill source .total_homekill() Function to calculate the total homekill per month. Parameters None Returns total_homekill : int the total homekill per month .exported_births source .exported_births() Function to calculate the number of births exported from the animal population. Parameters None Returns exported_births : int the number of births exported from the animal population .one_LSU_monthly_billion_kcal source .one_LSU_monthly_billion_kcal() .net_energy_required_per_month source .net_energy_required_per_month() Function to calculate the total net energy required per month for the species .net_energy_required_per_species source .net_energy_required_per_species() Function to calculate the total net energy required per month for the species .reset_NE_balance source .reset_NE_balance() This function resets the feed balance to the feed required per month for the species Needs to be run before feeding the animals each month. .feed_the_species source .feed_the_species( grass_input, feed_input, is_ruminant = False ) .append_month_zero source .append_month_zero() Objective: - The objective of the 'append_month_zero' method is to append the baseline values of various attributes of the animal species to their respective lists. These values will be used as a reference point for future calculations. Inputs: - The method takes no external inputs. It uses the instance variables of the class 'AnimalSpecies' to calculate and append the baseline values. AnimalPopulation source AnimalPopulation() Methods: .calculate_additive_births source .calculate_additive_births( animal, current_month ) .calculate_change_in_population source .calculate_change_in_population( animal, country_object, new_additive_animals_month, remaining_hours_this_size ) This function will calculate the change in animal population for a given animal type It will do so by calculating the number of new births, the number of deaths, and the number of animals slaughtered It will then update the animal object with the new population It will also update the animal object with the number of animals that are pregnant, and the number of animals that are lactating Some parameters are calulctaed before the 'slaughter event' where the populations change, some are calculated after Those that are calulcated before are: - the new births this month (based on the number of animals that are pregnant) - other deaths this month - the slauhter rate this month - spare slaughter hours this month Those that are calculated after are: - the number of animals that are lactating - the new population this month - the population of animals that are pregnant for next month .calculate_pregnant_animals_birthing source .calculate_pregnant_animals_birthing( animal, new_pregnant_animals_total ) This function will calculate the number of pregnant animals birthing this month, based on the number of pregnant animals remaining Uses a simple calculation of the number of pregnant animals divided by the gestation period This is not a perfect calculation, as it assumes that an even distribution of animals will birth each month However, it is a good approximation for the purposes of this model Parameters animal : AnimalSpecies The animal object for the animal type that you want to calculate the change in population for The number of pregnant animals remaining this month Returns The number of pregnant animals birthing this month .calculate_pregnant_slaughter source .calculate_pregnant_slaughter( animal, new_slaughter_rate ) This function will determine how many of the animals who died this month were pregnant Check if the number of pregnant animals set for slaughter is less than the number of animals slaughtered this month If so, proceed to calculate the number of pregnant animals slaughtered Otherwise, set the number of pregnant animals slaughtered to the number of animals slaughtered this month .calculate_animal_population source .calculate_animal_population( animal, country_object, new_additive_animals_month, new_other_animal_death, new_slaughter_rate ) .calculate_births source .calculate_births( animal ) This function calculates the number of new births this month Parameters animal : object The animal object that is being calculated Returns from milk animals, not total births (meat and milk)) to meat births from milk animals, not total births (meat and milk)) .calculate_breeding_changes source .calculate_breeding_changes( animal ) This function calculates the changes in breeding for the animal type This is only called after the gestation period is over It will update the animal object with the new number of pregnant animals Based on the reduction in breeding Pregnant slaughter is halted, as breeding changes have taken place from the breeding intervention Parameters animal : object The animal object that is being calculated Returns None .calculate_other_deaths source .calculate_other_deaths( animal ) .calculate_slaughter_rate source .calculate_slaughter_rate( animal, country_object, new_births_animals_month, new_other_animal_death, remaining_hours_this_size ) This function calculates the new slaughter rate based on the spare slaughter hours and the target animal population Parameters animal : object The animal object that is being calculated The number of spare slaughter hours generated The target animal population Returns The new slaughter rate The number of spare slaughter hours remaining after the new slaughter rate is calculated .calculate_other_death_homekill_head source .calculate_other_death_homekill_head( animal, country_object ) .calculate_healthy_homekill_head source .calculate_healthy_homekill_head( animal, country_object ) .calculate_starving_pop_post_slaughter_healthy_homekill source .calculate_starving_pop_post_slaughter_healthy_homekill( animal ) .calculate_starving_homekill_head source .calculate_starving_homekill_head( animal, country_object, population_starving_post_slaughter_and_healthy_homekill ) .calculate_starving_pop_post_all_slaughter_homekill source .calculate_starving_pop_post_all_slaughter_homekill( animal, population_starving_post_slaughter_and_healthy_homekill ) .other_death_pregnant_adjustment source .other_death_pregnant_adjustment( animal ) .calculate_starving_other_death_head source .calculate_starving_other_death_head( animal, population_starving_post_slaughter_and_all_homekill ) This function calculates the number of animals that die from starvation in a month. It takes the population of animals that are starving after slaughter and homekill, and calculates the number of animals that die from starvation. In terms of physical relevance - the animals that don't die from starvation are the ones that are able to find enough other food to survive or have fat stores etc. These animals ARE NOT turned in to meat. Those that are turned in to meat are captured in the homekill functions. Parameters animal : Animal The animal object that is being calculated for. The number of animals that are starving after slaughter and homekill. Returns float The number of animals that die from starvation in a month. .calculate_final_population source .calculate_final_population( animal ) This function calculates the final population of the animal after all the slaughter and homekill has been done. Parameters animal : Animal The animal object that is being calculated for. Returns float The final population of the animal. .feed_animals source .feed_animals( animal_list, ruminants, available_feed, available_grass ) This function will feed the animals It will do so by allocating the grass first to those animals that can eat it, and then allocating the remaining feed to the remaining animals It will also priotiise the animals that are most efficient at converting feed, This means starting with milk. List needs to be sorted in the oprder you want the animals to be prioritised for feed .calculate_starving_animals_after_feed source .calculate_starving_animals_after_feed( animal_list ) This function will calculate the number of animals that are starving after feeding It iterates through the animal list and calculates the number of animals that are starving result is appended to the animal object .set_current_populations source .set_current_populations( animal_objects ) Sets the current population of each animal object This simply sets the current population to the value at the end of the previous month. This value is then updated during the month loop. Runs at the start opf the month before any changes to population are made. .appened_current_populations source .appened_current_populations( animal_objects ) Appends the current population of each animal object to its population list. Runs at the end of the month loop once currrent population has been updated Args animal_objects ( type ) : description AnimalDataReader source AnimalDataReader() Methods: .read_animal_population_data source .read_animal_population_data( filename ) Read animal population data from CSV file Returns df_animal_stock_info : pandas dataframe Dataframe containing animal population data .read_animal_nutrition_data source .read_animal_nutrition_data( filename ) \" Read animal nutrition data from CSV file Returns df_animal_nutrition : pandas dataframe Dataframe containing animal nutrition data .read_animal_options source .read_animal_options( filename ) \" Read animal nutrition data from CSV file Returns df_animal_nutrition : pandas dataframe Dataframe containing animal nutrition data .read_animal_regional_factors source .read_animal_regional_factors( filename ) \" Read animal nutrition data from CSV file Returns df_animal_nutrition : pandas dataframe Dataframe containing animal nutrition data .read_country_data source .read_country_data( filename ) \" Read animal nutrition data from CSV file Returns df_animal_nutrition : pandas dataframe Dataframe containing animal nutrition data AnimalModelBuilder source AnimalModelBuilder() Methods: .create_animal_objects source .create_animal_objects( df_animal_stock_info, df_animal_attributes ) Create animal objects from dataframes Parameters df_animal_stock_info : pandas dataframe Single dimension Dataframe containing animal population data for each country Dataframe containing animal nutrition data Returns List of animal objects .get_optimal_next_animal_to_feed source .get_optimal_next_animal_to_feed( animal_dict, kcals_per_head_meat_dict, df_animal_attributes ) .update_animal_objects_with_slaughter source .update_animal_objects_with_slaughter( animal_list, df_animal_attributes, df_animal_options, scenario, kcals_per_head_meat_dict ) This function updates the animal objects with the slaughter data Parameters animal_list : list List of animal objects Dataframe containing animal attibute data Dataframe containing animal options data Returns List of animal objects .update_animal_objects_with_milk source .update_animal_objects_with_milk( animal_list, df_animal_attributes ) This function updates the animal objects with the slaughter data. Parameters animal_list : list List of animal objects Dataframe containing animal attibute data Dataframe containing animal options data Returns List of animal objects .update_animal_objects_LSU_factor source .update_animal_objects_LSU_factor( animal_list, country_object ) This function updates the animal objects with the LSU factors Parameters animal_list : list List of animal objects Object containing country data Returns List of animal objects .remove_first_month source .remove_first_month( animal ) Debugging source Debugging() Methods: .print_list_lengths source .print_list_lengths( obj ) .save_single_animal_data_to_csv source .save_single_animal_data_to_csv( animal, output_path = 'animal_single_data_to_csv.csv' ) .print_list_any source .print_list_any( animal_list ) .available_feed_function source .available_feed_function( billion_kcals, months_to_run = 120 ) Energy is expressed as digestible (DE), metabolizable (ME), or net energy (NE) by considering the loss of energy during digestion and metabolism from gross energy (GE) in the feed, as follows: Gross energy (GE): the amount of energy in the feed. Digestible energy (DE): the amount of energy in the feed minus the amount of energy lost in the feces. Metabolizable energy (ME): the amount of energy in the feed minus the energy lost in the feces and urine. Net energy (NE): the amount of energy in the feed minus the energy lost in the feces, urine, and in heat production through digestive and metabolic processes, i.e. heat increment. .available_grass_function source .available_grass_function( billion_kcals, months_to_run = 120 ) CHECK IS BILLION KCALS Energy is expressed as digestible (DE), metabolizable (ME), or net energy (NE) by considering the loss of energy during digestion and metabolism from gross energy (GE) in the feed, as follows: Gross energy (GE): the amount of energy in the feed. Digestible energy (DE): the amount of energy in the feed minus the amount of energy lost in the feces. Metabolizable energy (ME): the amount of energy in the feed minus the energy lost in the feces and urine. Net energy (NE): the amount of energy in the feed minus the energy lost in the feces, urine, and in heat production through digestive and metabolic processes, i.e. heat increment. calculate_net_slaughter_hours_by_size source .calculate_net_slaughter_hours_by_size( animals ) @author: DMR This function gets the total hours in the relevant size (small, medium, or large) which can be used to slaughter animals of that size world_test source .world_test() Test the animal population model for the case with full-trade by including worldwide aggregated feed and grass supply.","title":"Animal populations"},{"location":"modules/src/food_system/animal_populations/#_1","text":"","title":""},{"location":"modules/src/food_system/animal_populations/#calculatefeedandmeat","text":"source CalculateFeedAndMeat( country_code, available_feed, available_grass, scenario, kcals_per_head_meat_dict, constants_inputs = None ) Methods:","title":"CalculateFeedAndMeat"},{"location":"modules/src/food_system/animal_populations/#get_meat_produced","text":"source .get_meat_produced()","title":".get_meat_produced"},{"location":"modules/src/food_system/animal_populations/#get_total_dairy_cows","text":"source .get_total_dairy_cows()","title":".get_total_dairy_cows"},{"location":"modules/src/food_system/animal_populations/#get_total_milk_bearing_animals","text":"source .get_total_milk_bearing_animals() Calculates the total number of milk-bearing animals in the population. Returns ndarray : An array containing the total number of milk-bearing animals for each month","title":".get_total_milk_bearing_animals"},{"location":"modules/src/food_system/animal_populations/#countrydata","text":"source CountryData( country_name ) Main functionalities: CountryData is a class that represents data for a specific country in the food system model. It contains fields for various data points such as slaughter hours, homekill hours, and meat output. The class has methods for setting livestock unit factors, calculating homekill hours, and calculating total slaughter hours. Methods: - init (self, country_name): initializes the CountryData object with the given country name and sets various fields to empty lists or 0. LSU conversion factors for the country based on the given dataframes. homekill_desperation_parameters(self): sets the homekill fraction and other death homekill rate. calculate_homekill_hours(self): calculates the number of hours required to slaughter homekill animals. the given list. Fields: - country_name: the name of the country. - slaughter_hours: a list of total slaughter hours for each month. - homekill_hours_total_month: a list of total homekill hours for each month. - homekill_hours_budget: a list of budgeted homekill hours for each month. - meat_output: a list of meat output for each month. - small_slaughter_hours: the number of small animal slaughter hours for the country. - medium_slaughter_hours: the number of medium animal hours for the country. - large_slaughter_hours: the number of large animal hours for the country. - EK_region: the FAO region for the country. - LSU_conversion_factors: a dictionary of livestock unit conversion factors for the country. Methods:","title":"CountryData"},{"location":"modules/src/food_system/animal_populations/#set_livestock_unit_factors","text":"source .set_livestock_unit_factors( df_country_info, df_regional_conversion_factors ) Requires inputs of the country info dataframe, and the regional conversion factors dataframe df_regional_conversion_factors dataframe contains the conversion factors for the LSU for each animal type, based on ther region. And the other, df_country_info contains the mapping from the country to the region. Country Name needs to be the index of the df_country_info dataframe","title":".set_livestock_unit_factors"},{"location":"modules/src/food_system/animal_populations/#homekill_desperation_parameters","text":"source .homekill_desperation_parameters()","title":".homekill_desperation_parameters"},{"location":"modules/src/food_system/animal_populations/#calculate_homekill_hours","text":"source .calculate_homekill_hours() Function to calculate the number of hours required to slaughter the homekill animals.","title":".calculate_homekill_hours"},{"location":"modules/src/food_system/animal_populations/#calculate_total_slaughter_hours","text":"source .calculate_total_slaughter_hours( all_animals ) Probably unneccesary, but could be sueful to ibnterogate the number of salughter hours to compare between countries. Not required for the program to work (and not called)","title":".calculate_total_slaughter_hours"},{"location":"modules/src/food_system/animal_populations/#animalspecies","text":"source AnimalSpecies( animal_type, animal_species ) Class to store animal population data in. Needs to store the following: animal type, population, and slaughter.","title":"AnimalSpecies"},{"location":"modules/src/food_system/animal_populations/#parameters","text":"animal_type : str Type of animal (beef, pork, chicken etc...) population : int Number of animals (total) slaughter : int Number of animals slaughtered this month pregnant : int Number of animals pregnant this month starving : int Number of animals starving this month feed_balance : int Amount of feed required this month nutrition_ratio : object Object containing the nutrition ratio for the animal type Methods:","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#update_attributes","text":"source .update_attributes( **kwargs )","title":".update_attributes"},{"location":"modules/src/food_system/animal_populations/#set_animal_attributes","text":"source .set_animal_attributes( population, slaughter, animal_function, livestock_unit, digestion_type, animal_size, approximate_feed_conversion, digestion_efficiency_grass = 0.6, digestion_efficiency_feed = 0.8, carb_requirement = -1, protein_requirement = -1, fat_requirement = -1 )","title":".set_animal_attributes"},{"location":"modules/src/food_system/animal_populations/#set_lsu_attributes","text":"source .set_LSU_attributes( country_object )","title":".set_LSU_attributes"},{"location":"modules/src/food_system/animal_populations/#set_species_milk_attributes","text":"source .set_species_milk_attributes( productive_milk_age_start, productive_milk_age_end, insemination_cycle_time_for_milk, milk_production_per_month_per_head = None )","title":".set_species_milk_attributes"},{"location":"modules/src/food_system/animal_populations/#retiring_milk_head_monthly","text":"source .retiring_milk_head_monthly() Function to calculate the number of retiring milk animals per month","title":".retiring_milk_head_monthly"},{"location":"modules/src/food_system/animal_populations/#set_species_slaughter_attributes","text":"source .set_species_slaughter_attributes( gestation, other_animal_death_rate_annual, animals_per_pregnancy, animal_slaughter_hours, change_in_slaughter_rate, pregnant_animal_slaughter_fraction, reduction_in_animal_breeding, target_population_fraction, starvation_death_fraction, transfer_births_or_head ) Function to set the attributes of the animal species that are related to slaughter","title":".set_species_slaughter_attributes"},{"location":"modules/src/food_system/animal_populations/#parameters_1","text":"gestation : int gestation period in months annual death rate of animals number of animals per pregnancy hours per animal spent slaughtering 0.5 = half of animals slaughtered animals are attempted to be slaughtered, 0.5 = half of pregnant animals 1 = no reduction, 0.5 = half of animals are bred = target population is equal to the iniitla population, 0 = targetting to kill all animals population or head imported from other countries","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns","text":"None","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#set_milk_birth","text":"source .set_milk_birth()","title":".set_milk_birth"},{"location":"modules/src/food_system/animal_populations/#set_initial_milk_transfer","text":"source .set_initial_milk_transfer()","title":".set_initial_milk_transfer"},{"location":"modules/src/food_system/animal_populations/#total_homekill","text":"source .total_homekill() Function to calculate the total homekill per month.","title":".total_homekill"},{"location":"modules/src/food_system/animal_populations/#parameters_2","text":"None","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_1","text":"total_homekill : int the total homekill per month","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#exported_births","text":"source .exported_births() Function to calculate the number of births exported from the animal population.","title":".exported_births"},{"location":"modules/src/food_system/animal_populations/#parameters_3","text":"None","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_2","text":"exported_births : int the number of births exported from the animal population","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#one_lsu_monthly_billion_kcal","text":"source .one_LSU_monthly_billion_kcal()","title":".one_LSU_monthly_billion_kcal"},{"location":"modules/src/food_system/animal_populations/#net_energy_required_per_month","text":"source .net_energy_required_per_month() Function to calculate the total net energy required per month for the species","title":".net_energy_required_per_month"},{"location":"modules/src/food_system/animal_populations/#net_energy_required_per_species","text":"source .net_energy_required_per_species() Function to calculate the total net energy required per month for the species","title":".net_energy_required_per_species"},{"location":"modules/src/food_system/animal_populations/#reset_ne_balance","text":"source .reset_NE_balance() This function resets the feed balance to the feed required per month for the species Needs to be run before feeding the animals each month.","title":".reset_NE_balance"},{"location":"modules/src/food_system/animal_populations/#feed_the_species","text":"source .feed_the_species( grass_input, feed_input, is_ruminant = False )","title":".feed_the_species"},{"location":"modules/src/food_system/animal_populations/#append_month_zero","text":"source .append_month_zero() Objective: - The objective of the 'append_month_zero' method is to append the baseline values of various attributes of the animal species to their respective lists. These values will be used as a reference point for future calculations. Inputs: - The method takes no external inputs. It uses the instance variables of the class 'AnimalSpecies' to calculate and append the baseline values.","title":".append_month_zero"},{"location":"modules/src/food_system/animal_populations/#animalpopulation","text":"source AnimalPopulation() Methods:","title":"AnimalPopulation"},{"location":"modules/src/food_system/animal_populations/#calculate_additive_births","text":"source .calculate_additive_births( animal, current_month )","title":".calculate_additive_births"},{"location":"modules/src/food_system/animal_populations/#calculate_change_in_population","text":"source .calculate_change_in_population( animal, country_object, new_additive_animals_month, remaining_hours_this_size ) This function will calculate the change in animal population for a given animal type It will do so by calculating the number of new births, the number of deaths, and the number of animals slaughtered It will then update the animal object with the new population It will also update the animal object with the number of animals that are pregnant, and the number of animals that are lactating Some parameters are calulctaed before the 'slaughter event' where the populations change, some are calculated after Those that are calulcated before are: - the new births this month (based on the number of animals that are pregnant) - other deaths this month - the slauhter rate this month - spare slaughter hours this month Those that are calculated after are: - the number of animals that are lactating - the new population this month - the population of animals that are pregnant for next month","title":".calculate_change_in_population"},{"location":"modules/src/food_system/animal_populations/#calculate_pregnant_animals_birthing","text":"source .calculate_pregnant_animals_birthing( animal, new_pregnant_animals_total ) This function will calculate the number of pregnant animals birthing this month, based on the number of pregnant animals remaining Uses a simple calculation of the number of pregnant animals divided by the gestation period This is not a perfect calculation, as it assumes that an even distribution of animals will birth each month However, it is a good approximation for the purposes of this model","title":".calculate_pregnant_animals_birthing"},{"location":"modules/src/food_system/animal_populations/#parameters_4","text":"animal : AnimalSpecies The animal object for the animal type that you want to calculate the change in population for The number of pregnant animals remaining this month","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_3","text":"The number of pregnant animals birthing this month","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#calculate_pregnant_slaughter","text":"source .calculate_pregnant_slaughter( animal, new_slaughter_rate ) This function will determine how many of the animals who died this month were pregnant Check if the number of pregnant animals set for slaughter is less than the number of animals slaughtered this month If so, proceed to calculate the number of pregnant animals slaughtered Otherwise, set the number of pregnant animals slaughtered to the number of animals slaughtered this month","title":".calculate_pregnant_slaughter"},{"location":"modules/src/food_system/animal_populations/#calculate_animal_population","text":"source .calculate_animal_population( animal, country_object, new_additive_animals_month, new_other_animal_death, new_slaughter_rate )","title":".calculate_animal_population"},{"location":"modules/src/food_system/animal_populations/#calculate_births","text":"source .calculate_births( animal ) This function calculates the number of new births this month","title":".calculate_births"},{"location":"modules/src/food_system/animal_populations/#parameters_5","text":"animal : object The animal object that is being calculated","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_4","text":"from milk animals, not total births (meat and milk)) to meat births from milk animals, not total births (meat and milk))","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#calculate_breeding_changes","text":"source .calculate_breeding_changes( animal ) This function calculates the changes in breeding for the animal type This is only called after the gestation period is over It will update the animal object with the new number of pregnant animals Based on the reduction in breeding Pregnant slaughter is halted, as breeding changes have taken place from the breeding intervention","title":".calculate_breeding_changes"},{"location":"modules/src/food_system/animal_populations/#parameters_6","text":"animal : object The animal object that is being calculated","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_5","text":"None","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#calculate_other_deaths","text":"source .calculate_other_deaths( animal )","title":".calculate_other_deaths"},{"location":"modules/src/food_system/animal_populations/#calculate_slaughter_rate","text":"source .calculate_slaughter_rate( animal, country_object, new_births_animals_month, new_other_animal_death, remaining_hours_this_size ) This function calculates the new slaughter rate based on the spare slaughter hours and the target animal population","title":".calculate_slaughter_rate"},{"location":"modules/src/food_system/animal_populations/#parameters_7","text":"animal : object The animal object that is being calculated The number of spare slaughter hours generated The target animal population","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_6","text":"The new slaughter rate The number of spare slaughter hours remaining after the new slaughter rate is calculated","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#calculate_other_death_homekill_head","text":"source .calculate_other_death_homekill_head( animal, country_object )","title":".calculate_other_death_homekill_head"},{"location":"modules/src/food_system/animal_populations/#calculate_healthy_homekill_head","text":"source .calculate_healthy_homekill_head( animal, country_object )","title":".calculate_healthy_homekill_head"},{"location":"modules/src/food_system/animal_populations/#calculate_starving_pop_post_slaughter_healthy_homekill","text":"source .calculate_starving_pop_post_slaughter_healthy_homekill( animal )","title":".calculate_starving_pop_post_slaughter_healthy_homekill"},{"location":"modules/src/food_system/animal_populations/#calculate_starving_homekill_head","text":"source .calculate_starving_homekill_head( animal, country_object, population_starving_post_slaughter_and_healthy_homekill )","title":".calculate_starving_homekill_head"},{"location":"modules/src/food_system/animal_populations/#calculate_starving_pop_post_all_slaughter_homekill","text":"source .calculate_starving_pop_post_all_slaughter_homekill( animal, population_starving_post_slaughter_and_healthy_homekill )","title":".calculate_starving_pop_post_all_slaughter_homekill"},{"location":"modules/src/food_system/animal_populations/#other_death_pregnant_adjustment","text":"source .other_death_pregnant_adjustment( animal )","title":".other_death_pregnant_adjustment"},{"location":"modules/src/food_system/animal_populations/#calculate_starving_other_death_head","text":"source .calculate_starving_other_death_head( animal, population_starving_post_slaughter_and_all_homekill ) This function calculates the number of animals that die from starvation in a month. It takes the population of animals that are starving after slaughter and homekill, and calculates the number of animals that die from starvation. In terms of physical relevance - the animals that don't die from starvation are the ones that are able to find enough other food to survive or have fat stores etc. These animals ARE NOT turned in to meat. Those that are turned in to meat are captured in the homekill functions.","title":".calculate_starving_other_death_head"},{"location":"modules/src/food_system/animal_populations/#parameters_8","text":"animal : Animal The animal object that is being calculated for. The number of animals that are starving after slaughter and homekill.","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_7","text":"float The number of animals that die from starvation in a month.","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#calculate_final_population","text":"source .calculate_final_population( animal ) This function calculates the final population of the animal after all the slaughter and homekill has been done.","title":".calculate_final_population"},{"location":"modules/src/food_system/animal_populations/#parameters_9","text":"animal : Animal The animal object that is being calculated for.","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_8","text":"float The final population of the animal.","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#feed_animals","text":"source .feed_animals( animal_list, ruminants, available_feed, available_grass ) This function will feed the animals It will do so by allocating the grass first to those animals that can eat it, and then allocating the remaining feed to the remaining animals It will also priotiise the animals that are most efficient at converting feed, This means starting with milk. List needs to be sorted in the oprder you want the animals to be prioritised for feed","title":".feed_animals"},{"location":"modules/src/food_system/animal_populations/#calculate_starving_animals_after_feed","text":"source .calculate_starving_animals_after_feed( animal_list ) This function will calculate the number of animals that are starving after feeding It iterates through the animal list and calculates the number of animals that are starving result is appended to the animal object","title":".calculate_starving_animals_after_feed"},{"location":"modules/src/food_system/animal_populations/#set_current_populations","text":"source .set_current_populations( animal_objects ) Sets the current population of each animal object This simply sets the current population to the value at the end of the previous month. This value is then updated during the month loop. Runs at the start opf the month before any changes to population are made.","title":".set_current_populations"},{"location":"modules/src/food_system/animal_populations/#appened_current_populations","text":"source .appened_current_populations( animal_objects ) Appends the current population of each animal object to its population list. Runs at the end of the month loop once currrent population has been updated Args animal_objects ( type ) : description","title":".appened_current_populations"},{"location":"modules/src/food_system/animal_populations/#animaldatareader","text":"source AnimalDataReader() Methods:","title":"AnimalDataReader"},{"location":"modules/src/food_system/animal_populations/#read_animal_population_data","text":"source .read_animal_population_data( filename ) Read animal population data from CSV file","title":".read_animal_population_data"},{"location":"modules/src/food_system/animal_populations/#returns_9","text":"df_animal_stock_info : pandas dataframe Dataframe containing animal population data","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#read_animal_nutrition_data","text":"source .read_animal_nutrition_data( filename ) \" Read animal nutrition data from CSV file","title":".read_animal_nutrition_data"},{"location":"modules/src/food_system/animal_populations/#returns_10","text":"df_animal_nutrition : pandas dataframe Dataframe containing animal nutrition data","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#read_animal_options","text":"source .read_animal_options( filename ) \" Read animal nutrition data from CSV file","title":".read_animal_options"},{"location":"modules/src/food_system/animal_populations/#returns_11","text":"df_animal_nutrition : pandas dataframe Dataframe containing animal nutrition data","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#read_animal_regional_factors","text":"source .read_animal_regional_factors( filename ) \" Read animal nutrition data from CSV file","title":".read_animal_regional_factors"},{"location":"modules/src/food_system/animal_populations/#returns_12","text":"df_animal_nutrition : pandas dataframe Dataframe containing animal nutrition data","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#read_country_data","text":"source .read_country_data( filename ) \" Read animal nutrition data from CSV file","title":".read_country_data"},{"location":"modules/src/food_system/animal_populations/#returns_13","text":"df_animal_nutrition : pandas dataframe Dataframe containing animal nutrition data","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#animalmodelbuilder","text":"source AnimalModelBuilder() Methods:","title":"AnimalModelBuilder"},{"location":"modules/src/food_system/animal_populations/#create_animal_objects","text":"source .create_animal_objects( df_animal_stock_info, df_animal_attributes ) Create animal objects from dataframes","title":".create_animal_objects"},{"location":"modules/src/food_system/animal_populations/#parameters_10","text":"df_animal_stock_info : pandas dataframe Single dimension Dataframe containing animal population data for each country Dataframe containing animal nutrition data","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_14","text":"List of animal objects","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#get_optimal_next_animal_to_feed","text":"source .get_optimal_next_animal_to_feed( animal_dict, kcals_per_head_meat_dict, df_animal_attributes )","title":".get_optimal_next_animal_to_feed"},{"location":"modules/src/food_system/animal_populations/#update_animal_objects_with_slaughter","text":"source .update_animal_objects_with_slaughter( animal_list, df_animal_attributes, df_animal_options, scenario, kcals_per_head_meat_dict ) This function updates the animal objects with the slaughter data","title":".update_animal_objects_with_slaughter"},{"location":"modules/src/food_system/animal_populations/#parameters_11","text":"animal_list : list List of animal objects Dataframe containing animal attibute data Dataframe containing animal options data","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_15","text":"List of animal objects","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#update_animal_objects_with_milk","text":"source .update_animal_objects_with_milk( animal_list, df_animal_attributes ) This function updates the animal objects with the slaughter data.","title":".update_animal_objects_with_milk"},{"location":"modules/src/food_system/animal_populations/#parameters_12","text":"animal_list : list List of animal objects Dataframe containing animal attibute data Dataframe containing animal options data","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_16","text":"List of animal objects","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#update_animal_objects_lsu_factor","text":"source .update_animal_objects_LSU_factor( animal_list, country_object ) This function updates the animal objects with the LSU factors","title":".update_animal_objects_LSU_factor"},{"location":"modules/src/food_system/animal_populations/#parameters_13","text":"animal_list : list List of animal objects Object containing country data","title":"Parameters"},{"location":"modules/src/food_system/animal_populations/#returns_17","text":"List of animal objects","title":"Returns"},{"location":"modules/src/food_system/animal_populations/#remove_first_month","text":"source .remove_first_month( animal )","title":".remove_first_month"},{"location":"modules/src/food_system/animal_populations/#debugging","text":"source Debugging() Methods:","title":"Debugging"},{"location":"modules/src/food_system/animal_populations/#print_list_lengths","text":"source .print_list_lengths( obj )","title":".print_list_lengths"},{"location":"modules/src/food_system/animal_populations/#save_single_animal_data_to_csv","text":"source .save_single_animal_data_to_csv( animal, output_path = 'animal_single_data_to_csv.csv' )","title":".save_single_animal_data_to_csv"},{"location":"modules/src/food_system/animal_populations/#print_list_any","text":"source .print_list_any( animal_list )","title":".print_list_any"},{"location":"modules/src/food_system/animal_populations/#available_feed_function","text":"source .available_feed_function( billion_kcals, months_to_run = 120 ) Energy is expressed as digestible (DE), metabolizable (ME), or net energy (NE) by considering the loss of energy during digestion and metabolism from gross energy (GE) in the feed, as follows: Gross energy (GE): the amount of energy in the feed. Digestible energy (DE): the amount of energy in the feed minus the amount of energy lost in the feces. Metabolizable energy (ME): the amount of energy in the feed minus the energy lost in the feces and urine. Net energy (NE): the amount of energy in the feed minus the energy lost in the feces, urine, and in heat production through digestive and metabolic processes, i.e. heat increment.","title":".available_feed_function"},{"location":"modules/src/food_system/animal_populations/#available_grass_function","text":"source .available_grass_function( billion_kcals, months_to_run = 120 )","title":".available_grass_function"},{"location":"modules/src/food_system/animal_populations/#check-is-billion-kcals","text":"Energy is expressed as digestible (DE), metabolizable (ME), or net energy (NE) by considering the loss of energy during digestion and metabolism from gross energy (GE) in the feed, as follows: Gross energy (GE): the amount of energy in the feed. Digestible energy (DE): the amount of energy in the feed minus the amount of energy lost in the feces. Metabolizable energy (ME): the amount of energy in the feed minus the energy lost in the feces and urine. Net energy (NE): the amount of energy in the feed minus the energy lost in the feces, urine, and in heat production through digestive and metabolic processes, i.e. heat increment.","title":"CHECK IS BILLION KCALS"},{"location":"modules/src/food_system/animal_populations/#calculate_net_slaughter_hours_by_size","text":"source .calculate_net_slaughter_hours_by_size( animals ) @author: DMR This function gets the total hours in the relevant size (small, medium, or large) which can be used to slaughter animals of that size","title":"calculate_net_slaughter_hours_by_size"},{"location":"modules/src/food_system/animal_populations/#world_test","text":"source .world_test() Test the animal population model for the case with full-trade by including worldwide aggregated feed and grass supply.","title":"world_test"},{"location":"modules/src/food_system/cellulosic_sugar/","text":"CellulosicSugar source CellulosicSugar( constants_for_params ) Methods: .calculate_monthly_cs_production source .calculate_monthly_cs_production( constants_for_params ) Calculates the monthly production of cellulosic sugar based on the given constants for parameters. Args constants_for_params (dict) : A dictionary containing the constants for parameters. Returns None","title":"Cellulosic sugar"},{"location":"modules/src/food_system/cellulosic_sugar/#_1","text":"","title":""},{"location":"modules/src/food_system/cellulosic_sugar/#cellulosicsugar","text":"source CellulosicSugar( constants_for_params ) Methods:","title":"CellulosicSugar"},{"location":"modules/src/food_system/cellulosic_sugar/#calculate_monthly_cs_production","text":"source .calculate_monthly_cs_production( constants_for_params ) Calculates the monthly production of cellulosic sugar based on the given constants for parameters. Args constants_for_params (dict) : A dictionary containing the constants for parameters. Returns None","title":".calculate_monthly_cs_production"},{"location":"modules/src/food_system/feed_and_biofuels/","text":"FeedAndBiofuels source FeedAndBiofuels( constants_for_params ) Methods: .create_feed_food_from_kcals source .create_feed_food_from_kcals( food_kcals ) .set_feed_and_biofuels source .set_feed_and_biofuels( outdoor_crops_used_for_biofuel, methane_scp_used_for_biofuel, cellulosic_sugar_used_for_biofuel, remaining_biofuel_needed_from_stored_food, outdoor_crops_used_for_feed, methane_scp_used_for_feed, cellulosic_sugar_used_for_feed, remaining_feed_needed_from_stored_food ) This function sets the feed and biofuel usage for each month. It takes the outdoor crops, methane, and cellulosic sugar that are used for feed and biofuels, and the remaining feed and biofuel needed from stored food. Args outdoor_crops_used_for_biofuel (list) : A list of outdoor crops used for biofuel methane_scp_used_for_biofuel (list) : A list of methane SCP used for biofuel cellulosic_sugar_used_for_biofuel (list) : A list of cellulosic sugar used for biofuel remaining_biofuel_needed_from_stored_food (Food) : The remaining biofuel needed from stored food outdoor_crops_used_for_feed (list) : A list of outdoor crops used for feed methane_scp_used_for_feed (list) : A list of methane SCP used for feed cellulosic_sugar_used_for_feed (list) : A list of cellulosic sugar used for feed remaining_feed_needed_from_stored_food (Food) : The remaining feed needed from stored food Returns None Example >>> feed_and_biofuels.set_feed_and_biofuels( ... [10, 20, 30], ... [40, 50, 60], ... [70, 80, 90], ... Food(100), ... [10, 20, 30], ... [40, 50, 60], ... [70, 80, 90], ... Food(100), ... ) .get_biofuels_and_feed_from_delayed_shutoff source .get_biofuels_and_feed_from_delayed_shutoff( constants_for_params ) .get_feed_usage source .get_feed_usage( feed_duration ) This function is used to get the feed usage before the cap is applied. The total number of months before shutoff is the duration, representing the number of nonzero feed months for feeds to be used. .get_biofuel_usage source .get_biofuel_usage( biofuel_duration ) This function calculates the biofuel usage before the cap is applied. The total number of months before shutoff is the duration, representing the number of nonzero biofuel months for biofuels to be used. Args biofuel_duration (int) : The number of months before the biofuel shutoff. Returns Food : A Food object representing the biofuel usage per month.","title":"Feed and biofuels"},{"location":"modules/src/food_system/feed_and_biofuels/#_1","text":"","title":""},{"location":"modules/src/food_system/feed_and_biofuels/#feedandbiofuels","text":"source FeedAndBiofuels( constants_for_params ) Methods:","title":"FeedAndBiofuels"},{"location":"modules/src/food_system/feed_and_biofuels/#create_feed_food_from_kcals","text":"source .create_feed_food_from_kcals( food_kcals )","title":".create_feed_food_from_kcals"},{"location":"modules/src/food_system/feed_and_biofuels/#set_feed_and_biofuels","text":"source .set_feed_and_biofuels( outdoor_crops_used_for_biofuel, methane_scp_used_for_biofuel, cellulosic_sugar_used_for_biofuel, remaining_biofuel_needed_from_stored_food, outdoor_crops_used_for_feed, methane_scp_used_for_feed, cellulosic_sugar_used_for_feed, remaining_feed_needed_from_stored_food ) This function sets the feed and biofuel usage for each month. It takes the outdoor crops, methane, and cellulosic sugar that are used for feed and biofuels, and the remaining feed and biofuel needed from stored food. Args outdoor_crops_used_for_biofuel (list) : A list of outdoor crops used for biofuel methane_scp_used_for_biofuel (list) : A list of methane SCP used for biofuel cellulosic_sugar_used_for_biofuel (list) : A list of cellulosic sugar used for biofuel remaining_biofuel_needed_from_stored_food (Food) : The remaining biofuel needed from stored food outdoor_crops_used_for_feed (list) : A list of outdoor crops used for feed methane_scp_used_for_feed (list) : A list of methane SCP used for feed cellulosic_sugar_used_for_feed (list) : A list of cellulosic sugar used for feed remaining_feed_needed_from_stored_food (Food) : The remaining feed needed from stored food Returns None Example >>> feed_and_biofuels.set_feed_and_biofuels( ... [10, 20, 30], ... [40, 50, 60], ... [70, 80, 90], ... Food(100), ... [10, 20, 30], ... [40, 50, 60], ... [70, 80, 90], ... Food(100), ... )","title":".set_feed_and_biofuels"},{"location":"modules/src/food_system/feed_and_biofuels/#get_biofuels_and_feed_from_delayed_shutoff","text":"source .get_biofuels_and_feed_from_delayed_shutoff( constants_for_params )","title":".get_biofuels_and_feed_from_delayed_shutoff"},{"location":"modules/src/food_system/feed_and_biofuels/#get_feed_usage","text":"source .get_feed_usage( feed_duration ) This function is used to get the feed usage before the cap is applied. The total number of months before shutoff is the duration, representing the number of nonzero feed months for feeds to be used.","title":".get_feed_usage"},{"location":"modules/src/food_system/feed_and_biofuels/#get_biofuel_usage","text":"source .get_biofuel_usage( biofuel_duration ) This function calculates the biofuel usage before the cap is applied. The total number of months before shutoff is the duration, representing the number of nonzero biofuel months for biofuels to be used. Args biofuel_duration (int) : The number of months before the biofuel shutoff. Returns Food : A Food object representing the biofuel usage per month.","title":".get_biofuel_usage"},{"location":"modules/src/food_system/food/","text":"Food source Food( kcals = 0, fat = 0, protein = 0, kcals_units = 'billionkcals', fat_units = 'thousandtons', protein_units = 'thousandtons' ) A food always has calories, fat, and protein. Food applies to biofuels and feed properties as well. A food always has units for each nutrient and these need to match when combining foods in some way, such as adding up, multiplying, or dividing their nutrients Best practice is to alter the food's units to be as specific as possible to prevent errors in the calculation. Here are some examples of using the food class: CONVENTIONS: A nutrient with a list of the value for each month, will need to have \" each month\" at the end of the units. A nutrient that represents the value for every month must have a \" per month\" at the end of the units. A nutrient with a single value all summed up over all time periods must not contain any \" each month\" or \" per month\" in the units. example_food=Food(10,3,1) (defaults to billion kcals, thousand tons monthly fat, thousand tons monthly protein) print(example_food): protein: 1 thousand tons >>> kcals_units = 'ratio minimum global needs per year', >>> fat_units = 'ratio minimum global needs per year', >>> protein_units = 'ratio minimum global needs per year', >>> ) >>> print(example_food): protein: 1 ratio minimum global needs per year (in order to get a min nutrient, you need to make sure the units are all the same) (in reality, you would want to divide the values by the actual global needs above) print(example_food.get_min_nutrient()) ('protein', 1) >>> example_food_monthly.set_units( >>> kcals_units = 'ratio minimum global needs per month', >>> fat_units = 'ratio minimum global needs per month', >>> protein_units = 'ratio minimum global needs per month', >>> ) print(example_food_monthly) protein: 0.08333333333333333 ratio minimum global needs per month >>> example_food_all_months = Food( >>> [example_food_monthly.kcals] * NMONTHS, >>> [example_food_monthly.fat] * NMONTHS, >>> [example_food_monthly.protein] * NMONTHS, >>> ) >>> example_food_all_months.set_units( >>> kcals_units = 'ratio minimum global needs each month', >>> fat_units = 'ratio minimum global needs each month', >>> protein_units = 'ratio minimum global needs each month', >>> ) >>> print(example_food_all_months) ratio minimum global needs each month Methods: .reset_food source .reset_food( kcals = 0, fat = 0, protein = 0, kcals_units = 'billionkcals', fat_units = 'thousandtons', protein_units = 'thousandtons' ) Initializes a new food object with the given macronutrients and sets the default units. Args kcals (float) : The number of kilocalories in the food. Default is 0. fat (float) : The amount of fat in the food. Default is 0. protein (float) : The amount of protein in the food. Default is 0. kcals_units (str) : The units for the kilocalories. Default is \"billion kcals\". fat_units (str) : The units for the fat. Default is \"thousand tons\". protein_units (str) : The units for the protein. Default is \"thousand tons\". Returns None Example >>> food.reset_food() # sets back to zero and resets units .total_energy_in_food source .total_energy_in_food() Calculates the total energy in a given food in billion kcals by converting energy in protein and fat. Only works if: kcals_units=\"billion kcals\", fat_units=\"thousand tons\", protein_units=\"thousand tons\", As a thousand tonnes, and a billion kcals are the same (10^9), the maths for conversion is simple. Args self (Food) : An instance of the Food class. Returns float : The total energy in billion kcals. Raises AssertionError : If kcals_units, fat_units, or protein_units are not set to the correct values. Example >>> food.kcals_units = \"billion kcals\" >>> food.fat_units = \"thousand tons\" >>> food.protein_units = \"thousand tons\" >>> food.protein = 1000 >>> food.fat = 2000 >>> food.kcals = 3000 >>> food.total_energy_in_food() 23000.0 .validate_if_list source .validate_if_list() Checks if the food object is a list type and runs all the necessary checks to ensure that the list is properly set up. Args self (Food) : The Food object to be validated. Returns None Example >>> food.validate_if_list() .make_sure_not_a_list source .make_sure_not_a_list() Check if any of the food nutrients are a list or numpy array and throw an error if so. Args self : instance of the Food class Returns None .make_sure_is_a_list source .make_sure_is_a_list() This function checks if the food nutrients are in the form of a list and throws an error if not. It then validates the list properties. Args self (Food) : An instance of the Food class. Returns None Example >>> food.make_sure_is_a_list() .make_sure_fat_protein_zero_if_kcals_is_zero source .make_sure_fat_protein_zero_if_kcals_is_zero() This function ensures that the values of fat and protein are zero if kcals is zero. Args self (Food) : an instance of the Food class Returns None .ensure_other_list_zero_if_this_is_zero source .ensure_other_list_zero_if_this_is_zero( other_list ) Get the value of the elements where the passed in list is zero, otherwise returned elements are zero. .make_sure_not_nan source .make_sure_not_nan() Check if the food's nutritional values are NaN and raise an assertion error if they are. Args self (Food) : An instance of the Food class. Returns None .shift source .shift( months ) Shifts the monthly values of kcals, fat, and protein by the given number of months. The newly introduced values (for months that are shifted into existence) will be set to 0. .plot source .plot( title = 'genericfoodobjectovertime' ) Plots the properties of this food object using the Plotter class. Args title (str) : The title of the plot. Defaults to \"generic food object over time\". Returns str : The file path of the saved plot. Example >>> food.plot(\"My Food Plot\") '/path/to/saved/plot.png' .is_list_monthly source .is_list_monthly() Check if kcals is a list or numpy array. Args self : instance of Food class Returns bool : True if kcals is a list or numpy array, False otherwise .is_never_negative source .is_never_negative() Checks whether the food's macronutrients are never negative. Returns bool : True if all macronutrients are non-negative, False otherwise. .all_greater_than source .all_greater_than( other ) Determines if the macronutrient values of the current food object are greater than the macronutrient values of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food object's macronutrient values are greater than the other food object's macronutrient values. Raises AssertionError : If the units of the two food objects are not the same. Example >>> food2 = Food('banana', 120, 0.4, 0.6, 0.3, 'g') >>> food1.all_greater_than(food2) False .all_less_than source .all_less_than( other ) Compares the macronutrient values of two food items and returns True if the values of the current food item are less than the other food item's values. Args other (Food) : The other food item to compare with. Returns bool : True if the current food item's macronutrient values are less than the other food item's values. Raises AssertionError : If the units of the two food items are not the same. Example >>> food2 = Food('banana', 100, 1.0, 0.2, 'g') >>> food1.all_less_than(food2) True .any_greater_than source .any_greater_than( other ) Determines if the macronutrient values of the current food object are greater than the macronutrient values of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food object's macronutrient values are greater than the other food object's macronutrient values. Raises AssertionError : If the units of the two food objects are not the same. Example >>> food2 = Food('banana', 105, 0.4, 0.6, 0.1, 'g') >>> food1.any_greater_than(food2) False .any_less_than source .any_less_than( other ) Determines if the macronutrient values of the current food object are less than the macronutrient values of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food object's macronutrient values are less than the other food object's macronutrient values. .all_greater_than_or_equal_to source .all_greater_than_or_equal_to( other ) Compares the macronutrient values of two food items and returns True if the values of the current food item are greater than or equal to the other food item's values. Args other (Food) : The other food item to compare with. Returns bool : True if the current food item's macronutrient values are greater than or equal to the other food item's values, False otherwise. .all_less_than_or_equal_to source .all_less_than_or_equal_to( other ) Determines if the macronutrients of this food are less than or equal to the macronutrients of another food. Args other (Food or List[Food]) : The other food or list of foods to compare to. Returns bool : True if the food's macronutrients are less than or equal to the other food's. Cases: - This is a single food, other is a single food - This is a single food, other is a list of foods - This is a list of foods, other is a single food - This is a list of foods, other is a list of foods .any_greater_than_or_equal_to source .any_greater_than_or_equal_to( other ) Determines if the macronutrient values of the current food object are greater than or equal to the macronutrient values of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food object's macronutrient values are greater than or equal to the other food object's macronutrient values. .any_less_than_or_equal_to source .any_less_than_or_equal_to( other ) Determines if the macronutrients of the current food object are less than or equal to those of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food's macronutrients are less than or equal to the other food's. .all_equals_zero source .all_equals_zero( rounding_decimals = 9 ) Check if all macronutrients of the food are equal to zero. Args None Returns bool : True if the food's macronutrients are equal to zero, False otherwise. .any_equals_zero source .any_equals_zero() Check if any of the macronutrients of the food are equal to zero. Args None Returns bool : True if any of the macronutrients are equal to zero, False otherwise. .all_greater_than_zero source .all_greater_than_zero() Check if all macronutrients of the food are greater than zero. Args None Returns bool : True if all macronutrients are greater than zero, False otherwise. .any_greater_than_zero source .any_greater_than_zero() Returns True if any of the food's macronutrients are greater than zero. Args self (Food) : an instance of the Food class Returns bool : True if any of the food's macronutrients are greater than zero, False otherwise .all_greater_than_or_equal_to_zero source .all_greater_than_or_equal_to_zero( threshold = 0 ) Checks if all macronutrients of the food are greater than or equal to zero. Args self (Food) : An instance of the Food class. Returns bool : True if all macronutrients are greater than or equal to zero, False otherwise. .as_numpy_array source .as_numpy_array() Returns ndarray : an ordered numpy array containing the nutrients of the food. .get_min_nutrient source .get_min_nutrient() Returns the minimum nutrient of the food. If the food is a list, it can return the minimum of any month of any nutrient. If the food is not a list, it returns the minimum of any nutrient. Only works when the units are identical for the different nutrients. Args self : an instance of the Food class Returns tuple : a tuple containing the name and value of the minimum nutrient Example >>> food.get_min_nutrient() ('kcals', 0) Raises AssertionError : if the units for kcals, fat, and protein are not identical AssertionError : if the minimum nutrient value is greater than the kcals value AssertionError : if the minimum nutrient value is greater than the fat value and the fat nutrient is not excluded AssertionError : if the minimum nutrient value is greater than the protein value and the protein nutrient is not excluded .get_max_nutrient source .get_max_nutrient() Returns the maximum nutrient of the food. NOTE: This function only works on single valued instances of nutrients, not arrays. Args None Returns tuple : A tuple containing the name and value of the maximum nutrient. Example >>> food.kcals = 100 >>> food.fat = 20 >>> food.protein = 30 >>> food.conversions.include_fat = True >>> food.conversions.include_protein = True >>> food.kcals_units = \"kcal\" >>> food.fat_units = \"g\" >>> food.protein_units = \"g\" >>> food.get_max_nutrient() ('fat', 20) .get_nutrients_sum source .get_nutrients_sum() Sums up the nutrients in all the months, then alters the units to remove \"each month\". Args self : instance of the Food class Returns Food : instance of the Food class with summed up nutrient values and altered units Raises AssertionError : if the list is not monthly .get_abs_values source .get_abs_values() Returns a new Food object with the absolute values of all nutrients. .get_running_total_nutrients_sum source .get_running_total_nutrients_sum() Calculates the running sum of the nutrients in all the months, without altering the units. Args self : instance of the Food class Returns Food : a new instance of the Food class with the running sum of the nutrients .get_amount_used_other_food source .get_amount_used_other_food( other_fat_ratio, other_protein_ratio ) Running sum of the amount used of the other food each month. This function calculates the amount of stored food or outdoor growing that is used by biofuels and feed. It determines the amount of the other food used by taking the max amount used of the three nutrients, which is satisfied by a certain number of units of the other food. Surplus of the nutrients used is not used at all in the calculation. Args other_fat_ratio (float) : The ratio of fat in the other food other_protein_ratio (float) : The ratio of protein in the other food Returns Food : A Food object containing the amount of kcals, fat, and protein consumed each month Example >>> other_fat_ratio = 0.2 >>> other_protein_ratio = 0.3 >>> amount_consumed_list = food.get_amount_used_other_food(other_fat_ratio, other_protein_ratio) .get_consumed_amount source .get_consumed_amount( demand_to_be_met, used_nutrient_ratio ) Returns the amount used of the demand_to_be_met a food with a given used_nutrient_ratio. The maximum nutrient used is used to determine the amount of the consumed food will be used. Args demand_to_be_met (Food) : A Food object representing the nutrient demand to be met used_nutrient_ratio (Food) : A Food object representing the nutrient ratio of the food being consumed Returns Food : A Food object representing the amount of food consumed to meet the nutrient demand Raises AssertionError : If demand_to_be_met is a monthly list AssertionError : If used_nutrient_ratio fat or protein is less than or equal to 0 .get_first_month source .get_first_month() Returns the nutrient values for the first month and converts the units from \"each\" to \"per\". Args self : instance of the Food class Returns dict : dictionary containing the nutrient values for the first month Raises AssertionError : if the nutrient values are not in a list format .get_month source .get_month( index ) Get the i month's nutrient values, and convert the units from \"each\" to \"per\". Args index (int) : The index of the month to retrieve nutrient values for. Returns Food : A Food object containing the nutrient values for the specified month. .get_min_all_months source .get_min_all_months() Creates a new Food object with the minimum nutrient values for each month. Args self : The Food object to operate on. Returns A new Food object with the minimum nutrient values for each month. .get_max_all_months source .get_max_all_months() Returns a new Food object with the maximum nutrient values for each month. Args self (Food) : The Food object to find the maximum nutrient values for. Returns Food : A new Food object with the maximum nutrient values for each month. .negative_values_to_zero source .negative_values_to_zero() Replaces negative values with zero for each month for all nutrients. If the food object is monthly, it replaces negative values for each month. If the food object is not monthly, it replaces negative values for the entire year. Also tests that the function worked by asserting that all values are greater than or equal to zero. Args None Returns Food : the relevant food object with negative values replaced .get_rounded_to_decimal source .get_rounded_to_decimal( decimals ) Round the nutritional values of a food item to the nearest decimal place. Args decimals (int) : The number of decimal places to round to. Returns Food : A new Food object with rounded nutritional values. Example >>> rounded_food = food.get_rounded_to_decimal(1) >>> rounded_food.kcals 100.1 >>> rounded_food.fat 5.7 >>> rounded_food.protein 11.0 NOTE: This function is only implemented for lists at the moment. .replace_if_list_with_zeros_is_zero source .replace_if_list_with_zeros_is_zero( list_with_zeros, replacement ) Replaces elements in a list with zeros with a specified replacement. Args list_with_zeros (Food list) : A list that has zeros in it. replacement (Food list, Food, or number) : Thing used to replace the elements. Returns Food : A copy of the original list with places where list_with_zeros is zero replaced with replacement. Raises AssertionError : If the length of list_with_zeros is not equal to the length of the original list. AssertionError : If the units of replacement are not the same as the units of the original list. Example kcals : [101 693 0 3 786], fat: [1 20 0 4 40], protein: [10 20 0 40 20] >>> list_with_zeros = Food(kcals=[0, 1, 3, 0, 5], fat=[0, 1, 3, 0, 5], protein=[0, 1, 3, 0, 5]) >>> replacement = Food(kcals=[101, 62, 23, 3, 0], fat=[1, 2, 3, 4, 5], protein=[10, 20, 30, 40, 50]) >>> processed_list = original_list.replace_if_list_with_zeros_is_zero(list_with_zeros, replacement) >>> print(processed_list) .set_to_zero_after_month source .set_to_zero_after_month( month ) Set all values after the given month to zero. Args month (int) : The month after which all values should be set to zero. Returns None","title":"Food"},{"location":"modules/src/food_system/food/#_1","text":"","title":""},{"location":"modules/src/food_system/food/#food","text":"source Food( kcals = 0, fat = 0, protein = 0, kcals_units = 'billionkcals', fat_units = 'thousandtons', protein_units = 'thousandtons' ) A food always has calories, fat, and protein. Food applies to biofuels and feed properties as well. A food always has units for each nutrient and these need to match when combining foods in some way, such as adding up, multiplying, or dividing their nutrients Best practice is to alter the food's units to be as specific as possible to prevent errors in the calculation. Here are some examples of using the food class: CONVENTIONS: A nutrient with a list of the value for each month, will need to have \" each month\" at the end of the units. A nutrient that represents the value for every month must have a \" per month\" at the end of the units. A nutrient with a single value all summed up over all time periods must not contain any \" each month\" or \" per month\" in the units. example_food=Food(10,3,1) (defaults to billion kcals, thousand tons monthly fat, thousand tons monthly protein) print(example_food): protein: 1 thousand tons >>> kcals_units = 'ratio minimum global needs per year', >>> fat_units = 'ratio minimum global needs per year', >>> protein_units = 'ratio minimum global needs per year', >>> ) >>> print(example_food): protein: 1 ratio minimum global needs per year (in order to get a min nutrient, you need to make sure the units are all the same) (in reality, you would want to divide the values by the actual global needs above) print(example_food.get_min_nutrient()) ('protein', 1) >>> example_food_monthly.set_units( >>> kcals_units = 'ratio minimum global needs per month', >>> fat_units = 'ratio minimum global needs per month', >>> protein_units = 'ratio minimum global needs per month', >>> ) print(example_food_monthly) protein: 0.08333333333333333 ratio minimum global needs per month >>> example_food_all_months = Food( >>> [example_food_monthly.kcals] * NMONTHS, >>> [example_food_monthly.fat] * NMONTHS, >>> [example_food_monthly.protein] * NMONTHS, >>> ) >>> example_food_all_months.set_units( >>> kcals_units = 'ratio minimum global needs each month', >>> fat_units = 'ratio minimum global needs each month', >>> protein_units = 'ratio minimum global needs each month', >>> ) >>> print(example_food_all_months) ratio minimum global needs each month Methods:","title":"Food"},{"location":"modules/src/food_system/food/#reset_food","text":"source .reset_food( kcals = 0, fat = 0, protein = 0, kcals_units = 'billionkcals', fat_units = 'thousandtons', protein_units = 'thousandtons' ) Initializes a new food object with the given macronutrients and sets the default units. Args kcals (float) : The number of kilocalories in the food. Default is 0. fat (float) : The amount of fat in the food. Default is 0. protein (float) : The amount of protein in the food. Default is 0. kcals_units (str) : The units for the kilocalories. Default is \"billion kcals\". fat_units (str) : The units for the fat. Default is \"thousand tons\". protein_units (str) : The units for the protein. Default is \"thousand tons\". Returns None Example >>> food.reset_food() # sets back to zero and resets units","title":".reset_food"},{"location":"modules/src/food_system/food/#total_energy_in_food","text":"source .total_energy_in_food() Calculates the total energy in a given food in billion kcals by converting energy in protein and fat. Only works if: kcals_units=\"billion kcals\", fat_units=\"thousand tons\", protein_units=\"thousand tons\", As a thousand tonnes, and a billion kcals are the same (10^9), the maths for conversion is simple. Args self (Food) : An instance of the Food class. Returns float : The total energy in billion kcals. Raises AssertionError : If kcals_units, fat_units, or protein_units are not set to the correct values. Example >>> food.kcals_units = \"billion kcals\" >>> food.fat_units = \"thousand tons\" >>> food.protein_units = \"thousand tons\" >>> food.protein = 1000 >>> food.fat = 2000 >>> food.kcals = 3000 >>> food.total_energy_in_food() 23000.0","title":".total_energy_in_food"},{"location":"modules/src/food_system/food/#validate_if_list","text":"source .validate_if_list() Checks if the food object is a list type and runs all the necessary checks to ensure that the list is properly set up. Args self (Food) : The Food object to be validated. Returns None Example >>> food.validate_if_list()","title":".validate_if_list"},{"location":"modules/src/food_system/food/#make_sure_not_a_list","text":"source .make_sure_not_a_list() Check if any of the food nutrients are a list or numpy array and throw an error if so. Args self : instance of the Food class Returns None","title":".make_sure_not_a_list"},{"location":"modules/src/food_system/food/#make_sure_is_a_list","text":"source .make_sure_is_a_list() This function checks if the food nutrients are in the form of a list and throws an error if not. It then validates the list properties. Args self (Food) : An instance of the Food class. Returns None Example >>> food.make_sure_is_a_list()","title":".make_sure_is_a_list"},{"location":"modules/src/food_system/food/#make_sure_fat_protein_zero_if_kcals_is_zero","text":"source .make_sure_fat_protein_zero_if_kcals_is_zero() This function ensures that the values of fat and protein are zero if kcals is zero. Args self (Food) : an instance of the Food class Returns None","title":".make_sure_fat_protein_zero_if_kcals_is_zero"},{"location":"modules/src/food_system/food/#ensure_other_list_zero_if_this_is_zero","text":"source .ensure_other_list_zero_if_this_is_zero( other_list ) Get the value of the elements where the passed in list is zero, otherwise returned elements are zero.","title":".ensure_other_list_zero_if_this_is_zero"},{"location":"modules/src/food_system/food/#make_sure_not_nan","text":"source .make_sure_not_nan() Check if the food's nutritional values are NaN and raise an assertion error if they are. Args self (Food) : An instance of the Food class. Returns None","title":".make_sure_not_nan"},{"location":"modules/src/food_system/food/#shift","text":"source .shift( months ) Shifts the monthly values of kcals, fat, and protein by the given number of months. The newly introduced values (for months that are shifted into existence) will be set to 0.","title":".shift"},{"location":"modules/src/food_system/food/#plot","text":"source .plot( title = 'genericfoodobjectovertime' ) Plots the properties of this food object using the Plotter class. Args title (str) : The title of the plot. Defaults to \"generic food object over time\". Returns str : The file path of the saved plot. Example >>> food.plot(\"My Food Plot\") '/path/to/saved/plot.png'","title":".plot"},{"location":"modules/src/food_system/food/#is_list_monthly","text":"source .is_list_monthly() Check if kcals is a list or numpy array. Args self : instance of Food class Returns bool : True if kcals is a list or numpy array, False otherwise","title":".is_list_monthly"},{"location":"modules/src/food_system/food/#is_never_negative","text":"source .is_never_negative() Checks whether the food's macronutrients are never negative. Returns bool : True if all macronutrients are non-negative, False otherwise.","title":".is_never_negative"},{"location":"modules/src/food_system/food/#all_greater_than","text":"source .all_greater_than( other ) Determines if the macronutrient values of the current food object are greater than the macronutrient values of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food object's macronutrient values are greater than the other food object's macronutrient values. Raises AssertionError : If the units of the two food objects are not the same. Example >>> food2 = Food('banana', 120, 0.4, 0.6, 0.3, 'g') >>> food1.all_greater_than(food2) False","title":".all_greater_than"},{"location":"modules/src/food_system/food/#all_less_than","text":"source .all_less_than( other ) Compares the macronutrient values of two food items and returns True if the values of the current food item are less than the other food item's values. Args other (Food) : The other food item to compare with. Returns bool : True if the current food item's macronutrient values are less than the other food item's values. Raises AssertionError : If the units of the two food items are not the same. Example >>> food2 = Food('banana', 100, 1.0, 0.2, 'g') >>> food1.all_less_than(food2) True","title":".all_less_than"},{"location":"modules/src/food_system/food/#any_greater_than","text":"source .any_greater_than( other ) Determines if the macronutrient values of the current food object are greater than the macronutrient values of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food object's macronutrient values are greater than the other food object's macronutrient values. Raises AssertionError : If the units of the two food objects are not the same. Example >>> food2 = Food('banana', 105, 0.4, 0.6, 0.1, 'g') >>> food1.any_greater_than(food2) False","title":".any_greater_than"},{"location":"modules/src/food_system/food/#any_less_than","text":"source .any_less_than( other ) Determines if the macronutrient values of the current food object are less than the macronutrient values of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food object's macronutrient values are less than the other food object's macronutrient values.","title":".any_less_than"},{"location":"modules/src/food_system/food/#all_greater_than_or_equal_to","text":"source .all_greater_than_or_equal_to( other ) Compares the macronutrient values of two food items and returns True if the values of the current food item are greater than or equal to the other food item's values. Args other (Food) : The other food item to compare with. Returns bool : True if the current food item's macronutrient values are greater than or equal to the other food item's values, False otherwise.","title":".all_greater_than_or_equal_to"},{"location":"modules/src/food_system/food/#all_less_than_or_equal_to","text":"source .all_less_than_or_equal_to( other ) Determines if the macronutrients of this food are less than or equal to the macronutrients of another food. Args other (Food or List[Food]) : The other food or list of foods to compare to. Returns bool : True if the food's macronutrients are less than or equal to the other food's. Cases: - This is a single food, other is a single food - This is a single food, other is a list of foods - This is a list of foods, other is a single food - This is a list of foods, other is a list of foods","title":".all_less_than_or_equal_to"},{"location":"modules/src/food_system/food/#any_greater_than_or_equal_to","text":"source .any_greater_than_or_equal_to( other ) Determines if the macronutrient values of the current food object are greater than or equal to the macronutrient values of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food object's macronutrient values are greater than or equal to the other food object's macronutrient values.","title":".any_greater_than_or_equal_to"},{"location":"modules/src/food_system/food/#any_less_than_or_equal_to","text":"source .any_less_than_or_equal_to( other ) Determines if the macronutrients of the current food object are less than or equal to those of another food object. Args other (Food) : The other food object to compare against. Returns bool : True if the current food's macronutrients are less than or equal to the other food's.","title":".any_less_than_or_equal_to"},{"location":"modules/src/food_system/food/#all_equals_zero","text":"source .all_equals_zero( rounding_decimals = 9 ) Check if all macronutrients of the food are equal to zero. Args None Returns bool : True if the food's macronutrients are equal to zero, False otherwise.","title":".all_equals_zero"},{"location":"modules/src/food_system/food/#any_equals_zero","text":"source .any_equals_zero() Check if any of the macronutrients of the food are equal to zero. Args None Returns bool : True if any of the macronutrients are equal to zero, False otherwise.","title":".any_equals_zero"},{"location":"modules/src/food_system/food/#all_greater_than_zero","text":"source .all_greater_than_zero() Check if all macronutrients of the food are greater than zero. Args None Returns bool : True if all macronutrients are greater than zero, False otherwise.","title":".all_greater_than_zero"},{"location":"modules/src/food_system/food/#any_greater_than_zero","text":"source .any_greater_than_zero() Returns True if any of the food's macronutrients are greater than zero. Args self (Food) : an instance of the Food class Returns bool : True if any of the food's macronutrients are greater than zero, False otherwise","title":".any_greater_than_zero"},{"location":"modules/src/food_system/food/#all_greater_than_or_equal_to_zero","text":"source .all_greater_than_or_equal_to_zero( threshold = 0 ) Checks if all macronutrients of the food are greater than or equal to zero. Args self (Food) : An instance of the Food class. Returns bool : True if all macronutrients are greater than or equal to zero, False otherwise.","title":".all_greater_than_or_equal_to_zero"},{"location":"modules/src/food_system/food/#as_numpy_array","text":"source .as_numpy_array() Returns ndarray : an ordered numpy array containing the nutrients of the food.","title":".as_numpy_array"},{"location":"modules/src/food_system/food/#get_min_nutrient","text":"source .get_min_nutrient() Returns the minimum nutrient of the food. If the food is a list, it can return the minimum of any month of any nutrient. If the food is not a list, it returns the minimum of any nutrient. Only works when the units are identical for the different nutrients. Args self : an instance of the Food class Returns tuple : a tuple containing the name and value of the minimum nutrient Example >>> food.get_min_nutrient() ('kcals', 0) Raises AssertionError : if the units for kcals, fat, and protein are not identical AssertionError : if the minimum nutrient value is greater than the kcals value AssertionError : if the minimum nutrient value is greater than the fat value and the fat nutrient is not excluded AssertionError : if the minimum nutrient value is greater than the protein value and the protein nutrient is not excluded","title":".get_min_nutrient"},{"location":"modules/src/food_system/food/#get_max_nutrient","text":"source .get_max_nutrient() Returns the maximum nutrient of the food. NOTE: This function only works on single valued instances of nutrients, not arrays. Args None Returns tuple : A tuple containing the name and value of the maximum nutrient. Example >>> food.kcals = 100 >>> food.fat = 20 >>> food.protein = 30 >>> food.conversions.include_fat = True >>> food.conversions.include_protein = True >>> food.kcals_units = \"kcal\" >>> food.fat_units = \"g\" >>> food.protein_units = \"g\" >>> food.get_max_nutrient() ('fat', 20)","title":".get_max_nutrient"},{"location":"modules/src/food_system/food/#get_nutrients_sum","text":"source .get_nutrients_sum() Sums up the nutrients in all the months, then alters the units to remove \"each month\". Args self : instance of the Food class Returns Food : instance of the Food class with summed up nutrient values and altered units Raises AssertionError : if the list is not monthly","title":".get_nutrients_sum"},{"location":"modules/src/food_system/food/#get_abs_values","text":"source .get_abs_values() Returns a new Food object with the absolute values of all nutrients.","title":".get_abs_values"},{"location":"modules/src/food_system/food/#get_running_total_nutrients_sum","text":"source .get_running_total_nutrients_sum() Calculates the running sum of the nutrients in all the months, without altering the units. Args self : instance of the Food class Returns Food : a new instance of the Food class with the running sum of the nutrients","title":".get_running_total_nutrients_sum"},{"location":"modules/src/food_system/food/#get_amount_used_other_food","text":"source .get_amount_used_other_food( other_fat_ratio, other_protein_ratio ) Running sum of the amount used of the other food each month. This function calculates the amount of stored food or outdoor growing that is used by biofuels and feed. It determines the amount of the other food used by taking the max amount used of the three nutrients, which is satisfied by a certain number of units of the other food. Surplus of the nutrients used is not used at all in the calculation. Args other_fat_ratio (float) : The ratio of fat in the other food other_protein_ratio (float) : The ratio of protein in the other food Returns Food : A Food object containing the amount of kcals, fat, and protein consumed each month Example >>> other_fat_ratio = 0.2 >>> other_protein_ratio = 0.3 >>> amount_consumed_list = food.get_amount_used_other_food(other_fat_ratio, other_protein_ratio)","title":".get_amount_used_other_food"},{"location":"modules/src/food_system/food/#get_consumed_amount","text":"source .get_consumed_amount( demand_to_be_met, used_nutrient_ratio ) Returns the amount used of the demand_to_be_met a food with a given used_nutrient_ratio. The maximum nutrient used is used to determine the amount of the consumed food will be used. Args demand_to_be_met (Food) : A Food object representing the nutrient demand to be met used_nutrient_ratio (Food) : A Food object representing the nutrient ratio of the food being consumed Returns Food : A Food object representing the amount of food consumed to meet the nutrient demand Raises AssertionError : If demand_to_be_met is a monthly list AssertionError : If used_nutrient_ratio fat or protein is less than or equal to 0","title":".get_consumed_amount"},{"location":"modules/src/food_system/food/#get_first_month","text":"source .get_first_month() Returns the nutrient values for the first month and converts the units from \"each\" to \"per\". Args self : instance of the Food class Returns dict : dictionary containing the nutrient values for the first month Raises AssertionError : if the nutrient values are not in a list format","title":".get_first_month"},{"location":"modules/src/food_system/food/#get_month","text":"source .get_month( index ) Get the i month's nutrient values, and convert the units from \"each\" to \"per\". Args index (int) : The index of the month to retrieve nutrient values for. Returns Food : A Food object containing the nutrient values for the specified month.","title":".get_month"},{"location":"modules/src/food_system/food/#get_min_all_months","text":"source .get_min_all_months() Creates a new Food object with the minimum nutrient values for each month. Args self : The Food object to operate on. Returns A new Food object with the minimum nutrient values for each month.","title":".get_min_all_months"},{"location":"modules/src/food_system/food/#get_max_all_months","text":"source .get_max_all_months() Returns a new Food object with the maximum nutrient values for each month. Args self (Food) : The Food object to find the maximum nutrient values for. Returns Food : A new Food object with the maximum nutrient values for each month.","title":".get_max_all_months"},{"location":"modules/src/food_system/food/#negative_values_to_zero","text":"source .negative_values_to_zero() Replaces negative values with zero for each month for all nutrients. If the food object is monthly, it replaces negative values for each month. If the food object is not monthly, it replaces negative values for the entire year. Also tests that the function worked by asserting that all values are greater than or equal to zero. Args None Returns Food : the relevant food object with negative values replaced","title":".negative_values_to_zero"},{"location":"modules/src/food_system/food/#get_rounded_to_decimal","text":"source .get_rounded_to_decimal( decimals ) Round the nutritional values of a food item to the nearest decimal place. Args decimals (int) : The number of decimal places to round to. Returns Food : A new Food object with rounded nutritional values. Example >>> rounded_food = food.get_rounded_to_decimal(1) >>> rounded_food.kcals 100.1 >>> rounded_food.fat 5.7 >>> rounded_food.protein 11.0 NOTE: This function is only implemented for lists at the moment.","title":".get_rounded_to_decimal"},{"location":"modules/src/food_system/food/#replace_if_list_with_zeros_is_zero","text":"source .replace_if_list_with_zeros_is_zero( list_with_zeros, replacement ) Replaces elements in a list with zeros with a specified replacement. Args list_with_zeros (Food list) : A list that has zeros in it. replacement (Food list, Food, or number) : Thing used to replace the elements. Returns Food : A copy of the original list with places where list_with_zeros is zero replaced with replacement. Raises AssertionError : If the length of list_with_zeros is not equal to the length of the original list. AssertionError : If the units of replacement are not the same as the units of the original list. Example kcals : [101 693 0 3 786], fat: [1 20 0 4 40], protein: [10 20 0 40 20] >>> list_with_zeros = Food(kcals=[0, 1, 3, 0, 5], fat=[0, 1, 3, 0, 5], protein=[0, 1, 3, 0, 5]) >>> replacement = Food(kcals=[101, 62, 23, 3, 0], fat=[1, 2, 3, 4, 5], protein=[10, 20, 30, 40, 50]) >>> processed_list = original_list.replace_if_list_with_zeros_is_zero(list_with_zeros, replacement) >>> print(processed_list)","title":".replace_if_list_with_zeros_is_zero"},{"location":"modules/src/food_system/food/#set_to_zero_after_month","text":"source .set_to_zero_after_month( month ) Set all values after the given month to zero. Args month (int) : The month after which all values should be set to zero. Returns None","title":".set_to_zero_after_month"},{"location":"modules/src/food_system/greenhouses/","text":"Greenhouses source Greenhouses( constants_for_params ) Methods: .assign_productivity_reduction_from_climate_impact source .assign_productivity_reduction_from_climate_impact( months_cycle, all_months_reductions, exponent, CROP_WASTE_COEFFICIENT ) Assigns productivity reduction from climate impact to greenhouses. Args months_cycle (list) : list of monthly cycles all_months_reductions (list) : list of all months reductions exponent (float) : exponent value CROP_WASTE_COEFFICIENT (float) : crop waste value Returns None Example >>> greenhouse = Greenhouses() >>> greenhouse.assign_productivity_reduction_from_climate_impact( ... [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], ... [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2], ... 2, ... 10 ... ) .get_greenhouse_area source .get_greenhouse_area( constants_for_params, outdoor_crops ) Calculates the area of greenhouses needed to grow crops and returns it as an array. Args self (Greenhouses) : an instance of the Greenhouses class constants_for_params (dict) : a dictionary containing constants used in the simulation outdoor_crops (OutdoorCrops) : an instance of the OutdoorCrops class Returns ndarray : an array containing the area of greenhouses needed to grow crops This function calculates the area of greenhouses needed to grow crops. It first checks if there is any crop area to grow. If there is no crop area, it returns an array of zeros. If there is crop area, it calculates the area of greenhouses needed based on the greenhouse area multiplier and the total crop area. If the greenhouse area multiplier is not specified, it uses the greenhouse fraction from Australia to calculate the greenhouse area. It then assigns the productivity reduction from climate impact and returns the greenhouse area array. .get_greenhouse_yield_per_ha source .get_greenhouse_yield_per_ha( constants_for_params, outdoor_crops ) Calculates the yield per hectare for greenhouses and returns the results. Args constants_for_params (dict) : A dictionary containing constants for the parameters. outdoor_crops (OutdoorCrops) : An instance of the OutdoorCrops class. Returns tuple : A tuple containing the greenhouse yield per hectare for kcals, fat, and protein. Example 10} >>> greenhouses = Greenhouses() >>> greenhouses.ADD_GREENHOUSES = True >>> greenhouses.NMONTHS = 12 >>> greenhouses.GH_KCALS_GROWN_PER_HECTARE = [100] * 12 >>> greenhouses.get_greenhouse_yield_per_ha(constants_for_params, outdoor_crops) ([110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0], [22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0], [33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0])","title":"Greenhouses"},{"location":"modules/src/food_system/greenhouses/#_1","text":"","title":""},{"location":"modules/src/food_system/greenhouses/#greenhouses","text":"source Greenhouses( constants_for_params ) Methods:","title":"Greenhouses"},{"location":"modules/src/food_system/greenhouses/#assign_productivity_reduction_from_climate_impact","text":"source .assign_productivity_reduction_from_climate_impact( months_cycle, all_months_reductions, exponent, CROP_WASTE_COEFFICIENT ) Assigns productivity reduction from climate impact to greenhouses. Args months_cycle (list) : list of monthly cycles all_months_reductions (list) : list of all months reductions exponent (float) : exponent value CROP_WASTE_COEFFICIENT (float) : crop waste value Returns None Example >>> greenhouse = Greenhouses() >>> greenhouse.assign_productivity_reduction_from_climate_impact( ... [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], ... [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2], ... 2, ... 10 ... )","title":".assign_productivity_reduction_from_climate_impact"},{"location":"modules/src/food_system/greenhouses/#get_greenhouse_area","text":"source .get_greenhouse_area( constants_for_params, outdoor_crops ) Calculates the area of greenhouses needed to grow crops and returns it as an array. Args self (Greenhouses) : an instance of the Greenhouses class constants_for_params (dict) : a dictionary containing constants used in the simulation outdoor_crops (OutdoorCrops) : an instance of the OutdoorCrops class Returns ndarray : an array containing the area of greenhouses needed to grow crops This function calculates the area of greenhouses needed to grow crops. It first checks if there is any crop area to grow. If there is no crop area, it returns an array of zeros. If there is crop area, it calculates the area of greenhouses needed based on the greenhouse area multiplier and the total crop area. If the greenhouse area multiplier is not specified, it uses the greenhouse fraction from Australia to calculate the greenhouse area. It then assigns the productivity reduction from climate impact and returns the greenhouse area array.","title":".get_greenhouse_area"},{"location":"modules/src/food_system/greenhouses/#get_greenhouse_yield_per_ha","text":"source .get_greenhouse_yield_per_ha( constants_for_params, outdoor_crops ) Calculates the yield per hectare for greenhouses and returns the results. Args constants_for_params (dict) : A dictionary containing constants for the parameters. outdoor_crops (OutdoorCrops) : An instance of the OutdoorCrops class. Returns tuple : A tuple containing the greenhouse yield per hectare for kcals, fat, and protein. Example 10} >>> greenhouses = Greenhouses() >>> greenhouses.ADD_GREENHOUSES = True >>> greenhouses.NMONTHS = 12 >>> greenhouses.GH_KCALS_GROWN_PER_HECTARE = [100] * 12 >>> greenhouses.get_greenhouse_yield_per_ha(constants_for_params, outdoor_crops) ([110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0, 110.0], [22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0], [33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0])","title":".get_greenhouse_yield_per_ha"},{"location":"modules/src/food_system/meat_and_dairy/","text":"MeatAndDairy source MeatAndDairy( constants_for_params ) Methods: .calculate_meat_nutrition source .calculate_meat_nutrition() Calculates the nutritional values of meat products based on animal ratios and nutritional ratios of small, medium, and large animals. Args self : instance of the class Returns None .get_meat_nutrition source .get_meat_nutrition() Returns a tuple containing nutritional information for different sizes of animals. Returns tuple : A tuple containing the following nutritional information: KG_PER_SMALL_ANIMAL (float): The weight of meat in kilograms for a small animal. KG_PER_MEDIUM_ANIMAL (float): The weight of meat in kilograms for a medium animal. KG_PER_LARGE_ANIMAL (float): The weight of meat in kilograms for a large animal. LARGE_ANIMAL_KCALS_PER_KG (float): The number of kilocalories per kilogram of meat for a large animal. LARGE_ANIMAL_FAT_RATIO (float): The ratio of fat to meat for a large animal. LARGE_ANIMAL_PROTEIN_RATIO (float): The ratio of protein to meat for a large animal. MEDIUM_ANIMAL_KCALS_PER_KG (float): The number of kilocalories per kilogram of meat for a medium animal. SMALL_ANIMAL_KCALS_PER_KG (float): The number of kilocalories per kilogram of meat for a small animal. .get_milk_produced_postwaste source .get_milk_produced_postwaste( milk_produced_prewaste ) Calculates the amount of grazing milk produced post-waste, given the amount of grazing milk produced pre-waste. Args milk_produced_prewaste (list) : A list of the amount of grazing milk produced pre-waste. Returns tuple : A tuple containing the amount of grazing milk produced post-waste in billions of kcals, thousands of tons of fat, and thousands of tons of protein. .get_max_slaughter_monthly_after_distribution_waste source .get_max_slaughter_monthly_after_distribution_waste( constants_inputs, chickens_culled, pigs_culled, small_animals_nonchicken_culled, medium_animals_nonpig_culled, large_animals_culled ) Get the maximum number of animals that can be culled in a month and return the resulting array for max total calories slaughtered that month. .initialize_this_country_animal_kcals source .initialize_this_country_animal_kcals( constants_inputs ) .calculate_meat_after_distribution_waste source .calculate_meat_after_distribution_waste( constants_inputs, init_chickens_culled, init_pigs_culled, init_small_animals_nonchicken_culled, init_medium_animals_nonpigs_culled, init_large_animals_culled )","title":"Meat and dairy"},{"location":"modules/src/food_system/meat_and_dairy/#_1","text":"","title":""},{"location":"modules/src/food_system/meat_and_dairy/#meatanddairy","text":"source MeatAndDairy( constants_for_params ) Methods:","title":"MeatAndDairy"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_meat_nutrition","text":"source .calculate_meat_nutrition() Calculates the nutritional values of meat products based on animal ratios and nutritional ratios of small, medium, and large animals. Args self : instance of the class Returns None","title":".calculate_meat_nutrition"},{"location":"modules/src/food_system/meat_and_dairy/#get_meat_nutrition","text":"source .get_meat_nutrition() Returns a tuple containing nutritional information for different sizes of animals. Returns tuple : A tuple containing the following nutritional information: KG_PER_SMALL_ANIMAL (float): The weight of meat in kilograms for a small animal. KG_PER_MEDIUM_ANIMAL (float): The weight of meat in kilograms for a medium animal. KG_PER_LARGE_ANIMAL (float): The weight of meat in kilograms for a large animal. LARGE_ANIMAL_KCALS_PER_KG (float): The number of kilocalories per kilogram of meat for a large animal. LARGE_ANIMAL_FAT_RATIO (float): The ratio of fat to meat for a large animal. LARGE_ANIMAL_PROTEIN_RATIO (float): The ratio of protein to meat for a large animal. MEDIUM_ANIMAL_KCALS_PER_KG (float): The number of kilocalories per kilogram of meat for a medium animal. SMALL_ANIMAL_KCALS_PER_KG (float): The number of kilocalories per kilogram of meat for a small animal.","title":".get_meat_nutrition"},{"location":"modules/src/food_system/meat_and_dairy/#get_milk_produced_postwaste","text":"source .get_milk_produced_postwaste( milk_produced_prewaste ) Calculates the amount of grazing milk produced post-waste, given the amount of grazing milk produced pre-waste. Args milk_produced_prewaste (list) : A list of the amount of grazing milk produced pre-waste. Returns tuple : A tuple containing the amount of grazing milk produced post-waste in billions of kcals, thousands of tons of fat, and thousands of tons of protein.","title":".get_milk_produced_postwaste"},{"location":"modules/src/food_system/meat_and_dairy/#get_max_slaughter_monthly_after_distribution_waste","text":"source .get_max_slaughter_monthly_after_distribution_waste( constants_inputs, chickens_culled, pigs_culled, small_animals_nonchicken_culled, medium_animals_nonpig_culled, large_animals_culled ) Get the maximum number of animals that can be culled in a month and return the resulting array for max total calories slaughtered that month.","title":".get_max_slaughter_monthly_after_distribution_waste"},{"location":"modules/src/food_system/meat_and_dairy/#initialize_this_country_animal_kcals","text":"source .initialize_this_country_animal_kcals( constants_inputs )","title":".initialize_this_country_animal_kcals"},{"location":"modules/src/food_system/meat_and_dairy/#calculate_meat_after_distribution_waste","text":"source .calculate_meat_after_distribution_waste( constants_inputs, init_chickens_culled, init_pigs_culled, init_small_animals_nonchicken_culled, init_medium_animals_nonpigs_culled, init_large_animals_culled )","title":".calculate_meat_after_distribution_waste"},{"location":"modules/src/food_system/methane_scp/","text":"MethaneSCP source MethaneSCP( constants_for_params ) Methods: .calculate_monthly_scp_caloric_production source .calculate_monthly_scp_caloric_production( constants_for_params ) .create_scp_food_from_kcals source .create_scp_food_from_kcals( kcals ) .calculate_scp_fat_and_protein_production source .calculate_scp_fat_and_protein_production()","title":"Methane scp"},{"location":"modules/src/food_system/methane_scp/#_1","text":"","title":""},{"location":"modules/src/food_system/methane_scp/#methanescp","text":"source MethaneSCP( constants_for_params ) Methods:","title":"MethaneSCP"},{"location":"modules/src/food_system/methane_scp/#calculate_monthly_scp_caloric_production","text":"source .calculate_monthly_scp_caloric_production( constants_for_params )","title":".calculate_monthly_scp_caloric_production"},{"location":"modules/src/food_system/methane_scp/#create_scp_food_from_kcals","text":"source .create_scp_food_from_kcals( kcals )","title":".create_scp_food_from_kcals"},{"location":"modules/src/food_system/methane_scp/#calculate_scp_fat_and_protein_production","text":"source .calculate_scp_fat_and_protein_production()","title":".calculate_scp_fat_and_protein_production"},{"location":"modules/src/food_system/outdoor_crops/","text":"OutdoorCrops source OutdoorCrops( constants_for_params ) Methods: .calculate_rotation_ratios source .calculate_rotation_ratios( constants_for_params ) .get_year_1_ratio_using_fraction_harvest_before_may source .get_year_1_ratio_using_fraction_harvest_before_may( first_year_xia_et_al_reduction, seasonality_values, country_iso3 ) This function subtracts off the estimated harvest for the first year for countries where .calculate_monthly_production source .calculate_monthly_production( constants_for_params ) .assign_increase_from_increased_cultivated_area source .assign_increase_from_increased_cultivated_area( constants_for_params ) .assign_reduction_from_climate_impact source .assign_reduction_from_climate_impact( constants_for_params ) .set_crop_production_minus_greenhouse_area source .set_crop_production_minus_greenhouse_area( constants_for_params, greenhouse_fraction_area )","title":"Outdoor crops"},{"location":"modules/src/food_system/outdoor_crops/#_1","text":"","title":""},{"location":"modules/src/food_system/outdoor_crops/#outdoorcrops","text":"source OutdoorCrops( constants_for_params ) Methods:","title":"OutdoorCrops"},{"location":"modules/src/food_system/outdoor_crops/#calculate_rotation_ratios","text":"source .calculate_rotation_ratios( constants_for_params )","title":".calculate_rotation_ratios"},{"location":"modules/src/food_system/outdoor_crops/#get_year_1_ratio_using_fraction_harvest_before_may","text":"source .get_year_1_ratio_using_fraction_harvest_before_may( first_year_xia_et_al_reduction, seasonality_values, country_iso3 ) This function subtracts off the estimated harvest for the first year for countries where","title":".get_year_1_ratio_using_fraction_harvest_before_may"},{"location":"modules/src/food_system/outdoor_crops/#calculate_monthly_production","text":"source .calculate_monthly_production( constants_for_params )","title":".calculate_monthly_production"},{"location":"modules/src/food_system/outdoor_crops/#assign_increase_from_increased_cultivated_area","text":"source .assign_increase_from_increased_cultivated_area( constants_for_params )","title":".assign_increase_from_increased_cultivated_area"},{"location":"modules/src/food_system/outdoor_crops/#assign_reduction_from_climate_impact","text":"source .assign_reduction_from_climate_impact( constants_for_params )","title":".assign_reduction_from_climate_impact"},{"location":"modules/src/food_system/outdoor_crops/#set_crop_production_minus_greenhouse_area","text":"source .set_crop_production_minus_greenhouse_area( constants_for_params, greenhouse_fraction_area )","title":".set_crop_production_minus_greenhouse_area"},{"location":"modules/src/food_system/seafood/","text":"Seafood source Seafood( constants_for_params ) Methods: .set_seafood_production source .set_seafood_production( time_consts_for_params ) Sets the seafood production for the Seafood class based on the given constants for parameters. Args time_consts_for_params (dict) : A dictionary containing the month-by-month constants for parameters. Returns None","title":"Seafood"},{"location":"modules/src/food_system/seafood/#_1","text":"","title":""},{"location":"modules/src/food_system/seafood/#seafood","text":"source Seafood( constants_for_params ) Methods:","title":"Seafood"},{"location":"modules/src/food_system/seafood/#set_seafood_production","text":"source .set_seafood_production( time_consts_for_params ) Sets the seafood production for the Seafood class based on the given constants for parameters. Args time_consts_for_params (dict) : A dictionary containing the month-by-month constants for parameters. Returns None","title":".set_seafood_production"},{"location":"modules/src/food_system/seaweed/","text":"Seaweed source Seaweed( constants_for_params ) Methods: .get_growth_rates source .get_growth_rates( constants_for_params ) .get_built_area source .get_built_area( constants_for_params )","title":"Seaweed"},{"location":"modules/src/food_system/seaweed/#_1","text":"","title":""},{"location":"modules/src/food_system/seaweed/#seaweed","text":"source Seaweed( constants_for_params ) Methods:","title":"Seaweed"},{"location":"modules/src/food_system/seaweed/#get_growth_rates","text":"source .get_growth_rates( constants_for_params )","title":".get_growth_rates"},{"location":"modules/src/food_system/seaweed/#get_built_area","text":"source .get_built_area( constants_for_params )","title":".get_built_area"},{"location":"modules/src/food_system/stored_food/","text":"StoredFood source StoredFood( constants_for_params, outdoor_crops ) Methods: .calculate_stored_food_to_use source .calculate_stored_food_to_use( starting_month ) Calculates and returns total stored food available to use at start of simulation. While a baseline scenario will simply use the typical amount of stocks to keep the buffer at a typical usage, other more extreme scenarios should be expected to use a higher percentage of all stored food, eating into the typical buffer. Arguments starting_month (int) : the month the simulation starts on. 1=JAN, 2=FEB, ..., 12=DEC. (NOT TO BE CONFUSED WITH THE INDEX) Returns float : the total stored food in millions of tons dry caloric Assumptions: end_simulation_ratio (float): the percent of the typical stored food to keep at the end of the simulation. The stocks listed are tabulated at the end of the month. The minimum of any beginning month is a reasonable proxy for the very lowest levels stocks reach. Note the optimizer will run through the stocks for the duration of each month. So, even starting at August (the minimum month), you would want to use the difference in stocks at the end of the previous month until the end of August to determine the stocks.","title":"Stored food"},{"location":"modules/src/food_system/stored_food/#_1","text":"","title":""},{"location":"modules/src/food_system/stored_food/#storedfood","text":"source StoredFood( constants_for_params, outdoor_crops ) Methods:","title":"StoredFood"},{"location":"modules/src/food_system/stored_food/#calculate_stored_food_to_use","text":"source .calculate_stored_food_to_use( starting_month ) Calculates and returns total stored food available to use at start of simulation. While a baseline scenario will simply use the typical amount of stocks to keep the buffer at a typical usage, other more extreme scenarios should be expected to use a higher percentage of all stored food, eating into the typical buffer. Arguments starting_month (int) : the month the simulation starts on. 1=JAN, 2=FEB, ..., 12=DEC. (NOT TO BE CONFUSED WITH THE INDEX) Returns float : the total stored food in millions of tons dry caloric Assumptions: end_simulation_ratio (float): the percent of the typical stored food to keep at the end of the simulation. The stocks listed are tabulated at the end of the month. The minimum of any beginning month is a reasonable proxy for the very lowest levels stocks reach. Note the optimizer will run through the stocks for the duration of each month. So, even starting at August (the minimum month), you would want to use the difference in stocks at the end of the previous month until the end of August to determine the stocks.","title":".calculate_stored_food_to_use"},{"location":"modules/src/food_system/unit_conversions/","text":"UnitConversions source This class is used to convert units of nutrients Methods: .set_nutrition_requirements source .set_nutrition_requirements( kcals_daily, fat_daily, protein_daily, include_fat, include_protein, population ) Returns the macronutrients of the food. This is a bit of a confusing function. It is normally run from a UnitConversions class in the Food child class that Food class contains one UnitConversions object which has had its nutrients assigned. Then, because this is the parent class, all the functions are inherited. So, running get_conversions() (the class function to get the conversions object in the child food class), this will obtain all the conversion data instantiated through the Food class. .get_units_from_list_to_total source .get_units_from_list_to_total() gets the units so that they reflect that of a single month .set_units_from_list_to_total source .set_units_from_list_to_total() sets the units so that they reflect that of a single month .get_units_from_list_to_element source .get_units_from_list_to_element() gets the units so that they reflect that of a single month .set_units_from_list_to_element source .set_units_from_list_to_element() sets the units so that they reflect that of a single month .get_units_from_element_to_list source .get_units_from_element_to_list() gets the units so that they reflect that of a list of months .set_units_from_element_to_list source .set_units_from_element_to_list() sets the units so that they reflect that of a list of months .get_units source .get_units() update and return the unit values as a 3 element array .set_units source .set_units( kcals_units, fat_units, protein_units ) Sets the units of the food (for example, billion_kcals,thousand_tons, dry caloric tons, kcals/person/day, or percent of global food supply). default units are billion kcals, thousand tons fat, thousand tons protein For convenience and as a memory tool, set the units, and make sure that whenever an operation on a different food is used, the units are compatible .print_units source .print_units() Prints the units of the nutrients .is_a_ratio source .is_a_ratio() Returns if units are all \"ratio\" type .is_units_percent source .is_units_percent() Returns if units are all \"percent\" type .in_units_kcals_grams_grams_per_person_from_ratio source .in_units_kcals_grams_grams_per_person_from_ratio( kcal_ratio, fat_ratio, protein_ratio ) If the existing units are understood by this function, it tries to convert the values and units to kcals per person per day, grams per pseron per day, kcals per person per day. arguments: kcal ratio (float): kcal per kg of the food being converted fat ratio (float): grams per kcal of the food being converted kcal ratio (float): grams per kcal of the food being converted .in_units_billions_fed source .in_units_billions_fed() .in_units_percent_fed source .in_units_percent_fed() .in_units_kcals_equivalent source .in_units_kcals_equivalent() .in_units_kcals_grams_grams_per_person source .in_units_kcals_grams_grams_per_person() .in_units_bil_kcals_thou_tons_thou_tons_per_month source .in_units_bil_kcals_thou_tons_thou_tons_per_month() .get_kcal_multipliers source .get_kcal_multipliers() This function returns a dictionary, where the value is the multiplier on kcals required to convert from the units \"billion kcals each month\" (or equivalently \"billion kcals per month\") to whatever unit is specified as the key. Therefore, multiplying kcals by this dictionary value is applying the unit multiplication: [key units] / [ billion kcals (each,per) month] .get_fat_multipliers source .get_fat_multipliers() .get_protein_multipliers source .get_protein_multipliers() .get_unit_multipliers_from_billion_kcals_thou_tons_thou_tons source .get_unit_multipliers_from_billion_kcals_thou_tons_thou_tons( units ) First, check if the unit is a known conversion. Then, returns the conversion value to get from billion kcals, thousand tons fat, thousand tons protein, to whatever units are specified in \"units\" triplet argument. units[0] is kcals units, units[1] is fat units, units[2] is protein units. .get_conversion source .get_conversion( from_units, to_units_kcals, to_units_fat, to_units_protein ) To get from any known unit to any other known unit, we first convert the given from_units to the equivalent billion kcals, thousand tons fat, thousand tons protein, by dividing the given value by the unit_multiplier dictionary value. We then convert back to the to_units by multiplying by the to_unit dictionary value. .in_units source .in_units( to_units_kcals, to_units_fat, to_units_protein )","title":"Unit conversions"},{"location":"modules/src/food_system/unit_conversions/#_1","text":"","title":""},{"location":"modules/src/food_system/unit_conversions/#unitconversions","text":"source This class is used to convert units of nutrients Methods:","title":"UnitConversions"},{"location":"modules/src/food_system/unit_conversions/#set_nutrition_requirements","text":"source .set_nutrition_requirements( kcals_daily, fat_daily, protein_daily, include_fat, include_protein, population ) Returns the macronutrients of the food. This is a bit of a confusing function. It is normally run from a UnitConversions class in the Food child class that Food class contains one UnitConversions object which has had its nutrients assigned. Then, because this is the parent class, all the functions are inherited. So, running get_conversions() (the class function to get the conversions object in the child food class), this will obtain all the conversion data instantiated through the Food class.","title":".set_nutrition_requirements"},{"location":"modules/src/food_system/unit_conversions/#get_units_from_list_to_total","text":"source .get_units_from_list_to_total() gets the units so that they reflect that of a single month","title":".get_units_from_list_to_total"},{"location":"modules/src/food_system/unit_conversions/#set_units_from_list_to_total","text":"source .set_units_from_list_to_total() sets the units so that they reflect that of a single month","title":".set_units_from_list_to_total"},{"location":"modules/src/food_system/unit_conversions/#get_units_from_list_to_element","text":"source .get_units_from_list_to_element() gets the units so that they reflect that of a single month","title":".get_units_from_list_to_element"},{"location":"modules/src/food_system/unit_conversions/#set_units_from_list_to_element","text":"source .set_units_from_list_to_element() sets the units so that they reflect that of a single month","title":".set_units_from_list_to_element"},{"location":"modules/src/food_system/unit_conversions/#get_units_from_element_to_list","text":"source .get_units_from_element_to_list() gets the units so that they reflect that of a list of months","title":".get_units_from_element_to_list"},{"location":"modules/src/food_system/unit_conversions/#set_units_from_element_to_list","text":"source .set_units_from_element_to_list() sets the units so that they reflect that of a list of months","title":".set_units_from_element_to_list"},{"location":"modules/src/food_system/unit_conversions/#get_units","text":"source .get_units() update and return the unit values as a 3 element array","title":".get_units"},{"location":"modules/src/food_system/unit_conversions/#set_units","text":"source .set_units( kcals_units, fat_units, protein_units ) Sets the units of the food (for example, billion_kcals,thousand_tons, dry caloric tons, kcals/person/day, or percent of global food supply). default units are billion kcals, thousand tons fat, thousand tons protein For convenience and as a memory tool, set the units, and make sure that whenever an operation on a different food is used, the units are compatible","title":".set_units"},{"location":"modules/src/food_system/unit_conversions/#print_units","text":"source .print_units() Prints the units of the nutrients","title":".print_units"},{"location":"modules/src/food_system/unit_conversions/#is_a_ratio","text":"source .is_a_ratio() Returns if units are all \"ratio\" type","title":".is_a_ratio"},{"location":"modules/src/food_system/unit_conversions/#is_units_percent","text":"source .is_units_percent() Returns if units are all \"percent\" type","title":".is_units_percent"},{"location":"modules/src/food_system/unit_conversions/#in_units_kcals_grams_grams_per_person_from_ratio","text":"source .in_units_kcals_grams_grams_per_person_from_ratio( kcal_ratio, fat_ratio, protein_ratio ) If the existing units are understood by this function, it tries to convert the values and units to kcals per person per day, grams per pseron per day, kcals per person per day. arguments: kcal ratio (float): kcal per kg of the food being converted fat ratio (float): grams per kcal of the food being converted kcal ratio (float): grams per kcal of the food being converted","title":".in_units_kcals_grams_grams_per_person_from_ratio"},{"location":"modules/src/food_system/unit_conversions/#in_units_billions_fed","text":"source .in_units_billions_fed()","title":".in_units_billions_fed"},{"location":"modules/src/food_system/unit_conversions/#in_units_percent_fed","text":"source .in_units_percent_fed()","title":".in_units_percent_fed"},{"location":"modules/src/food_system/unit_conversions/#in_units_kcals_equivalent","text":"source .in_units_kcals_equivalent()","title":".in_units_kcals_equivalent"},{"location":"modules/src/food_system/unit_conversions/#in_units_kcals_grams_grams_per_person","text":"source .in_units_kcals_grams_grams_per_person()","title":".in_units_kcals_grams_grams_per_person"},{"location":"modules/src/food_system/unit_conversions/#in_units_bil_kcals_thou_tons_thou_tons_per_month","text":"source .in_units_bil_kcals_thou_tons_thou_tons_per_month()","title":".in_units_bil_kcals_thou_tons_thou_tons_per_month"},{"location":"modules/src/food_system/unit_conversions/#get_kcal_multipliers","text":"source .get_kcal_multipliers() This function returns a dictionary, where the value is the multiplier on kcals required to convert from the units \"billion kcals each month\" (or equivalently \"billion kcals per month\") to whatever unit is specified as the key. Therefore, multiplying kcals by this dictionary value is applying the unit multiplication: [key units] / [ billion kcals (each,per) month]","title":".get_kcal_multipliers"},{"location":"modules/src/food_system/unit_conversions/#get_fat_multipliers","text":"source .get_fat_multipliers()","title":".get_fat_multipliers"},{"location":"modules/src/food_system/unit_conversions/#get_protein_multipliers","text":"source .get_protein_multipliers()","title":".get_protein_multipliers"},{"location":"modules/src/food_system/unit_conversions/#get_unit_multipliers_from_billion_kcals_thou_tons_thou_tons","text":"source .get_unit_multipliers_from_billion_kcals_thou_tons_thou_tons( units ) First, check if the unit is a known conversion. Then, returns the conversion value to get from billion kcals, thousand tons fat, thousand tons protein, to whatever units are specified in \"units\" triplet argument. units[0] is kcals units, units[1] is fat units, units[2] is protein units.","title":".get_unit_multipliers_from_billion_kcals_thou_tons_thou_tons"},{"location":"modules/src/food_system/unit_conversions/#get_conversion","text":"source .get_conversion( from_units, to_units_kcals, to_units_fat, to_units_protein ) To get from any known unit to any other known unit, we first convert the given from_units to the equivalent billion kcals, thousand tons fat, thousand tons protein, by dividing the given value by the unit_multiplier dictionary value. We then convert back to the to_units by multiplying by the to_unit dictionary value.","title":".get_conversion"},{"location":"modules/src/food_system/unit_conversions/#in_units","text":"source .in_units( to_units_kcals, to_units_fat, to_units_protein )","title":".in_units"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/","text":"CropMacros source Methods: .import_nutrients_and_products source .import_nutrients_and_products() This function imports nutrition and production data from Excel and CSV files respectively. It returns two dataframes: products and nutrition. Args self (object) : instance of the class Returns tuple : a tuple containing two dataframes: products and nutrition .get_kcals_matching source .get_kcals_matching( match_strings, products ) Returns the sum of kcals, fat, and protein for the products that the passed in name as a substring of the product name string. Args match_strings (list) : A list of strings to match against the product names products (pandas.DataFrame) : A pandas DataFrame containing product information Returns float : The sum of kcals for the matching products .get_nutrients source .get_nutrients( products ) Returns the sum of kcals, fat, and protein for the products passed in. Args products (pandas.DataFrame) : A DataFrame containing food products and their values. Returns list : A list containing the sum of kcals, fat, and protein for the products passed in. .get_macros_csv source .get_macros_csv() This function generates a stack of macronutrients that correspond to each country. It loops through all the countries and their corresponding ISO3 codes, and for each country, it calculates the total kcals, fat, and protein produced by all crops in that country. It then adds this information to a numpy array and returns it. Returns ndarray : A numpy array containing the following columns: iso3: The ISO3 code of the country country: The name of the country crop_kcals: The total kcals produced by all crops in the country crop_fat: The total fat produced by all crops in the country crop_protein: The total protein produced by all crops in the country","title":"Create crop macros csv"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#_1","text":"","title":""},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#cropmacros","text":"source Methods:","title":"CropMacros"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#import_nutrients_and_products","text":"source .import_nutrients_and_products() This function imports nutrition and production data from Excel and CSV files respectively. It returns two dataframes: products and nutrition. Args self (object) : instance of the class Returns tuple : a tuple containing two dataframes: products and nutrition","title":".import_nutrients_and_products"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#get_kcals_matching","text":"source .get_kcals_matching( match_strings, products ) Returns the sum of kcals, fat, and protein for the products that the passed in name as a substring of the product name string. Args match_strings (list) : A list of strings to match against the product names products (pandas.DataFrame) : A pandas DataFrame containing product information Returns float : The sum of kcals for the matching products","title":".get_kcals_matching"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#get_nutrients","text":"source .get_nutrients( products ) Returns the sum of kcals, fat, and protein for the products passed in. Args products (pandas.DataFrame) : A DataFrame containing food products and their values. Returns list : A list containing the sum of kcals, fat, and protein for the products passed in.","title":".get_nutrients"},{"location":"modules/src/import_scripts_no_food_trade/create_crop_macros_csv/#get_macros_csv","text":"source .get_macros_csv() This function generates a stack of macronutrients that correspond to each country. It loops through all the countries and their corresponding ISO3 codes, and for each country, it calculates the total kcals, fat, and protein produced by all crops in that country. It then adds this information to a numpy array and returns it. Returns ndarray : A numpy array containing the following columns: iso3: The ISO3 code of the country country: The name of the country crop_kcals: The total kcals produced by all crops in the country crop_fat: The total fat produced by all crops in the country crop_protein: The total protein produced by all crops in the country","title":".get_macros_csv"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/","text":"get_crop_ratios_this_country source .get_crop_ratios_this_country( country_id, crop_macros ) This function calculates the kcal ratios production for wheat, rice, soy, and spring wheat for each country. We assume some similar crops will count towards these ratios, in order to get a better approximation of how the reduction will affect the country. Args country_id (str) : The country ID for which the crop ratios are to be calculated. crop_macros (CropMacros) : An instance of the CropMacros class. Returns dict : A dictionary containing the crop ratios for the given country. Raises AssertionError : If the sum of relevant kcals is not between 0 and kcals_check. get_overall_reduction source .get_overall_reduction( country_data, country_id, crop_macros ) This function determines the total reduction in production using the relative reduction in corn, rice, soy, and spring wheat. It also separately assigns the grass reduction appropriately. Args country_data (pandas.DataFrame) : A pandas dataframe containing the data for the country country_id (str) : The id of the country crop_macros (pandas.DataFrame) : A pandas dataframe containing the crop macros data Returns dict : A dictionary containing the average yearly reduction for crop production calculate_reductions source .calculate_reductions( country_data, country_id, crop_macros ) Calculate the crop reduction percentage for each year and aggregate as array. Args country_data (dict) : A dictionary containing data for a specific country. country_id (str) : A string representing the ID of the country. crop_macros (dict) : A dictionary containing crop macro data. Returns list : A list of crop and grass reduction percentages for each year. clean_up_nw_csv source .clean_up_nw_csv( nw_csv, nw_csv_cols ) This function takes in a nuclear winter csv file and its columns, cleans up the data, and returns a pandas dataframe. Args nw_csv (pandas.DataFrame) : The nuclear winter csv file to be cleaned up. nw_csv_cols (list) : The columns of the nuclear winter csv file. Returns DataFrame : The cleaned up nuclear winter csv file. get_all_crops_correct_countries source .get_all_crops_correct_countries( input_table ) This function takes in a table of crop data for different countries and returns the columns with all the reductions for every crop, with the countries properly aggregated (eu27+uk combined) and Taiwan reductions equal to China's (Rutgers dataset doesn't include Taiwan as a distinct entity) Args input_table (dict) : A dictionary containing crop data for different countries Returns tuple : A tuple containing two lists. The first list contains tuples of country IDs and names. The second list contains the reductions for all crops for each country. Raises ValueError : If there is missing data for a country","title":"Create nuclear winter csv"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#_1","text":"","title":""},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#get_crop_ratios_this_country","text":"source .get_crop_ratios_this_country( country_id, crop_macros ) This function calculates the kcal ratios production for wheat, rice, soy, and spring wheat for each country. We assume some similar crops will count towards these ratios, in order to get a better approximation of how the reduction will affect the country. Args country_id (str) : The country ID for which the crop ratios are to be calculated. crop_macros (CropMacros) : An instance of the CropMacros class. Returns dict : A dictionary containing the crop ratios for the given country. Raises AssertionError : If the sum of relevant kcals is not between 0 and kcals_check.","title":"get_crop_ratios_this_country"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#get_overall_reduction","text":"source .get_overall_reduction( country_data, country_id, crop_macros ) This function determines the total reduction in production using the relative reduction in corn, rice, soy, and spring wheat. It also separately assigns the grass reduction appropriately. Args country_data (pandas.DataFrame) : A pandas dataframe containing the data for the country country_id (str) : The id of the country crop_macros (pandas.DataFrame) : A pandas dataframe containing the crop macros data Returns dict : A dictionary containing the average yearly reduction for crop production","title":"get_overall_reduction"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#calculate_reductions","text":"source .calculate_reductions( country_data, country_id, crop_macros ) Calculate the crop reduction percentage for each year and aggregate as array. Args country_data (dict) : A dictionary containing data for a specific country. country_id (str) : A string representing the ID of the country. crop_macros (dict) : A dictionary containing crop macro data. Returns list : A list of crop and grass reduction percentages for each year.","title":"calculate_reductions"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#clean_up_nw_csv","text":"source .clean_up_nw_csv( nw_csv, nw_csv_cols ) This function takes in a nuclear winter csv file and its columns, cleans up the data, and returns a pandas dataframe. Args nw_csv (pandas.DataFrame) : The nuclear winter csv file to be cleaned up. nw_csv_cols (list) : The columns of the nuclear winter csv file. Returns DataFrame : The cleaned up nuclear winter csv file.","title":"clean_up_nw_csv"},{"location":"modules/src/import_scripts_no_food_trade/create_nuclear_winter_csv/#get_all_crops_correct_countries","text":"source .get_all_crops_correct_countries( input_table ) This function takes in a table of crop data for different countries and returns the columns with all the reductions for every crop, with the countries properly aggregated (eu27+uk combined) and Taiwan reductions equal to China's (Rutgers dataset doesn't include Taiwan as a distinct entity) Args input_table (dict) : A dictionary containing crop data for different countries Returns tuple : A tuple containing two lists. The first list contains tuples of country IDs and names. The second list contains the reductions for all crops for each country. Raises ValueError : If there is missing data for a country","title":"get_all_crops_correct_countries"},{"location":"modules/src/optimizer/extract_results/","text":"Extractor source Extractor( constants ) Methods: .extract_results source .extract_results( model, variables, time_consts ) Extracts the results from the model and stores them in the Extractor object. Args model (pysd.PySD) : the PySD model object variables (dict) : a dictionary of model variables time_consts (dict) : a dictionary of time constants Returns Extractor : the Extractor object with the extracted results stored in its attributes .to_monthly_list source .to_monthly_list( variables, conversion ) Converts a list of variables to a monthly list of values. Args variables (list) : A list of variables to be converted. conversion (float) : A conversion factor to be applied to each variable. Returns array : A numpy array of the converted monthly values. .to_monthly_list_outdoor_crops_kcals source .to_monthly_list_outdoor_crops_kcals( crops_food_eaten, crops_kcals_produced, conversion ) This function calculates the amount of outdoor crop production that is immediately eaten and the amount that is stored for later consumption. If more is eaten than produced, the difference is attributed to the eating of stored up crops. Args crops_food_eaten : list of the amount of crops eaten each month crops_kcals_produced : list of the amount of crop production (kcals) each month conversion : conversion factor from kcals to another unit of measurement Returns A list of two lists: The first list contains the amount of outdoor crop production (converted to the specified unit of measurement) that is immediately eaten each month. The second list contains the amount of outdoor crop production (converted to the specified unit of measurement) that is stored for later consumption each month. .get_greenhouse_results source .get_greenhouse_results( greenhouse_crops ) .create_food_object_from_fat_protein_variables source .create_food_object_from_fat_protein_variables( production_kcals, production_fat, production_protein ) This function creates a Food object from the given production_kcals, production_fat, and production_protein. Args production_kcals (float) : the amount of kcals produced production_fat (float) : the amount of fat produced production_protein (float) : the amount of protein produced Returns Food : a Food object with kcals, fat, and protein attributes .extract_generic_results source .extract_generic_results( production_kcals, ratio_kcals, ratio_fat, ratio_protein, constants ) Extracts generic results from production_kcals, ratio_kcals, ratio_fat, ratio_protein, and constants. Args production_kcals (float) : total production kcals ratio_kcals (float) : ratio of kcals to production kcals ratio_fat (float) : ratio of fat to production kcals ratio_protein (float) : ratio of protein to production kcals constants (dict) : dictionary of constants used in the calculations Returns Food : a Food object containing the extracted results .extract_outdoor_crops_results source .extract_outdoor_crops_results( crops_food_to_humans, crops_food_to_humans_fat, crops_food_to_humans_protein, crops_food_biofuel, crops_food_biofuel_fat, crops_food_biofuel_protein, crops_food_feed, crops_food_feed_fat, crops_food_feed_protein, outdoor_crops_production ) Extracts results for outdoor crops and assigns them to the corresponding food objects. Calculates outdoor crop production for humans and assigns the values to the corresponding food object. Validates if immediate and new stored sources add up correctly. Calculates and assigns new stored outdoor crops values. Calculates and assigns immediate outdoor crops values. Validates if the total outdoor growing production has not changed. Returns None .calculate_outdoor_crops_kcals source .calculate_outdoor_crops_kcals( crops_food_to_humans, to_humans_outdoor_crop_production ) .validate_sources_add_up source .validate_sources_add_up( billions_fed_immediate_outdoor_crops_kcals, billions_fed_new_stored_outdoor_crops_kcals ) Validates that the sum of immediate and new stored sources of outdoor crops for humans matches the input of outdoor crop for humans. Args billions_fed_immediate_outdoor_crops_kcals (list) : A list of billions of kcals fed from immediate outdoor crops to humans. billions_fed_new_stored_outdoor_crops_kcals (list) : A list of billions of kcals fed from new stored outdoor crops to humans. Returns None Example >>> extractor.outdoor_crops_to_humans.kcals = [1, 2, 3] >>> extractor.validate_sources_add_up([0.5, 1, 1.5], [0.5, 1, 1.5]) None Raises AssertionError : If the sum of immediate and new stored sources of outdoor crops for humans does not match the input of outdoor crop for humans. .set_new_stored_outdoor_crops_values source .set_new_stored_outdoor_crops_values( billions_fed_new_stored_outdoor_crops_kcals ) Sets the values of new_stored_outdoor_crops attribute of the Extractor class with the given billions_fed_new_stored_outdoor_crops_kcals. Args self (Extractor) : An instance of the Extractor class. billions_fed_new_stored_outdoor_crops_kcals (list) : A list of kcals in billions fed to new stored outdoor crops each month. Returns None .set_immediate_outdoor_crops_values source .set_immediate_outdoor_crops_values( billions_fed_immediate_outdoor_crops_kcals ) Sets the values of immediate outdoor crops in the Extractor object. Args self (Extractor) : The Extractor object. billions_fed_immediate_outdoor_crops_kcals (list) : A list of kcals fed to billions of people each month. Returns None .validate_outdoor_growing_production source .validate_outdoor_growing_production() Validates the outdoor growing production by checking if the difference between the outdoor crops to humans and the sum of immediate outdoor crops and new stored outdoor crops is equal to zero. Args self (Extractor) : An instance of the Extractor class. Returns None .extract_meat_milk_results source .extract_meat_milk_results( meat_eaten, milk_kcals, milk_fat, milk_protein ) Extracts the results of meat and milk production from various sources and calculates the amount of food produced in billions of people fed each month. Args meat_eaten (list) : List of the amount of culled meat eaten in kg per year milk_kcals (list) : List of the amount of grazing milk produced in kcal per year milk_fat (list) : List of the amount of grazing milk produced in fat per year milk_protein (list) : List of the amount of grazing milk produced in protein per year Returns None Example >>> extractor = Extractor() >>> extractor.extract_meat_milk_results( >>> meat_eaten=[1000, 2000, 3000], >>> milk_kcals=[1000, 2000, 3000], >>> milk_fat=[100, 200, 300], >>> milk_protein=[50, 100, 150], >>> ) .extract_to_humans_feed_and_biofuel source .extract_to_humans_feed_and_biofuel( to_humans, feed, biofuel, kcals_ratio, fat_ratio, protein_ratio, constants ) .get_objective_optimization_results source .get_objective_optimization_results( model ) This function extracts the optimization results for the objective function of the model. Args self : instance of the Extractor class model : the optimization model to extract results from Returns tuple : a tuple containing the optimization results for consumed_kcals, consumed_fat, and consumed_protein","title":"Extract results"},{"location":"modules/src/optimizer/extract_results/#_1","text":"","title":""},{"location":"modules/src/optimizer/extract_results/#extractor","text":"source Extractor( constants ) Methods:","title":"Extractor"},{"location":"modules/src/optimizer/extract_results/#extract_results","text":"source .extract_results( model, variables, time_consts ) Extracts the results from the model and stores them in the Extractor object. Args model (pysd.PySD) : the PySD model object variables (dict) : a dictionary of model variables time_consts (dict) : a dictionary of time constants Returns Extractor : the Extractor object with the extracted results stored in its attributes","title":".extract_results"},{"location":"modules/src/optimizer/extract_results/#to_monthly_list","text":"source .to_monthly_list( variables, conversion ) Converts a list of variables to a monthly list of values. Args variables (list) : A list of variables to be converted. conversion (float) : A conversion factor to be applied to each variable. Returns array : A numpy array of the converted monthly values.","title":".to_monthly_list"},{"location":"modules/src/optimizer/extract_results/#to_monthly_list_outdoor_crops_kcals","text":"source .to_monthly_list_outdoor_crops_kcals( crops_food_eaten, crops_kcals_produced, conversion ) This function calculates the amount of outdoor crop production that is immediately eaten and the amount that is stored for later consumption. If more is eaten than produced, the difference is attributed to the eating of stored up crops. Args crops_food_eaten : list of the amount of crops eaten each month crops_kcals_produced : list of the amount of crop production (kcals) each month conversion : conversion factor from kcals to another unit of measurement Returns A list of two lists: The first list contains the amount of outdoor crop production (converted to the specified unit of measurement) that is immediately eaten each month. The second list contains the amount of outdoor crop production (converted to the specified unit of measurement) that is stored for later consumption each month.","title":".to_monthly_list_outdoor_crops_kcals"},{"location":"modules/src/optimizer/extract_results/#get_greenhouse_results","text":"source .get_greenhouse_results( greenhouse_crops )","title":".get_greenhouse_results"},{"location":"modules/src/optimizer/extract_results/#create_food_object_from_fat_protein_variables","text":"source .create_food_object_from_fat_protein_variables( production_kcals, production_fat, production_protein ) This function creates a Food object from the given production_kcals, production_fat, and production_protein. Args production_kcals (float) : the amount of kcals produced production_fat (float) : the amount of fat produced production_protein (float) : the amount of protein produced Returns Food : a Food object with kcals, fat, and protein attributes","title":".create_food_object_from_fat_protein_variables"},{"location":"modules/src/optimizer/extract_results/#extract_generic_results","text":"source .extract_generic_results( production_kcals, ratio_kcals, ratio_fat, ratio_protein, constants ) Extracts generic results from production_kcals, ratio_kcals, ratio_fat, ratio_protein, and constants. Args production_kcals (float) : total production kcals ratio_kcals (float) : ratio of kcals to production kcals ratio_fat (float) : ratio of fat to production kcals ratio_protein (float) : ratio of protein to production kcals constants (dict) : dictionary of constants used in the calculations Returns Food : a Food object containing the extracted results","title":".extract_generic_results"},{"location":"modules/src/optimizer/extract_results/#extract_outdoor_crops_results","text":"source .extract_outdoor_crops_results( crops_food_to_humans, crops_food_to_humans_fat, crops_food_to_humans_protein, crops_food_biofuel, crops_food_biofuel_fat, crops_food_biofuel_protein, crops_food_feed, crops_food_feed_fat, crops_food_feed_protein, outdoor_crops_production ) Extracts results for outdoor crops and assigns them to the corresponding food objects. Calculates outdoor crop production for humans and assigns the values to the corresponding food object. Validates if immediate and new stored sources add up correctly. Calculates and assigns new stored outdoor crops values. Calculates and assigns immediate outdoor crops values. Validates if the total outdoor growing production has not changed. Returns None","title":".extract_outdoor_crops_results"},{"location":"modules/src/optimizer/extract_results/#calculate_outdoor_crops_kcals","text":"source .calculate_outdoor_crops_kcals( crops_food_to_humans, to_humans_outdoor_crop_production )","title":".calculate_outdoor_crops_kcals"},{"location":"modules/src/optimizer/extract_results/#validate_sources_add_up","text":"source .validate_sources_add_up( billions_fed_immediate_outdoor_crops_kcals, billions_fed_new_stored_outdoor_crops_kcals ) Validates that the sum of immediate and new stored sources of outdoor crops for humans matches the input of outdoor crop for humans. Args billions_fed_immediate_outdoor_crops_kcals (list) : A list of billions of kcals fed from immediate outdoor crops to humans. billions_fed_new_stored_outdoor_crops_kcals (list) : A list of billions of kcals fed from new stored outdoor crops to humans. Returns None Example >>> extractor.outdoor_crops_to_humans.kcals = [1, 2, 3] >>> extractor.validate_sources_add_up([0.5, 1, 1.5], [0.5, 1, 1.5]) None Raises AssertionError : If the sum of immediate and new stored sources of outdoor crops for humans does not match the input of outdoor crop for humans.","title":".validate_sources_add_up"},{"location":"modules/src/optimizer/extract_results/#set_new_stored_outdoor_crops_values","text":"source .set_new_stored_outdoor_crops_values( billions_fed_new_stored_outdoor_crops_kcals ) Sets the values of new_stored_outdoor_crops attribute of the Extractor class with the given billions_fed_new_stored_outdoor_crops_kcals. Args self (Extractor) : An instance of the Extractor class. billions_fed_new_stored_outdoor_crops_kcals (list) : A list of kcals in billions fed to new stored outdoor crops each month. Returns None","title":".set_new_stored_outdoor_crops_values"},{"location":"modules/src/optimizer/extract_results/#set_immediate_outdoor_crops_values","text":"source .set_immediate_outdoor_crops_values( billions_fed_immediate_outdoor_crops_kcals ) Sets the values of immediate outdoor crops in the Extractor object. Args self (Extractor) : The Extractor object. billions_fed_immediate_outdoor_crops_kcals (list) : A list of kcals fed to billions of people each month. Returns None","title":".set_immediate_outdoor_crops_values"},{"location":"modules/src/optimizer/extract_results/#validate_outdoor_growing_production","text":"source .validate_outdoor_growing_production() Validates the outdoor growing production by checking if the difference between the outdoor crops to humans and the sum of immediate outdoor crops and new stored outdoor crops is equal to zero. Args self (Extractor) : An instance of the Extractor class. Returns None","title":".validate_outdoor_growing_production"},{"location":"modules/src/optimizer/extract_results/#extract_meat_milk_results","text":"source .extract_meat_milk_results( meat_eaten, milk_kcals, milk_fat, milk_protein ) Extracts the results of meat and milk production from various sources and calculates the amount of food produced in billions of people fed each month. Args meat_eaten (list) : List of the amount of culled meat eaten in kg per year milk_kcals (list) : List of the amount of grazing milk produced in kcal per year milk_fat (list) : List of the amount of grazing milk produced in fat per year milk_protein (list) : List of the amount of grazing milk produced in protein per year Returns None Example >>> extractor = Extractor() >>> extractor.extract_meat_milk_results( >>> meat_eaten=[1000, 2000, 3000], >>> milk_kcals=[1000, 2000, 3000], >>> milk_fat=[100, 200, 300], >>> milk_protein=[50, 100, 150], >>> )","title":".extract_meat_milk_results"},{"location":"modules/src/optimizer/extract_results/#extract_to_humans_feed_and_biofuel","text":"source .extract_to_humans_feed_and_biofuel( to_humans, feed, biofuel, kcals_ratio, fat_ratio, protein_ratio, constants )","title":".extract_to_humans_feed_and_biofuel"},{"location":"modules/src/optimizer/extract_results/#get_objective_optimization_results","text":"source .get_objective_optimization_results( model ) This function extracts the optimization results for the objective function of the model. Args self : instance of the Extractor class model : the optimization model to extract results from Returns tuple : a tuple containing the optimization results for consumed_kcals, consumed_fat, and consumed_protein","title":".get_objective_optimization_results"},{"location":"modules/src/optimizer/interpret_results/","text":"Interpreter source This class is used to convert between optimization results data and other useful ways of interpreting the results, as a diet, or as a total food supply. Methods: .set_feed_and_biofuels source .set_feed_and_biofuels( feed_and_biofuels ) .set_meat_dictionary source .set_meat_dictionary( meat_dictionary ) .interpret_results source .interpret_results( extracted_results, title = 'Untitled' ) This function takes the raw output of the optimizer food categories and total people fed in list form, and converts the naive people fed which includes negative feed, into a purely list of values, where the negative feed has been subtracted from the sum of outdoor growing and stored food. Args extracted_results (object) : The raw output of the optimizer food categories and title (str) : Name/title of the run total people fed in list form Returns object : An instance of the Interpreter class ANYTHING assigned to \"self\" here is part of a useful result that will either be printed or plotted as a result .assign_percent_fed_from_extractor source .assign_percent_fed_from_extractor( extracted_results ) Assigns the percentage of food fed to humans from each food source extracted from the results. Args extracted_results (ExtractedResults) : An instance of the ExtractedResults class containing the results of the extraction process. Returns None .assign_kcals_equivalent_from_extractor source .assign_kcals_equivalent_from_extractor( extracted_results ) Assigns the kcals equivalent of various food sources to their respective attributes in the Interpreter object. Args extracted_results (ExtractedResults) : An object containing the results of the extraction process. Returns None .set_to_humans_properties_kcals_equivalent source .set_to_humans_properties_kcals_equivalent( extracted_results ) Converts the stored food and outdoor crops to humans properties to their equivalent in kcals. Args extracted_results (dict) : A dictionary containing the extracted results from the simulation. Returns None .assign_time_months_middle source .assign_time_months_middle( NMONTHS ) This function assigns the middle of each month to a list of time_months_middle. Args NMONTHS (int) : The number of months to assign the middle of. Returns None Example >>> interpreter.assign_time_months_middle(12) >>> print(interpreter.time_months_middle) [0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5] .assign_interpreted_properties source .assign_interpreted_properties( extracted_results ) Assigns interpreted properties to the Interpreter object based on the extracted results. Args extracted_results (ExtractedResults) : The extracted results object to interpret. Returns None Example >>> interpreter = Interpreter() >>> interpreter.assign_interpreted_properties(extracted_results) .get_mean_min_nutrient source .get_mean_min_nutrient() for finding the minimum of any nutrient in any month and then getting the mean people fed in all the months This is useful for assessing what would have happened if stored food were not a constraint on number of people fed returns: the mean people fed in all months .get_sum_by_adding_to_humans source .get_sum_by_adding_to_humans() Sums the resulting nutrients from the extracted_results and returns the total. Args self : instance of the Interpreter class Returns float : the total amount of nutrients that can be fed to humans Example >>> interpreter.stored_food = 100 >>> interpreter.outdoor_crops = 200 >>> interpreter.seaweed = 50 >>> interpreter.cell_sugar = 75 >>> interpreter.scp = 150 >>> interpreter.greenhouse = 300 >>> interpreter.fish = 100 >>> interpreter.meat = 50 >>> interpreter.milk = 25 >>> interpreter.get_sum_by_adding_to_humans() 1025.0 .print_kcals_per_person_per_day source .print_kcals_per_person_per_day( interpreted_results ) This function calculates and prints the expected kcals/capita/day for a given scenario result. Args interpreted_results (InterpretedResults) : An instance of the InterpretedResults class containing the interpreted results of a scenario. Returns None .get_percent_people_fed source .get_percent_people_fed( humans_fed_sum ) Calculates the estimated percentage of people fed based on the minimum nutrients required to meet the needs of the population in any month, for kcals, fat, and protein. Args humans_fed_sum (HumanFedSum) : An instance of the HumanFedSum class representing the total amount of nutrients available for the population. Returns list : A list containing the estimated percentage of people fed and the minimum nutrients required to meet their needs. .correct_and_validate_rounding_errors source .correct_and_validate_rounding_errors() This function corrects any rounding errors that might have occurred during the optimization process. It ensures that the values are rounded to the nearest 3 decimal places and that they are greater than or equal to zero. The function returns the corrected values for stored_food, outdoor_crops, immediate_outdoor_crops, new_stored_outdoor_crops, and seaweed. Args None Returns tuple : A tuple containing the corrected values for stored_food, outdoor_crops, immediate_outdoor_crops, new_stored_outdoor_crops, and seaweed. .get_month_after_which_is_all_zero source .get_month_after_which_is_all_zero( variables, nmonths ) .calculate_feed_and_biofuels source .calculate_feed_and_biofuels( seaweed_used_for_biofuel, methane_scp_used_for_biofuel, cellulosic_sugar_used_for_biofuel, stored_food_used_for_biofuel, outdoor_crops_used_for_biofuel, seaweed_used_for_feed, methane_scp_used_for_feed, cellulosic_sugar_used_for_feed, stored_food_used_for_feed, outdoor_crops_used_for_feed ) This function sets the feed and biofuel usage for each month. It takes the outdoor crops, methane, and cellulosic sugar that are used for feed and biofuels, and the remaining feed and biofuel needed from stored food. .sum_many_results_together source .sum_many_results_together( many_results, cap_at_100_percent ) sum together the results from many different runs of the model create a new object summing the results returns: the interpreter object with the summed results divided by the population in question","title":"Interpret results"},{"location":"modules/src/optimizer/interpret_results/#_1","text":"","title":""},{"location":"modules/src/optimizer/interpret_results/#interpreter","text":"source This class is used to convert between optimization results data and other useful ways of interpreting the results, as a diet, or as a total food supply. Methods:","title":"Interpreter"},{"location":"modules/src/optimizer/interpret_results/#set_feed_and_biofuels","text":"source .set_feed_and_biofuels( feed_and_biofuels )","title":".set_feed_and_biofuels"},{"location":"modules/src/optimizer/interpret_results/#set_meat_dictionary","text":"source .set_meat_dictionary( meat_dictionary )","title":".set_meat_dictionary"},{"location":"modules/src/optimizer/interpret_results/#interpret_results","text":"source .interpret_results( extracted_results, title = 'Untitled' ) This function takes the raw output of the optimizer food categories and total people fed in list form, and converts the naive people fed which includes negative feed, into a purely list of values, where the negative feed has been subtracted from the sum of outdoor growing and stored food. Args extracted_results (object) : The raw output of the optimizer food categories and title (str) : Name/title of the run total people fed in list form Returns object : An instance of the Interpreter class ANYTHING assigned to \"self\" here is part of a useful result that will either be printed or plotted as a result","title":".interpret_results"},{"location":"modules/src/optimizer/interpret_results/#assign_percent_fed_from_extractor","text":"source .assign_percent_fed_from_extractor( extracted_results ) Assigns the percentage of food fed to humans from each food source extracted from the results. Args extracted_results (ExtractedResults) : An instance of the ExtractedResults class containing the results of the extraction process. Returns None","title":".assign_percent_fed_from_extractor"},{"location":"modules/src/optimizer/interpret_results/#assign_kcals_equivalent_from_extractor","text":"source .assign_kcals_equivalent_from_extractor( extracted_results ) Assigns the kcals equivalent of various food sources to their respective attributes in the Interpreter object. Args extracted_results (ExtractedResults) : An object containing the results of the extraction process. Returns None","title":".assign_kcals_equivalent_from_extractor"},{"location":"modules/src/optimizer/interpret_results/#set_to_humans_properties_kcals_equivalent","text":"source .set_to_humans_properties_kcals_equivalent( extracted_results ) Converts the stored food and outdoor crops to humans properties to their equivalent in kcals. Args extracted_results (dict) : A dictionary containing the extracted results from the simulation. Returns None","title":".set_to_humans_properties_kcals_equivalent"},{"location":"modules/src/optimizer/interpret_results/#assign_time_months_middle","text":"source .assign_time_months_middle( NMONTHS ) This function assigns the middle of each month to a list of time_months_middle. Args NMONTHS (int) : The number of months to assign the middle of. Returns None Example >>> interpreter.assign_time_months_middle(12) >>> print(interpreter.time_months_middle) [0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5]","title":".assign_time_months_middle"},{"location":"modules/src/optimizer/interpret_results/#assign_interpreted_properties","text":"source .assign_interpreted_properties( extracted_results ) Assigns interpreted properties to the Interpreter object based on the extracted results. Args extracted_results (ExtractedResults) : The extracted results object to interpret. Returns None Example >>> interpreter = Interpreter() >>> interpreter.assign_interpreted_properties(extracted_results)","title":".assign_interpreted_properties"},{"location":"modules/src/optimizer/interpret_results/#get_mean_min_nutrient","text":"source .get_mean_min_nutrient() for finding the minimum of any nutrient in any month and then getting the mean people fed in all the months This is useful for assessing what would have happened if stored food were not a constraint on number of people fed returns: the mean people fed in all months","title":".get_mean_min_nutrient"},{"location":"modules/src/optimizer/interpret_results/#get_sum_by_adding_to_humans","text":"source .get_sum_by_adding_to_humans() Sums the resulting nutrients from the extracted_results and returns the total. Args self : instance of the Interpreter class Returns float : the total amount of nutrients that can be fed to humans Example >>> interpreter.stored_food = 100 >>> interpreter.outdoor_crops = 200 >>> interpreter.seaweed = 50 >>> interpreter.cell_sugar = 75 >>> interpreter.scp = 150 >>> interpreter.greenhouse = 300 >>> interpreter.fish = 100 >>> interpreter.meat = 50 >>> interpreter.milk = 25 >>> interpreter.get_sum_by_adding_to_humans() 1025.0","title":".get_sum_by_adding_to_humans"},{"location":"modules/src/optimizer/interpret_results/#print_kcals_per_person_per_day","text":"source .print_kcals_per_person_per_day( interpreted_results ) This function calculates and prints the expected kcals/capita/day for a given scenario result. Args interpreted_results (InterpretedResults) : An instance of the InterpretedResults class containing the interpreted results of a scenario. Returns None","title":".print_kcals_per_person_per_day"},{"location":"modules/src/optimizer/interpret_results/#get_percent_people_fed","text":"source .get_percent_people_fed( humans_fed_sum ) Calculates the estimated percentage of people fed based on the minimum nutrients required to meet the needs of the population in any month, for kcals, fat, and protein. Args humans_fed_sum (HumanFedSum) : An instance of the HumanFedSum class representing the total amount of nutrients available for the population. Returns list : A list containing the estimated percentage of people fed and the minimum nutrients required to meet their needs.","title":".get_percent_people_fed"},{"location":"modules/src/optimizer/interpret_results/#correct_and_validate_rounding_errors","text":"source .correct_and_validate_rounding_errors() This function corrects any rounding errors that might have occurred during the optimization process. It ensures that the values are rounded to the nearest 3 decimal places and that they are greater than or equal to zero. The function returns the corrected values for stored_food, outdoor_crops, immediate_outdoor_crops, new_stored_outdoor_crops, and seaweed. Args None Returns tuple : A tuple containing the corrected values for stored_food, outdoor_crops, immediate_outdoor_crops, new_stored_outdoor_crops, and seaweed.","title":".correct_and_validate_rounding_errors"},{"location":"modules/src/optimizer/interpret_results/#get_month_after_which_is_all_zero","text":"source .get_month_after_which_is_all_zero( variables, nmonths )","title":".get_month_after_which_is_all_zero"},{"location":"modules/src/optimizer/interpret_results/#calculate_feed_and_biofuels","text":"source .calculate_feed_and_biofuels( seaweed_used_for_biofuel, methane_scp_used_for_biofuel, cellulosic_sugar_used_for_biofuel, stored_food_used_for_biofuel, outdoor_crops_used_for_biofuel, seaweed_used_for_feed, methane_scp_used_for_feed, cellulosic_sugar_used_for_feed, stored_food_used_for_feed, outdoor_crops_used_for_feed ) This function sets the feed and biofuel usage for each month. It takes the outdoor crops, methane, and cellulosic sugar that are used for feed and biofuels, and the remaining feed and biofuel needed from stored food.","title":".calculate_feed_and_biofuels"},{"location":"modules/src/optimizer/interpret_results/#sum_many_results_together","text":"source .sum_many_results_together( many_results, cap_at_100_percent ) sum together the results from many different runs of the model create a new object summing the results returns: the interpreter object with the summed results divided by the population in question","title":".sum_many_results_together"},{"location":"modules/src/optimizer/optimizer/","text":"Optimizer source Optimizer( consts_for_optimizer, time_consts ) Methods: .optimize_to_humans source .optimize_to_humans( consts_for_optimizer, time_consts ) This function optimizes the model to maximize the amount of food produced for humans. Args consts_for_optimizer (dict) : A dictionary containing single-valued constants time_consts (dict) : A dictionary containing time-related constants Returns tuple : A tuple containing the following: model (LpProblem): The model to optimize variables (dict): A dictionary containing the variables in the model maximize_constraints (list): A list of constraints to maximize .optimize_feed_to_animals source .optimize_feed_to_animals( consts_for_optimizer, time_consts, min_human_food_consumption ) This function optimizes the model to maximize the amount of food produced for feed and biofuel. Args consts_for_optimizer (dict) : A dictionary containing single-valued constants time_consts (dict) : A dictionary containing time-related constants min_human_food_consumption (dict) : A dictionary of foods mandated to be fed to humans in the optimization in order of preference Returns tuple : A tuple containing the following: model (LpProblem): The model to optimize variables (dict): A dictionary containing the variables in the model maximize_constraints (list): A list of constraints to maximize .assign_predetermined_human_consumption_of_foods source .assign_predetermined_human_consumption_of_foods( model, month, variables, min_human_food_consumption, food_type ) .add_variables_and_constraints_to_model source .add_variables_and_constraints_to_model( model, variables, consts_for_optimizer, optimization_type ) This function is utilized for adding variables and constraints to a given optimization model. It operates on resource constants and single valued constants. Parameters: model : A PULP linear programming model object. This model should be already defined but may be in need of decision variables, objective function, and constraints. variables : A dictionary object storing decision variables of the model. resource_constants : A dictionary object, where each item includes information about a resource, including the prefixes and function for variable and constraint generation. consts_for_optimizer : A dictionary object consisting of constant parameters used throughout the optimization process. Behavior: The function operates in two major steps: First, it loops through each resource in resource_constants . If the corresponding key in consts_for_optimizer is set to True, it generates and adds new variables based on the resource prefixes. It then generates and adds constraints to the model for each month in the time horizon (from 0 to NMONTHS), using the function provided with each resource. After adding all resource-based variables and constraints, the function adds objectives to the model for each month in the time horizon. These objectives are added to the maximize_constraints list, which is only used for validation. The function concludes by adding the objective function (stored under the \"objective_function\" key in the variables dictionary) to the model. Returns: This function returns three outputs: model : The updated PULP model after adding the variables, constraints, and the objective function. variables : The updated dictionary of variables after the function has added new variables. maximize_constraints : A list of the objective functions added to the model, used for validation purposes. .add_resource_specific_conditions_to_model source .add_resource_specific_conditions_to_model( model, variables, month, optimization_type, func, food_name ) .run_optimizations_on_constraints source .run_optimizations_on_constraints( model, variables, consts_for_optimizer, optimization_type ) This function is part of a resource allocation system aiming to model systems which 1. minimizes human starvation 2. maximizes feed going to animals, and secondarily biofuel, assuming minimal nutrition for humans are met 3. reduces unnecessary fluctuations in the predicted food consumption. This function specifically takes the series of constraints which either involve a maximization of the minimum to_human food, OR a maximization of the number of months where to_animals feed demand is fully met, starting at the first month of the simulation. The function executes a series of optimization steps. After solving the initial model, it performs several more rounds of optimization, each with added constraints based on the results of the previous round. Here's a brief overview of the operations it performs: It first solves the initial model and asserts that the optimization was successful. It then constrains the next optimization to have the same minimum starvation as the previous optimization. If the first optimization was successful, it optimizes the best food consumption that goes to humans. After that, it constrains the next optimization to have the same total resilient foods in feed as the previous optimization. If the first optimization was successful and if food storage between years is allowed, it further optimizes to reduce fluctuations in food distribution. Args self : The optimizer object. model : A PULP linear programming model object. This model should be already defined and configured. variables : A dictionary containing the variables used in the optimization. consts_for_optimizer : A dictionary of constant parameters that are used throughout the optimization process. .constrain_next_optimization_to_have_same_total_resilient_foods_in_feed source .constrain_next_optimization_to_have_same_total_resilient_foods_in_feed( model_max_to_humans, variables ) Constrains the next optimization to have the same total resilient foods in feed as the previous optimization. Args model_max_to_humans (tuple) : A tuple containing the model and the maximizer string. variables (dict) : A dictionary containing the variables used in the optimization. Returns tuple : A tuple containing the updated model and variables. .add_conditions_to_model source .add_conditions_to_model( model, month, conditions ) Adds conditions to a given model for a given month. Args model (Pulp ) : The model to which the conditions will be added. month (str) : The month for which the conditions will be added. conditions (dict) : A dictionary containing the conditions to be added to the model. Returns LpProblem : The updated model with the added conditions. Example 'x > 0', 'condition2': 'y < 10'} >>> updated_model = add_conditions_to_model(model, '1', conditions) .load_variable_names_and_prefixes source .load_variable_names_and_prefixes() This function initializes a dictionary of variable names and prefixes, and returns it. Args self : instance of the Optimizer class Returns variables (dict) : a dictionary containing variable names and prefixes .optimize_best_food_consumption_to_go_to_humans source .optimize_best_food_consumption_to_go_to_humans( model, variables, ASSERT_SUCCESSFUL_OPTIMIZATION, consts_for_optimizer ) This function optimizes the amount of food to be allocated to humans while ensuring that the minimum demands for feed and biofuel are met. Args self : instance of the Optimizer class model : the model to be optimized variables : dictionary of variables used in the model ASSERT_SUCCESSFUL_OPTIMIZATION : assertion to check if optimization was successful consts_for_optimizer : dictionary of constants used in the model Returns tuple : a tuple containing the optimized model and the updated variables dictionary .reduce_fluctuations_with_a_final_optimization source .reduce_fluctuations_with_a_final_optimization( model, variables, ASSERT_SUCCESSFUL_OPTIMIZATION, consts_for_optimizer, optimization_type ) Optimize the smoothing objective function to reduce fluctuations in the model. Args model (pulp.LpProblem) : The model to optimize. variables (dict) : A dictionary of variables used in the model. ASSERT_SUCCESSFUL_OPTIMIZATION (bool) : A flag to assert if optimization was successful. consts_for_optimizer (dict) : A dictionary of constants used in the model. Returns tuple : A tuple containing the optimized model and the updated variables dictionary. .constrain_next_optimization_to_have_same_minimum_starvation source .constrain_next_optimization_to_have_same_minimum_starvation( model, variables ) This function constrains the next optimization to have the same minimum starvation as the previous optimization. It does this by setting the minimum value to the previous optimization value and ensuring that consumed_kcals meets this value each month. Args self (Optimizer) : The Optimizer object. model (pulp.LpProblem) : The optimization model. variables (dict) : A dictionary of variables used in the optimization. Returns tuple : A tuple containing the updated optimization model and variables. Example model, variables = constrain_next_optimization_to_have_same_minimum_starvation( ... self, model, variables ... ) .constrain_next_optimization_to_have_same_feed_biofuel source .constrain_next_optimization_to_have_same_feed_biofuel( model, variables ) This function constrains the next optimization to have the same minimum starvation as the previous optimization. It does this by setting the minimum value to the previous optimization value and ensuring that consumed_kcals meets this value each month. Args self (Optimizer) : The Optimizer object. model (pulp.LpProblem) : The optimization model. variables (dict) : A dictionary of variables used in the optimization. Returns tuple : A tuple containing the updated optimization model and variables. Example model, variables = constrain_next_optimization_to_have_same_minimum_starvation( ... self, model, variables ... ) .create_lp_variables source .create_lp_variables( prefix, month ) Create a pulp variable with a given prefix and month. Args prefix (str) : A string prefix for the variable name. month (int) : An integer representing the month for the variable name. Returns LpVariable : A pulp variable with a given name and lower bound of 0. .add_constraints source .add_constraints( model, month, condition, prefix ) Adds a constraint to the given model based on the given condition, month, and prefix. Args model (Model) : The model to which the constraint will be added. month (str) : The month to which the constraint applies. condition (str) : The condition that the constraint enforces. prefix (str) : The prefix to use in the constraint name. Returns Model : The updated model with the added constraint. .add_variable_from_prefixes source .add_variable_from_prefixes( variables, prefixes ) Adds variables to the LP problem for each prefix and month. Args variables (dict) : A dictionary containing the LP variables for each prefix and month. prefixes (list) : A list of prefixes for which variables need to be added. Returns dict : A dictionary containing the updated LP variables for each prefix and month. .add_percentage_intake_constraints source .add_percentage_intake_constraints( model, variables, month, optimization_type ) Adds constraints to the optimization model based on the percentage intake of the nonhuman and human diets. Args model (object) : The optimization model object variables (dict) : A dictionary of variables used in the optimization model month (int) : The month for which the constraints are being added Returns object : The optimization model object with added constraints .get_feed_sum source .get_feed_sum( variables, month ) .get_biofuel_sum source .get_biofuel_sum( variables, month ) .add_feed_biofuel_to_model source .add_feed_biofuel_to_model( model, variables, month, optimization_type ) Adds feed and biofuel variables to the model for a given month. Args model (LpProblem) : The LpProblem model to add the variables to. variables (dict) : A dictionary containing the variables to add to the model. month (int) : The month for which to add the variables. Returns LpProblem : The Pulp model with the added variables. Example [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], >>> variables = { ... } >>> optimizer = Optimizer() >>> optimizer.add_feed_biofuel_to_model(model, variables, 0) .add_total_human_consumption_to_model source .add_total_human_consumption_to_model( model, variables, month, optimization_type ) Adds conditions that are not specific to a specific food (not defined in a function for that food) to the optimization model. Args model (pulp.LpProblem) : The optimization model to which objectives are added. variables (dict) : A dictionary of variables used in the optimization model. month (int) : The month for which objectives are added. maximize_constraints (list) : A list of constraints to be maximized. Returns list : A list containing the updated model, variables, and maximize_constraints. .add_maximize_min_month_objective_to_model source .add_maximize_min_month_objective_to_model( model, variables, month, maximize_constraints ) .get_nonhuman_consumption_sum source .get_nonhuman_consumption_sum( nmonths, variables ) .add_maximize_sum_total_feed_used_by_animals source .add_maximize_sum_total_feed_used_by_animals( model, variables, nmonths ) .add_seaweed_to_model source .add_seaweed_to_model( month, variables ) Adds seaweed to the model by setting conditions for the seaweed wet on farm, used area, and other variables. Args month (int) : the current month of the simulation variables (dict) : a dictionary containing the current values of the variables in the simulation Returns dict : a dictionary containing the conditions for the seaweed wet on farm, used area, and other variables .add_stored_food_to_model_only_first_year source .add_stored_food_to_model_only_first_year( month, variables ) Adds stored food to the model for the first year only. Args month (int) : the current month of the simulation variables (dict) : a dictionary containing the variables of the simulation Returns dict : a dictionary containing the conditions for the simulation .add_stored_food_to_model source .add_stored_food_to_model( month, variables ) .add_meat_to_model source .add_meat_to_model( month, variables ) This function adds meat to the model based on the month and variables passed in. It just makes sure the sum total meat consumed never exceeds the sum total allowed consumption. The maximum per month constraint is responsible for making sure meat eaten each month does not exceed the amount in that month and the months prior. Args month (int) : The month for which the meat is being added variables (dict) : A dictionary containing variables related to meat Returns dict : A dictionary containing conditions related to meat .add_meat_to_model_no_storage source .add_meat_to_model_no_storage( month, variables ) This function adds meat to the model based on the month and variables passed in. It simply sets the meat eaten to the amount of meat slaughtered -- no storage at all. Args month (int) : The month for which the meat is being added variables (dict) : A dictionary containing variables related to meat Returns dict : A dictionary containing conditions related to meat .add_outdoor_crops_to_model_no_storage source .add_outdoor_crops_to_model_no_storage( month, variables ) Adds a condition to the model that checks if the crops food storage is zero for a given month. Args month (int) : The month to check the crops food storage for. variables (dict) : A dictionary containing the variables used in the model. Returns dict : A dictionary containing the condition to be added to the model. Example [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]} True} add_outdoor_crops_to_model_no_storage(3, variables) .handle_first_month source .handle_first_month( variables, month ) This function handles the first month of the simulation. It checks if the crops food storage is equal to the outdoor crops production minus the crops food eaten. If this condition is met, it returns a dictionary with the condition as a key and True as a value. Args self (Optimizer) : the instance of the Optimizer class variables (dict) : a dictionary containing the variables used in the simulation month (int) : the current month of the simulation Returns dict : a dictionary containing the condition as a key and True as a value if the condition is met .handle_last_month source .handle_last_month( variables, month, use_relocated_crops, initial_harvest_duration ) .handle_other_months source .handle_other_months( variables, month, use_relocated_crops ) This function handles months that are not January or July. It calculates the conditions for the month based on the variables passed in and returns them. Args variables (dict) : A dictionary containing variables for the simulation month (int) : The current month of the simulation use_relocated_crops (bool) : A boolean indicating whether or not to use relocated crops Returns dict : A dictionary containing the conditions for the month Example [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120] True} >>> month = 2 >>> use_relocated_crops = False >>> optimizer = Optimizer() >>> optimizer.handle_other_months(variables, month, use_relocated_crops) .add_crops_food_consumed_with_nutrient_name source .add_crops_food_consumed_with_nutrient_name( variables, month, nutrient, lowercase_nutrient ) .create_linear_constraints_for_fat_and_protein_crops_food source .create_linear_constraints_for_fat_and_protein_crops_food( month, variables, fat_multiplier, protein_multiplier ) This function creates linear constraints for fat and protein crops food. Args month (int) : The month for which the constraints are being created variables (dict) : A dictionary containing variables used in the constraints fat_multiplier (float) : The multiplier for fat protein_multiplier (float) : The multiplier for protein Returns dict : A dictionary containing the created constraints .get_outdoor_crops_month_constants source .get_outdoor_crops_month_constants( use_relocated_crops, month ) Calculates the constants for outdoor crops based on the month and whether or not relocated crops are being used. Returns a tuple of the initial harvest duration, fat multiplier, and protein multiplier. Args use_relocated_crops (bool) : Whether or not relocated crops are being used. month (int) : The current month. Returns tuple : A tuple containing the initial harvest duration, fat multiplier, and protein multiplier. Example get_outdoor_crops_month_constants(True, 5) (7, 0.4, 0.3) .add_outdoor_crops_to_model source .add_outdoor_crops_to_model( month, variables ) .add_methane_scp_to_model source .add_methane_scp_to_model( month, variables ) Adds the methane SCP (Substrate Coefficient of Production) constraint to the model for a given month. The constraint ensures that the total amount of methane SCP from all sources is less than or equal to the maximum amount of methane SCP allowed for that month. Args month (int) : The month for which the constraint is being added. variables (dict) : A dictionary containing the variables used in the constraint. Returns dict : A dictionary containing the methane SCP constraint. Example [10, 20, 30], [5, 10, 15], [2, 4, 6] True} >>> optimizer = Optimizer() >>> constraint = optimizer.add_methane_scp_to_model(1, variables) >>> print(constraint) .add_cellulosic_sugar_to_model source .add_cellulosic_sugar_to_model( month, variables ) Adds the amount of cellulosic sugar available in a given month to the model and checks if it is within the limit of available kcals for that month. Args month (int) : The month for which the cellulosic sugar is being added to the model. variables (dict) : A dictionary containing the variables for the model. Returns dict : A dictionary containing the conditions for the model. Example [100, 200, 300], [50, 100, 150], [25, 50, 75] True} >>> optimizer = Optimizer() >>> optimizer.add_cellulosic_sugar_to_model(1, variables)","title":"Optimizer"},{"location":"modules/src/optimizer/optimizer/#_1","text":"","title":""},{"location":"modules/src/optimizer/optimizer/#optimizer","text":"source Optimizer( consts_for_optimizer, time_consts ) Methods:","title":"Optimizer"},{"location":"modules/src/optimizer/optimizer/#optimize_to_humans","text":"source .optimize_to_humans( consts_for_optimizer, time_consts ) This function optimizes the model to maximize the amount of food produced for humans. Args consts_for_optimizer (dict) : A dictionary containing single-valued constants time_consts (dict) : A dictionary containing time-related constants Returns tuple : A tuple containing the following: model (LpProblem): The model to optimize variables (dict): A dictionary containing the variables in the model maximize_constraints (list): A list of constraints to maximize","title":".optimize_to_humans"},{"location":"modules/src/optimizer/optimizer/#optimize_feed_to_animals","text":"source .optimize_feed_to_animals( consts_for_optimizer, time_consts, min_human_food_consumption ) This function optimizes the model to maximize the amount of food produced for feed and biofuel. Args consts_for_optimizer (dict) : A dictionary containing single-valued constants time_consts (dict) : A dictionary containing time-related constants min_human_food_consumption (dict) : A dictionary of foods mandated to be fed to humans in the optimization in order of preference Returns tuple : A tuple containing the following: model (LpProblem): The model to optimize variables (dict): A dictionary containing the variables in the model maximize_constraints (list): A list of constraints to maximize","title":".optimize_feed_to_animals"},{"location":"modules/src/optimizer/optimizer/#assign_predetermined_human_consumption_of_foods","text":"source .assign_predetermined_human_consumption_of_foods( model, month, variables, min_human_food_consumption, food_type )","title":".assign_predetermined_human_consumption_of_foods"},{"location":"modules/src/optimizer/optimizer/#add_variables_and_constraints_to_model","text":"source .add_variables_and_constraints_to_model( model, variables, consts_for_optimizer, optimization_type ) This function is utilized for adding variables and constraints to a given optimization model. It operates on resource constants and single valued constants.","title":".add_variables_and_constraints_to_model"},{"location":"modules/src/optimizer/optimizer/#parameters","text":"model : A PULP linear programming model object. This model should be already defined but may be in need of decision variables, objective function, and constraints. variables : A dictionary object storing decision variables of the model. resource_constants : A dictionary object, where each item includes information about a resource, including the prefixes and function for variable and constraint generation. consts_for_optimizer : A dictionary object consisting of constant parameters used throughout the optimization process.","title":"Parameters:"},{"location":"modules/src/optimizer/optimizer/#behavior","text":"The function operates in two major steps: First, it loops through each resource in resource_constants . If the corresponding key in consts_for_optimizer is set to True, it generates and adds new variables based on the resource prefixes. It then generates and adds constraints to the model for each month in the time horizon (from 0 to NMONTHS), using the function provided with each resource. After adding all resource-based variables and constraints, the function adds objectives to the model for each month in the time horizon. These objectives are added to the maximize_constraints list, which is only used for validation. The function concludes by adding the objective function (stored under the \"objective_function\" key in the variables dictionary) to the model.","title":"Behavior:"},{"location":"modules/src/optimizer/optimizer/#returns","text":"This function returns three outputs: model : The updated PULP model after adding the variables, constraints, and the objective function. variables : The updated dictionary of variables after the function has added new variables. maximize_constraints : A list of the objective functions added to the model, used for validation purposes.","title":"Returns:"},{"location":"modules/src/optimizer/optimizer/#add_resource_specific_conditions_to_model","text":"source .add_resource_specific_conditions_to_model( model, variables, month, optimization_type, func, food_name )","title":".add_resource_specific_conditions_to_model"},{"location":"modules/src/optimizer/optimizer/#run_optimizations_on_constraints","text":"source .run_optimizations_on_constraints( model, variables, consts_for_optimizer, optimization_type ) This function is part of a resource allocation system aiming to model systems which 1. minimizes human starvation 2. maximizes feed going to animals, and secondarily biofuel, assuming minimal nutrition for humans are met 3. reduces unnecessary fluctuations in the predicted food consumption. This function specifically takes the series of constraints which either involve a maximization of the minimum to_human food, OR a maximization of the number of months where to_animals feed demand is fully met, starting at the first month of the simulation. The function executes a series of optimization steps. After solving the initial model, it performs several more rounds of optimization, each with added constraints based on the results of the previous round. Here's a brief overview of the operations it performs: It first solves the initial model and asserts that the optimization was successful. It then constrains the next optimization to have the same minimum starvation as the previous optimization. If the first optimization was successful, it optimizes the best food consumption that goes to humans. After that, it constrains the next optimization to have the same total resilient foods in feed as the previous optimization. If the first optimization was successful and if food storage between years is allowed, it further optimizes to reduce fluctuations in food distribution. Args self : The optimizer object. model : A PULP linear programming model object. This model should be already defined and configured. variables : A dictionary containing the variables used in the optimization. consts_for_optimizer : A dictionary of constant parameters that are used throughout the optimization process.","title":".run_optimizations_on_constraints"},{"location":"modules/src/optimizer/optimizer/#constrain_next_optimization_to_have_same_total_resilient_foods_in_feed","text":"source .constrain_next_optimization_to_have_same_total_resilient_foods_in_feed( model_max_to_humans, variables ) Constrains the next optimization to have the same total resilient foods in feed as the previous optimization. Args model_max_to_humans (tuple) : A tuple containing the model and the maximizer string. variables (dict) : A dictionary containing the variables used in the optimization. Returns tuple : A tuple containing the updated model and variables.","title":".constrain_next_optimization_to_have_same_total_resilient_foods_in_feed"},{"location":"modules/src/optimizer/optimizer/#add_conditions_to_model","text":"source .add_conditions_to_model( model, month, conditions ) Adds conditions to a given model for a given month. Args model (Pulp ) : The model to which the conditions will be added. month (str) : The month for which the conditions will be added. conditions (dict) : A dictionary containing the conditions to be added to the model. Returns LpProblem : The updated model with the added conditions. Example 'x > 0', 'condition2': 'y < 10'} >>> updated_model = add_conditions_to_model(model, '1', conditions)","title":".add_conditions_to_model"},{"location":"modules/src/optimizer/optimizer/#load_variable_names_and_prefixes","text":"source .load_variable_names_and_prefixes() This function initializes a dictionary of variable names and prefixes, and returns it. Args self : instance of the Optimizer class Returns variables (dict) : a dictionary containing variable names and prefixes","title":".load_variable_names_and_prefixes"},{"location":"modules/src/optimizer/optimizer/#optimize_best_food_consumption_to_go_to_humans","text":"source .optimize_best_food_consumption_to_go_to_humans( model, variables, ASSERT_SUCCESSFUL_OPTIMIZATION, consts_for_optimizer ) This function optimizes the amount of food to be allocated to humans while ensuring that the minimum demands for feed and biofuel are met. Args self : instance of the Optimizer class model : the model to be optimized variables : dictionary of variables used in the model ASSERT_SUCCESSFUL_OPTIMIZATION : assertion to check if optimization was successful consts_for_optimizer : dictionary of constants used in the model Returns tuple : a tuple containing the optimized model and the updated variables dictionary","title":".optimize_best_food_consumption_to_go_to_humans"},{"location":"modules/src/optimizer/optimizer/#reduce_fluctuations_with_a_final_optimization","text":"source .reduce_fluctuations_with_a_final_optimization( model, variables, ASSERT_SUCCESSFUL_OPTIMIZATION, consts_for_optimizer, optimization_type ) Optimize the smoothing objective function to reduce fluctuations in the model. Args model (pulp.LpProblem) : The model to optimize. variables (dict) : A dictionary of variables used in the model. ASSERT_SUCCESSFUL_OPTIMIZATION (bool) : A flag to assert if optimization was successful. consts_for_optimizer (dict) : A dictionary of constants used in the model. Returns tuple : A tuple containing the optimized model and the updated variables dictionary.","title":".reduce_fluctuations_with_a_final_optimization"},{"location":"modules/src/optimizer/optimizer/#constrain_next_optimization_to_have_same_minimum_starvation","text":"source .constrain_next_optimization_to_have_same_minimum_starvation( model, variables ) This function constrains the next optimization to have the same minimum starvation as the previous optimization. It does this by setting the minimum value to the previous optimization value and ensuring that consumed_kcals meets this value each month. Args self (Optimizer) : The Optimizer object. model (pulp.LpProblem) : The optimization model. variables (dict) : A dictionary of variables used in the optimization. Returns tuple : A tuple containing the updated optimization model and variables. Example model, variables = constrain_next_optimization_to_have_same_minimum_starvation( ... self, model, variables ... )","title":".constrain_next_optimization_to_have_same_minimum_starvation"},{"location":"modules/src/optimizer/optimizer/#constrain_next_optimization_to_have_same_feed_biofuel","text":"source .constrain_next_optimization_to_have_same_feed_biofuel( model, variables ) This function constrains the next optimization to have the same minimum starvation as the previous optimization. It does this by setting the minimum value to the previous optimization value and ensuring that consumed_kcals meets this value each month. Args self (Optimizer) : The Optimizer object. model (pulp.LpProblem) : The optimization model. variables (dict) : A dictionary of variables used in the optimization. Returns tuple : A tuple containing the updated optimization model and variables. Example model, variables = constrain_next_optimization_to_have_same_minimum_starvation( ... self, model, variables ... )","title":".constrain_next_optimization_to_have_same_feed_biofuel"},{"location":"modules/src/optimizer/optimizer/#create_lp_variables","text":"source .create_lp_variables( prefix, month ) Create a pulp variable with a given prefix and month. Args prefix (str) : A string prefix for the variable name. month (int) : An integer representing the month for the variable name. Returns LpVariable : A pulp variable with a given name and lower bound of 0.","title":".create_lp_variables"},{"location":"modules/src/optimizer/optimizer/#add_constraints","text":"source .add_constraints( model, month, condition, prefix ) Adds a constraint to the given model based on the given condition, month, and prefix. Args model (Model) : The model to which the constraint will be added. month (str) : The month to which the constraint applies. condition (str) : The condition that the constraint enforces. prefix (str) : The prefix to use in the constraint name. Returns Model : The updated model with the added constraint.","title":".add_constraints"},{"location":"modules/src/optimizer/optimizer/#add_variable_from_prefixes","text":"source .add_variable_from_prefixes( variables, prefixes ) Adds variables to the LP problem for each prefix and month. Args variables (dict) : A dictionary containing the LP variables for each prefix and month. prefixes (list) : A list of prefixes for which variables need to be added. Returns dict : A dictionary containing the updated LP variables for each prefix and month.","title":".add_variable_from_prefixes"},{"location":"modules/src/optimizer/optimizer/#add_percentage_intake_constraints","text":"source .add_percentage_intake_constraints( model, variables, month, optimization_type ) Adds constraints to the optimization model based on the percentage intake of the nonhuman and human diets. Args model (object) : The optimization model object variables (dict) : A dictionary of variables used in the optimization model month (int) : The month for which the constraints are being added Returns object : The optimization model object with added constraints","title":".add_percentage_intake_constraints"},{"location":"modules/src/optimizer/optimizer/#get_feed_sum","text":"source .get_feed_sum( variables, month )","title":".get_feed_sum"},{"location":"modules/src/optimizer/optimizer/#get_biofuel_sum","text":"source .get_biofuel_sum( variables, month )","title":".get_biofuel_sum"},{"location":"modules/src/optimizer/optimizer/#add_feed_biofuel_to_model","text":"source .add_feed_biofuel_to_model( model, variables, month, optimization_type ) Adds feed and biofuel variables to the model for a given month. Args model (LpProblem) : The LpProblem model to add the variables to. variables (dict) : A dictionary containing the variables to add to the model. month (int) : The month for which to add the variables. Returns LpProblem : The Pulp model with the added variables. Example [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], >>> variables = { ... } >>> optimizer = Optimizer() >>> optimizer.add_feed_biofuel_to_model(model, variables, 0)","title":".add_feed_biofuel_to_model"},{"location":"modules/src/optimizer/optimizer/#add_total_human_consumption_to_model","text":"source .add_total_human_consumption_to_model( model, variables, month, optimization_type ) Adds conditions that are not specific to a specific food (not defined in a function for that food) to the optimization model. Args model (pulp.LpProblem) : The optimization model to which objectives are added. variables (dict) : A dictionary of variables used in the optimization model. month (int) : The month for which objectives are added. maximize_constraints (list) : A list of constraints to be maximized. Returns list : A list containing the updated model, variables, and maximize_constraints.","title":".add_total_human_consumption_to_model"},{"location":"modules/src/optimizer/optimizer/#add_maximize_min_month_objective_to_model","text":"source .add_maximize_min_month_objective_to_model( model, variables, month, maximize_constraints )","title":".add_maximize_min_month_objective_to_model"},{"location":"modules/src/optimizer/optimizer/#get_nonhuman_consumption_sum","text":"source .get_nonhuman_consumption_sum( nmonths, variables )","title":".get_nonhuman_consumption_sum"},{"location":"modules/src/optimizer/optimizer/#add_maximize_sum_total_feed_used_by_animals","text":"source .add_maximize_sum_total_feed_used_by_animals( model, variables, nmonths )","title":".add_maximize_sum_total_feed_used_by_animals"},{"location":"modules/src/optimizer/optimizer/#add_seaweed_to_model","text":"source .add_seaweed_to_model( month, variables ) Adds seaweed to the model by setting conditions for the seaweed wet on farm, used area, and other variables. Args month (int) : the current month of the simulation variables (dict) : a dictionary containing the current values of the variables in the simulation Returns dict : a dictionary containing the conditions for the seaweed wet on farm, used area, and other variables","title":".add_seaweed_to_model"},{"location":"modules/src/optimizer/optimizer/#add_stored_food_to_model_only_first_year","text":"source .add_stored_food_to_model_only_first_year( month, variables ) Adds stored food to the model for the first year only. Args month (int) : the current month of the simulation variables (dict) : a dictionary containing the variables of the simulation Returns dict : a dictionary containing the conditions for the simulation","title":".add_stored_food_to_model_only_first_year"},{"location":"modules/src/optimizer/optimizer/#add_stored_food_to_model","text":"source .add_stored_food_to_model( month, variables )","title":".add_stored_food_to_model"},{"location":"modules/src/optimizer/optimizer/#add_meat_to_model","text":"source .add_meat_to_model( month, variables ) This function adds meat to the model based on the month and variables passed in. It just makes sure the sum total meat consumed never exceeds the sum total allowed consumption. The maximum per month constraint is responsible for making sure meat eaten each month does not exceed the amount in that month and the months prior. Args month (int) : The month for which the meat is being added variables (dict) : A dictionary containing variables related to meat Returns dict : A dictionary containing conditions related to meat","title":".add_meat_to_model"},{"location":"modules/src/optimizer/optimizer/#add_meat_to_model_no_storage","text":"source .add_meat_to_model_no_storage( month, variables ) This function adds meat to the model based on the month and variables passed in. It simply sets the meat eaten to the amount of meat slaughtered -- no storage at all. Args month (int) : The month for which the meat is being added variables (dict) : A dictionary containing variables related to meat Returns dict : A dictionary containing conditions related to meat","title":".add_meat_to_model_no_storage"},{"location":"modules/src/optimizer/optimizer/#add_outdoor_crops_to_model_no_storage","text":"source .add_outdoor_crops_to_model_no_storage( month, variables ) Adds a condition to the model that checks if the crops food storage is zero for a given month. Args month (int) : The month to check the crops food storage for. variables (dict) : A dictionary containing the variables used in the model. Returns dict : A dictionary containing the condition to be added to the model. Example [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]} True} add_outdoor_crops_to_model_no_storage(3, variables)","title":".add_outdoor_crops_to_model_no_storage"},{"location":"modules/src/optimizer/optimizer/#handle_first_month","text":"source .handle_first_month( variables, month ) This function handles the first month of the simulation. It checks if the crops food storage is equal to the outdoor crops production minus the crops food eaten. If this condition is met, it returns a dictionary with the condition as a key and True as a value. Args self (Optimizer) : the instance of the Optimizer class variables (dict) : a dictionary containing the variables used in the simulation month (int) : the current month of the simulation Returns dict : a dictionary containing the condition as a key and True as a value if the condition is met","title":".handle_first_month"},{"location":"modules/src/optimizer/optimizer/#handle_last_month","text":"source .handle_last_month( variables, month, use_relocated_crops, initial_harvest_duration )","title":".handle_last_month"},{"location":"modules/src/optimizer/optimizer/#handle_other_months","text":"source .handle_other_months( variables, month, use_relocated_crops ) This function handles months that are not January or July. It calculates the conditions for the month based on the variables passed in and returns them. Args variables (dict) : A dictionary containing variables for the simulation month (int) : The current month of the simulation use_relocated_crops (bool) : A boolean indicating whether or not to use relocated crops Returns dict : A dictionary containing the conditions for the month Example [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120] True} >>> month = 2 >>> use_relocated_crops = False >>> optimizer = Optimizer() >>> optimizer.handle_other_months(variables, month, use_relocated_crops)","title":".handle_other_months"},{"location":"modules/src/optimizer/optimizer/#add_crops_food_consumed_with_nutrient_name","text":"source .add_crops_food_consumed_with_nutrient_name( variables, month, nutrient, lowercase_nutrient )","title":".add_crops_food_consumed_with_nutrient_name"},{"location":"modules/src/optimizer/optimizer/#create_linear_constraints_for_fat_and_protein_crops_food","text":"source .create_linear_constraints_for_fat_and_protein_crops_food( month, variables, fat_multiplier, protein_multiplier ) This function creates linear constraints for fat and protein crops food. Args month (int) : The month for which the constraints are being created variables (dict) : A dictionary containing variables used in the constraints fat_multiplier (float) : The multiplier for fat protein_multiplier (float) : The multiplier for protein Returns dict : A dictionary containing the created constraints","title":".create_linear_constraints_for_fat_and_protein_crops_food"},{"location":"modules/src/optimizer/optimizer/#get_outdoor_crops_month_constants","text":"source .get_outdoor_crops_month_constants( use_relocated_crops, month ) Calculates the constants for outdoor crops based on the month and whether or not relocated crops are being used. Returns a tuple of the initial harvest duration, fat multiplier, and protein multiplier. Args use_relocated_crops (bool) : Whether or not relocated crops are being used. month (int) : The current month. Returns tuple : A tuple containing the initial harvest duration, fat multiplier, and protein multiplier. Example get_outdoor_crops_month_constants(True, 5) (7, 0.4, 0.3)","title":".get_outdoor_crops_month_constants"},{"location":"modules/src/optimizer/optimizer/#add_outdoor_crops_to_model","text":"source .add_outdoor_crops_to_model( month, variables )","title":".add_outdoor_crops_to_model"},{"location":"modules/src/optimizer/optimizer/#add_methane_scp_to_model","text":"source .add_methane_scp_to_model( month, variables ) Adds the methane SCP (Substrate Coefficient of Production) constraint to the model for a given month. The constraint ensures that the total amount of methane SCP from all sources is less than or equal to the maximum amount of methane SCP allowed for that month. Args month (int) : The month for which the constraint is being added. variables (dict) : A dictionary containing the variables used in the constraint. Returns dict : A dictionary containing the methane SCP constraint. Example [10, 20, 30], [5, 10, 15], [2, 4, 6] True} >>> optimizer = Optimizer() >>> constraint = optimizer.add_methane_scp_to_model(1, variables) >>> print(constraint)","title":".add_methane_scp_to_model"},{"location":"modules/src/optimizer/optimizer/#add_cellulosic_sugar_to_model","text":"source .add_cellulosic_sugar_to_model( month, variables ) Adds the amount of cellulosic sugar available in a given month to the model and checks if it is within the limit of available kcals for that month. Args month (int) : The month for which the cellulosic sugar is being added to the model. variables (dict) : A dictionary containing the variables for the model. Returns dict : A dictionary containing the conditions for the model. Example [100, 200, 300], [50, 100, 150], [25, 50, 75] True} >>> optimizer = Optimizer() >>> optimizer.add_cellulosic_sugar_to_model(1, variables)","title":".add_cellulosic_sugar_to_model"},{"location":"modules/src/optimizer/parameters/","text":"Parameters source Methods: .compute_parameters_first_round source .compute_parameters_first_round( constants_inputs, time_consts_inputs, scenarios_loader ) Computes the parameters for the model based on the inputs and scenarios provided. This is relevant for the first round of optimization, with no feed assumed. Args constants_inputs (dict) : A dictionary containing the constant inputs for the model. scenarios_loader (ScenariosLoader) : An instance of the ScenariosLoader class containing the scenario inputs. Returns tuple : A tuple containing the computed constants, time constants, and feed and biofuels. Raises AssertionError : If maintained meat needs to be added for continued feed usage or if the function is not run for the first time. .get_second_round_kcals_with_redistributed_meat source .get_second_round_kcals_with_redistributed_meat( round_1_meat_kcals, round_2_meat_kcals, milk_kcals_round1, milk_kcals_round2 ) Gets a new array of kcals where the sum of kcals from meat remains the same, but the places where the meat was originally larger than round 1 is reduced, and the places where the meat was less than round 1 is increased. .fill_negatives_with_positives source .fill_negatives_with_positives( arr ) .init_meat_and_dairy_and_feed_from_breeding_and_subtract_feed_biofuels_round1 source .init_meat_and_dairy_and_feed_from_breeding_and_subtract_feed_biofuels_round1( constants_out, constants_inputs, time_consts ) .assert_constants_not_nan source .assert_constants_not_nan( consts_for_optimizer, time_consts ) This function checks that there are no NaN values in the constants, as the linear optimizer will fail in a mysterious way if there are. It does this by iterating through the consts_for_optimizer and time_consts dictionaries and checking each value for NaN. Args consts_for_optimizer (dict) : A dictionary of single-valued constants time_consts (dict) : A dictionary of time constants Returns None .assert_dictionary_value_not_nan source .assert_dictionary_value_not_nan( key, value ) Asserts if a dictionary value is not NaN. If it is NaN, raises an AssertionError and prints the key. Args key (str) : The key of the dictionary value being checked. value (Any) : The value of the dictionary being checked. Returns None Raises AssertionError : If the value is NaN. .init_scenario source .init_scenario( constants_out, constants_inputs ) Initializes the scenario for some constants_out used for the optimizer. Args constants_out (dict) : A dictionary containing constants used for the optimizer. constants_inputs (dict) : A dictionary containing input constants. Returns dict : A dictionary containing constants used for the optimizer. .set_nutrition_per_month source .set_nutrition_per_month( constants_out, constants_inputs ) Set the nutrition per month for the simulation. This function sets the nutrition per month for the simulation based on the input constants. It assumes a 2100 kcals diet, and scales the \"upper safe\" nutrition from the spreadsheet down to this \"standard\" level. It also adds 20% loss, according to the sorts of loss seen in this spreadsheet. Args self : instance of the class constants_out (dict) : dictionary containing the output constants constants_inputs (dict) : dictionary containing the input constants Returns dict : dictionary containing the updated output constants .set_seaweed_params source .set_seaweed_params( constants_out, constants_inputs ) This function sets the seaweed parameters by calling the Seaweed class methods and assigning the resulting values to the constants_out dictionary. It also calculates the built_area and growth_rates using the Seaweed class methods and returns them along with the constants_out dictionary and the Seaweed object. Args constants_out (dict) : dictionary containing the output constants constants_inputs (dict) : dictionary containing the input constants Returns tuple : a tuple containing the constants_out dictionary, built_area, growth_rates, and the Seaweed object .init_outdoor_crops source .init_outdoor_crops( constants_out, constants_inputs ) Initializes the outdoor crops parameters by calculating the rotation ratios and monthly production Args constants_out (dict) : A dictionary containing the output constants constants_inputs (dict) : A dictionary containing the input constants Returns tuple : A tuple containing the updated constants_out and the outdoor_crops object This function initializes the outdoor crops parameters by calculating the rotation ratios and monthly production. It takes in two dictionaries, constants_out and constants_inputs, which contain the output and input constants respectively. The function returns a tuple containing the updated constants_out and the outdoor_crops object. .init_stored_food source .init_stored_food( constants_out, constants_inputs, outdoor_crops ) Initializes the stored food object and calculates the amount of stored food to use based on the simulation starting month number. If ADD_STORED_FOOD is False, the initial available stored food is set to zero. Args self : the object instance constants_out (dict) : dictionary containing output constants constants_inputs (dict) : dictionary containing input constants outdoor_crops (list) : list of outdoor crop objects Returns tuple : a tuple containing the updated constants_out dictionary and the stored_food object .init_fish_params source .init_fish_params( time_consts, constants_inputs, time_consts_inputs ) Initializes seafood parameters, not including seaweed. Args constants_out (dict) : A dictionary containing constants for output. time_consts (dict) : A dictionary containing monthly constants. constants_inputs (dict) : A dictionary containing constants inputted to parameters. Returns time_consts (dict) : updated time_consts .init_greenhouse_params source .init_greenhouse_params( time_consts, constants_inputs, outdoor_crops ) Initializes the greenhouse parameters and calculates the greenhouse yield per hectare. Args time_consts (dict) : dictionary containing time constants constants_inputs (dict) : dictionary containing constant inputs outdoor_crops (OutdoorCrops) : instance of the OutdoorCrops class Returns dict : dictionary containing updated time constants .init_cs_params source .init_cs_params( constants_out, time_consts, constants_inputs ) Initializes the parameters for the cellulosic sugar model. Args time_consts (dict) : A dictionary containing time constants. constants_inputs (dict) : A dictionary containing inputs for the constants. Returns tuple : A tuple containing the updated time constants dictionary and the calculated cellulosic sugar object. This function initializes the parameters for the cellulosic sugar model by creating a CellulosicSugar object and calculating the monthly cellulosic sugar production using the inputs provided in the constants_inputs dictionary. The resulting object is then added to the time_consts dictionary. .init_scp_params source .init_scp_params( constants_out, time_consts, constants_inputs ) Initializes the parameters for single cell protein. Args time_consts (dict) : A dictionary containing time constants. constants_inputs (dict) : A dictionary containing constant inputs. Returns tuple : A tuple containing the updated time constants dictionary and the methane_scp object. .init_meat_and_dairy_and_feed_from_breeding source .init_meat_and_dairy_and_feed_from_breeding( constants_inputs, feed_meat_object, feed_and_biofuels_class, meat_and_dairy, constants_out, time_consts ) .get_animal_meat_dictionary source .get_animal_meat_dictionary( constants_inputs, feed_meat_object, meat_and_dairy ) .calculate_meat_from_feed_results source .calculate_meat_from_feed_results( constants_inputs, constants_out, time_consts, meat_and_dairy, feed_meat_object ) Calculates the amount of culled meat from feed results and updates the constants_out and time_consts dictionaries. Args constants_inputs (dict) : dictionary containing input constants constants_out (dict) : dictionary containing constants to be updated time_consts (dict) : dictionary containing time constants to be updated meat_and_dairy (MeatAndDairy) : instance of MeatAndDairy class feed_dairy_meat_results (dict) : dictionary containing feed, dairy, and meat results Returns tuple : tuple containing updated constants_out and time_consts dictionaries .calculate_non_meat_and_dairy_from_feed_results source .calculate_non_meat_and_dairy_from_feed_results( constants_inputs, constants_out, time_consts, dairy_pop, meat_and_dairy ) Calculates the non-culled meat and dairy from feed results. Args self : instance of the Parameters class constants_inputs (dict) : dictionary of input constants constants_out (dict) : dictionary of output constants time_consts (dict) : dictionary of time constants dairy_pop (float) : number of dairy cows meat_and_dairy (MeatAndDairy) : instance of the MeatAndDairy class Returns tuple : tuple containing constants_out and time_consts .compute_parameters_second_round source .compute_parameters_second_round( constants_inputs, constants_out_round1, time_consts_round1, interpreted_results_round1 ) Compute the parameters for the second round of optimizations, where we now know the amount of feed available for animals after humans have used all they need for their minimum nutritional needs. .calculate_human_consumption_for_min_needs source .calculate_human_consumption_for_min_needs( constants_inputs, interpreted_results_round1, extra_meat_round2 ) We run through each month and determine the amount consumed each month of all foods. However, any human consumption which exceeds the starvation percentage is ignored. To determine when to start ignoring human consumption, we loop through the different foods in the following order of priority for humans to consume: First fish, then meat, then dairy, then greenhouse crops, then outdoor crops, then stored food, then scp, then cs, then seaweed. NOTE: We only use variables set here in the optimizer that are NOT greenhouses or dairy or fish, because greenhouses and dairy and fish are not actually added as variables in the model (they are added as monthly constants to sum of human consumption) and they cannot be optimized. Furthermore, these foods always go to humans anyway. We only add these variables for the purposes of validation in the case that they sum up to human caloric minimum needs. .assert_consumption_within_limits source .assert_consumption_within_limits( human_food_consumption, kcals_daily_maximum ) Asserts that each Food object in the human_food_consumption dictionary is less than or equal to kcals_daily_maximum for all months. .increase_biofuels_then_feed source .increase_biofuels_then_feed( biofuel, feed, increase, max_biofuel, max_feed, total_crops_available ) .compute_parameters_third_round source .compute_parameters_third_round( constants_inputs, constants_out_round1, constants_out_round2, time_consts_round1, time_consts_round2, interpreted_results_round1, interpreted_results_round2, feed_and_biofuels_class, feed_demand, biofuels_demand, feed_meat_object_round1 )","title":"Parameters"},{"location":"modules/src/optimizer/parameters/#_1","text":"","title":""},{"location":"modules/src/optimizer/parameters/#parameters","text":"source Methods:","title":"Parameters"},{"location":"modules/src/optimizer/parameters/#compute_parameters_first_round","text":"source .compute_parameters_first_round( constants_inputs, time_consts_inputs, scenarios_loader ) Computes the parameters for the model based on the inputs and scenarios provided. This is relevant for the first round of optimization, with no feed assumed. Args constants_inputs (dict) : A dictionary containing the constant inputs for the model. scenarios_loader (ScenariosLoader) : An instance of the ScenariosLoader class containing the scenario inputs. Returns tuple : A tuple containing the computed constants, time constants, and feed and biofuels. Raises AssertionError : If maintained meat needs to be added for continued feed usage or if the function is not run for the first time.","title":".compute_parameters_first_round"},{"location":"modules/src/optimizer/parameters/#get_second_round_kcals_with_redistributed_meat","text":"source .get_second_round_kcals_with_redistributed_meat( round_1_meat_kcals, round_2_meat_kcals, milk_kcals_round1, milk_kcals_round2 ) Gets a new array of kcals where the sum of kcals from meat remains the same, but the places where the meat was originally larger than round 1 is reduced, and the places where the meat was less than round 1 is increased.","title":".get_second_round_kcals_with_redistributed_meat"},{"location":"modules/src/optimizer/parameters/#fill_negatives_with_positives","text":"source .fill_negatives_with_positives( arr )","title":".fill_negatives_with_positives"},{"location":"modules/src/optimizer/parameters/#init_meat_and_dairy_and_feed_from_breeding_and_subtract_feed_biofuels_round1","text":"source .init_meat_and_dairy_and_feed_from_breeding_and_subtract_feed_biofuels_round1( constants_out, constants_inputs, time_consts )","title":".init_meat_and_dairy_and_feed_from_breeding_and_subtract_feed_biofuels_round1"},{"location":"modules/src/optimizer/parameters/#assert_constants_not_nan","text":"source .assert_constants_not_nan( consts_for_optimizer, time_consts ) This function checks that there are no NaN values in the constants, as the linear optimizer will fail in a mysterious way if there are. It does this by iterating through the consts_for_optimizer and time_consts dictionaries and checking each value for NaN. Args consts_for_optimizer (dict) : A dictionary of single-valued constants time_consts (dict) : A dictionary of time constants Returns None","title":".assert_constants_not_nan"},{"location":"modules/src/optimizer/parameters/#assert_dictionary_value_not_nan","text":"source .assert_dictionary_value_not_nan( key, value ) Asserts if a dictionary value is not NaN. If it is NaN, raises an AssertionError and prints the key. Args key (str) : The key of the dictionary value being checked. value (Any) : The value of the dictionary being checked. Returns None Raises AssertionError : If the value is NaN.","title":".assert_dictionary_value_not_nan"},{"location":"modules/src/optimizer/parameters/#init_scenario","text":"source .init_scenario( constants_out, constants_inputs ) Initializes the scenario for some constants_out used for the optimizer. Args constants_out (dict) : A dictionary containing constants used for the optimizer. constants_inputs (dict) : A dictionary containing input constants. Returns dict : A dictionary containing constants used for the optimizer.","title":".init_scenario"},{"location":"modules/src/optimizer/parameters/#set_nutrition_per_month","text":"source .set_nutrition_per_month( constants_out, constants_inputs ) Set the nutrition per month for the simulation. This function sets the nutrition per month for the simulation based on the input constants. It assumes a 2100 kcals diet, and scales the \"upper safe\" nutrition from the spreadsheet down to this \"standard\" level. It also adds 20% loss, according to the sorts of loss seen in this spreadsheet. Args self : instance of the class constants_out (dict) : dictionary containing the output constants constants_inputs (dict) : dictionary containing the input constants Returns dict : dictionary containing the updated output constants","title":".set_nutrition_per_month"},{"location":"modules/src/optimizer/parameters/#set_seaweed_params","text":"source .set_seaweed_params( constants_out, constants_inputs ) This function sets the seaweed parameters by calling the Seaweed class methods and assigning the resulting values to the constants_out dictionary. It also calculates the built_area and growth_rates using the Seaweed class methods and returns them along with the constants_out dictionary and the Seaweed object. Args constants_out (dict) : dictionary containing the output constants constants_inputs (dict) : dictionary containing the input constants Returns tuple : a tuple containing the constants_out dictionary, built_area, growth_rates, and the Seaweed object","title":".set_seaweed_params"},{"location":"modules/src/optimizer/parameters/#init_outdoor_crops","text":"source .init_outdoor_crops( constants_out, constants_inputs ) Initializes the outdoor crops parameters by calculating the rotation ratios and monthly production Args constants_out (dict) : A dictionary containing the output constants constants_inputs (dict) : A dictionary containing the input constants Returns tuple : A tuple containing the updated constants_out and the outdoor_crops object This function initializes the outdoor crops parameters by calculating the rotation ratios and monthly production. It takes in two dictionaries, constants_out and constants_inputs, which contain the output and input constants respectively. The function returns a tuple containing the updated constants_out and the outdoor_crops object.","title":".init_outdoor_crops"},{"location":"modules/src/optimizer/parameters/#init_stored_food","text":"source .init_stored_food( constants_out, constants_inputs, outdoor_crops ) Initializes the stored food object and calculates the amount of stored food to use based on the simulation starting month number. If ADD_STORED_FOOD is False, the initial available stored food is set to zero. Args self : the object instance constants_out (dict) : dictionary containing output constants constants_inputs (dict) : dictionary containing input constants outdoor_crops (list) : list of outdoor crop objects Returns tuple : a tuple containing the updated constants_out dictionary and the stored_food object","title":".init_stored_food"},{"location":"modules/src/optimizer/parameters/#init_fish_params","text":"source .init_fish_params( time_consts, constants_inputs, time_consts_inputs ) Initializes seafood parameters, not including seaweed. Args constants_out (dict) : A dictionary containing constants for output. time_consts (dict) : A dictionary containing monthly constants. constants_inputs (dict) : A dictionary containing constants inputted to parameters. Returns time_consts (dict) : updated time_consts","title":".init_fish_params"},{"location":"modules/src/optimizer/parameters/#init_greenhouse_params","text":"source .init_greenhouse_params( time_consts, constants_inputs, outdoor_crops ) Initializes the greenhouse parameters and calculates the greenhouse yield per hectare. Args time_consts (dict) : dictionary containing time constants constants_inputs (dict) : dictionary containing constant inputs outdoor_crops (OutdoorCrops) : instance of the OutdoorCrops class Returns dict : dictionary containing updated time constants","title":".init_greenhouse_params"},{"location":"modules/src/optimizer/parameters/#init_cs_params","text":"source .init_cs_params( constants_out, time_consts, constants_inputs ) Initializes the parameters for the cellulosic sugar model. Args time_consts (dict) : A dictionary containing time constants. constants_inputs (dict) : A dictionary containing inputs for the constants. Returns tuple : A tuple containing the updated time constants dictionary and the calculated cellulosic sugar object. This function initializes the parameters for the cellulosic sugar model by creating a CellulosicSugar object and calculating the monthly cellulosic sugar production using the inputs provided in the constants_inputs dictionary. The resulting object is then added to the time_consts dictionary.","title":".init_cs_params"},{"location":"modules/src/optimizer/parameters/#init_scp_params","text":"source .init_scp_params( constants_out, time_consts, constants_inputs ) Initializes the parameters for single cell protein. Args time_consts (dict) : A dictionary containing time constants. constants_inputs (dict) : A dictionary containing constant inputs. Returns tuple : A tuple containing the updated time constants dictionary and the methane_scp object.","title":".init_scp_params"},{"location":"modules/src/optimizer/parameters/#init_meat_and_dairy_and_feed_from_breeding","text":"source .init_meat_and_dairy_and_feed_from_breeding( constants_inputs, feed_meat_object, feed_and_biofuels_class, meat_and_dairy, constants_out, time_consts )","title":".init_meat_and_dairy_and_feed_from_breeding"},{"location":"modules/src/optimizer/parameters/#get_animal_meat_dictionary","text":"source .get_animal_meat_dictionary( constants_inputs, feed_meat_object, meat_and_dairy )","title":".get_animal_meat_dictionary"},{"location":"modules/src/optimizer/parameters/#calculate_meat_from_feed_results","text":"source .calculate_meat_from_feed_results( constants_inputs, constants_out, time_consts, meat_and_dairy, feed_meat_object ) Calculates the amount of culled meat from feed results and updates the constants_out and time_consts dictionaries. Args constants_inputs (dict) : dictionary containing input constants constants_out (dict) : dictionary containing constants to be updated time_consts (dict) : dictionary containing time constants to be updated meat_and_dairy (MeatAndDairy) : instance of MeatAndDairy class feed_dairy_meat_results (dict) : dictionary containing feed, dairy, and meat results Returns tuple : tuple containing updated constants_out and time_consts dictionaries","title":".calculate_meat_from_feed_results"},{"location":"modules/src/optimizer/parameters/#calculate_non_meat_and_dairy_from_feed_results","text":"source .calculate_non_meat_and_dairy_from_feed_results( constants_inputs, constants_out, time_consts, dairy_pop, meat_and_dairy ) Calculates the non-culled meat and dairy from feed results. Args self : instance of the Parameters class constants_inputs (dict) : dictionary of input constants constants_out (dict) : dictionary of output constants time_consts (dict) : dictionary of time constants dairy_pop (float) : number of dairy cows meat_and_dairy (MeatAndDairy) : instance of the MeatAndDairy class Returns tuple : tuple containing constants_out and time_consts","title":".calculate_non_meat_and_dairy_from_feed_results"},{"location":"modules/src/optimizer/parameters/#compute_parameters_second_round","text":"source .compute_parameters_second_round( constants_inputs, constants_out_round1, time_consts_round1, interpreted_results_round1 ) Compute the parameters for the second round of optimizations, where we now know the amount of feed available for animals after humans have used all they need for their minimum nutritional needs.","title":".compute_parameters_second_round"},{"location":"modules/src/optimizer/parameters/#calculate_human_consumption_for_min_needs","text":"source .calculate_human_consumption_for_min_needs( constants_inputs, interpreted_results_round1, extra_meat_round2 ) We run through each month and determine the amount consumed each month of all foods. However, any human consumption which exceeds the starvation percentage is ignored. To determine when to start ignoring human consumption, we loop through the different foods in the following order of priority for humans to consume: First fish, then meat, then dairy, then greenhouse crops, then outdoor crops, then stored food, then scp, then cs, then seaweed. NOTE: We only use variables set here in the optimizer that are NOT greenhouses or dairy or fish, because greenhouses and dairy and fish are not actually added as variables in the model (they are added as monthly constants to sum of human consumption) and they cannot be optimized. Furthermore, these foods always go to humans anyway. We only add these variables for the purposes of validation in the case that they sum up to human caloric minimum needs.","title":".calculate_human_consumption_for_min_needs"},{"location":"modules/src/optimizer/parameters/#assert_consumption_within_limits","text":"source .assert_consumption_within_limits( human_food_consumption, kcals_daily_maximum ) Asserts that each Food object in the human_food_consumption dictionary is less than or equal to kcals_daily_maximum for all months.","title":".assert_consumption_within_limits"},{"location":"modules/src/optimizer/parameters/#increase_biofuels_then_feed","text":"source .increase_biofuels_then_feed( biofuel, feed, increase, max_biofuel, max_feed, total_crops_available )","title":".increase_biofuels_then_feed"},{"location":"modules/src/optimizer/parameters/#compute_parameters_third_round","text":"source .compute_parameters_third_round( constants_inputs, constants_out_round1, constants_out_round2, time_consts_round1, time_consts_round2, interpreted_results_round1, interpreted_results_round2, feed_and_biofuels_class, feed_demand, biofuels_demand, feed_meat_object_round1 )","title":".compute_parameters_third_round"},{"location":"modules/src/optimizer/validate_results/","text":"Validator source Validator() Methods: .validate_results source .validate_results( extracted_results, interpreted_results, time_consts, percent_fed_from_model, optimization_type, country_code ) Validates the results of the model by ensuring that the optimizer returns the same as the sum of nutrients, that zero kcals have zero fat and protein, that there are no NaN values, and that all values are greater than or equal to zero. Args model (Model) : The model to validate the results of. extracted_results (ExtractedResults) : The extracted results from the model. interpreted_results (InterpretedResults) : The interpreted results from the model. Returns None .ensure_all_time_constants_units_are_billion_kcals source .ensure_all_time_constants_units_are_billion_kcals( time_consts ) .check_constraints_satisfied source .check_constraints_satisfied( model, maximize_constraints, variables ) This function checks if all constraints are satisfied by the final values of the variables. It takes a really long time to run, so it's run infrequently. Args model (pulp.LpProblem) : The optimization model maximize_constraints (list) : A list of constraints to maximize variables (list) : A list of variables to check constraints against Returns None Raises AssertionError : If a constraint is not satisfied .ensure_optimizer_returns_same_as_sum_nutrients source .ensure_optimizer_returns_same_as_sum_nutrients( percent_fed_from_model, interpreted_results, INCLUDE_FAT, INCLUDE_PROTEIN, country_code ) ensure there was no major error in the optimizer or in analysis which caused the sums reported to differ between adding up all the extracted variables and just look at the reported result of the objective of the optimizer .ensure_zero_kcals_have_zero_fat_and_protein source .ensure_zero_kcals_have_zero_fat_and_protein( interpreted_results ) Checks that for any month where kcals is zero for any of the foods, then fat and protein must also be zero. Args interpreted_results (InterpretedResults) : An instance of the InterpretedResults class Returns None Notes: This function is called to ensure that the kcals, fat and protein values are consistent for each food source, feed and biofuels independently. Raises AssertionError : If the kcals value is zero but the fat or protein value is non-zero. .ensure_never_nan source .ensure_never_nan( interpreted_results ) This function checks that the interpreter results are always defined as a real number. It does this by calling the make_sure_not_nan() method on each of the interpreted_results attributes. If any of the attributes contain NaN values, an exception will be raised. Args interpreted_results (InterpretedResults) : An instance of the InterpretedResults class. Raises ValueError : If any of the interpreted_results attributes contain NaN values. Returns None .ensure_all_greater_than_or_equal_to_zero source .ensure_all_greater_than_or_equal_to_zero( interpreted_results ) Checks that all the results variables are greater than or equal to zero. Args interpreted_results (InterpretedResults) : An instance of the InterpretedResults class Raises AssertionError : If any of the results variables are less than zero .assert_feed_and_biofuel_used_is_zero_if_humans_are_starving source .assert_feed_and_biofuel_used_is_zero_if_humans_are_starving( interpreted_results, epsilon = 0.001 )","title":"Validate results"},{"location":"modules/src/optimizer/validate_results/#_1","text":"","title":""},{"location":"modules/src/optimizer/validate_results/#validator","text":"source Validator() Methods:","title":"Validator"},{"location":"modules/src/optimizer/validate_results/#validate_results","text":"source .validate_results( extracted_results, interpreted_results, time_consts, percent_fed_from_model, optimization_type, country_code ) Validates the results of the model by ensuring that the optimizer returns the same as the sum of nutrients, that zero kcals have zero fat and protein, that there are no NaN values, and that all values are greater than or equal to zero. Args model (Model) : The model to validate the results of. extracted_results (ExtractedResults) : The extracted results from the model. interpreted_results (InterpretedResults) : The interpreted results from the model. Returns None","title":".validate_results"},{"location":"modules/src/optimizer/validate_results/#ensure_all_time_constants_units_are_billion_kcals","text":"source .ensure_all_time_constants_units_are_billion_kcals( time_consts )","title":".ensure_all_time_constants_units_are_billion_kcals"},{"location":"modules/src/optimizer/validate_results/#check_constraints_satisfied","text":"source .check_constraints_satisfied( model, maximize_constraints, variables ) This function checks if all constraints are satisfied by the final values of the variables. It takes a really long time to run, so it's run infrequently. Args model (pulp.LpProblem) : The optimization model maximize_constraints (list) : A list of constraints to maximize variables (list) : A list of variables to check constraints against Returns None Raises AssertionError : If a constraint is not satisfied","title":".check_constraints_satisfied"},{"location":"modules/src/optimizer/validate_results/#ensure_optimizer_returns_same_as_sum_nutrients","text":"source .ensure_optimizer_returns_same_as_sum_nutrients( percent_fed_from_model, interpreted_results, INCLUDE_FAT, INCLUDE_PROTEIN, country_code ) ensure there was no major error in the optimizer or in analysis which caused the sums reported to differ between adding up all the extracted variables and just look at the reported result of the objective of the optimizer","title":".ensure_optimizer_returns_same_as_sum_nutrients"},{"location":"modules/src/optimizer/validate_results/#ensure_zero_kcals_have_zero_fat_and_protein","text":"source .ensure_zero_kcals_have_zero_fat_and_protein( interpreted_results ) Checks that for any month where kcals is zero for any of the foods, then fat and protein must also be zero. Args interpreted_results (InterpretedResults) : An instance of the InterpretedResults class Returns None Notes: This function is called to ensure that the kcals, fat and protein values are consistent for each food source, feed and biofuels independently. Raises AssertionError : If the kcals value is zero but the fat or protein value is non-zero.","title":".ensure_zero_kcals_have_zero_fat_and_protein"},{"location":"modules/src/optimizer/validate_results/#ensure_never_nan","text":"source .ensure_never_nan( interpreted_results ) This function checks that the interpreter results are always defined as a real number. It does this by calling the make_sure_not_nan() method on each of the interpreted_results attributes. If any of the attributes contain NaN values, an exception will be raised. Args interpreted_results (InterpretedResults) : An instance of the InterpretedResults class. Raises ValueError : If any of the interpreted_results attributes contain NaN values. Returns None","title":".ensure_never_nan"},{"location":"modules/src/optimizer/validate_results/#ensure_all_greater_than_or_equal_to_zero","text":"source .ensure_all_greater_than_or_equal_to_zero( interpreted_results ) Checks that all the results variables are greater than or equal to zero. Args interpreted_results (InterpretedResults) : An instance of the InterpretedResults class Raises AssertionError : If any of the results variables are less than zero","title":".ensure_all_greater_than_or_equal_to_zero"},{"location":"modules/src/optimizer/validate_results/#assert_feed_and_biofuel_used_is_zero_if_humans_are_starving","text":"source .assert_feed_and_biofuel_used_is_zero_if_humans_are_starving( interpreted_results, epsilon = 0.001 )","title":".assert_feed_and_biofuel_used_is_zero_if_humans_are_starving"},{"location":"modules/src/scenarios/run_model_no_trade/","text":"ScenarioRunnerNoTrade source This function runs the model for all countries in the world, no trade. Methods: .run_model_defaults_no_trade source .run_model_defaults_no_trade( this_simulation, show_map_figures = False, show_country_figures = False, create_pptx_with_all_countries = False, scenario_option = [] ) Set a few options to set on top of the specific options for the given simulation These could easily change if another scenario was of more interest. .run_optimizer_for_country source .run_optimizer_for_country( country_data, scenario_option, create_pptx_with_all_countries, show_country_figures, save_all_results, figure_save_postfix = '', title = 'Untitled' ) .fill_data_for_map source .fill_data_for_map( world, country_code, needs_ratio ) .run_model_no_trade source .run_model_no_trade( title = 'untitled', create_pptx_with_all_countries = True, show_country_figures = False, show_map_figures = False, add_map_slide_to_pptx = True, scenario_option = [], countries_list = [], figure_save_postfix = '', return_results = False, save_all_results = False ) This function runs the model for all countries in the world, no trade. countries_list is a list of country codes to run the model for, but if there's an \"!\" in the list, you skip that one. If you leave it blank, it runs all the countries You can generate a powerpoint as an option here too .save_pptx source .save_pptx( title ) .save_all_results_to_csv source .save_all_results_to_csv( results, title ) Save the results to a csv file Read by the web interface .get_countries_to_run_and_skip source .get_countries_to_run_and_skip( countries_list ) if there's any country code with a \"!\", skip that one For example, if !USA is one of the country codes, that one will be skipped If !USA and !CHN are country codes, then both will skip if there's no ! in any of the codes, then only the ones listed will be run. .run_many_options source .run_many_options( scenario_options, title, add_map_slide_to_pptx = True, show_map_figures = False, countries_list = [], return_results = False ) .create_several_maps_with_different_assumptions source .create_several_maps_with_different_assumptions( this_simulation, show_map_figures = False ) .run_desired_simulation source .run_desired_simulation( this_simulation, args ) .apply_custom_parameters source .apply_custom_parameters( country_data, scenario_option ) Apply custom parameters to the country data using parameters defined in the scenario yaml file .verify_country_data source .verify_country_data( country_data ) Runs a bunch of checks to make sure the country data is reasonable Arguments country_data : a dictionary with the country data","title":"Run model no trade"},{"location":"modules/src/scenarios/run_model_no_trade/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_model_no_trade/#scenariorunnernotrade","text":"source This function runs the model for all countries in the world, no trade. Methods:","title":"ScenarioRunnerNoTrade"},{"location":"modules/src/scenarios/run_model_no_trade/#run_model_defaults_no_trade","text":"source .run_model_defaults_no_trade( this_simulation, show_map_figures = False, show_country_figures = False, create_pptx_with_all_countries = False, scenario_option = [] ) Set a few options to set on top of the specific options for the given simulation These could easily change if another scenario was of more interest.","title":".run_model_defaults_no_trade"},{"location":"modules/src/scenarios/run_model_no_trade/#run_optimizer_for_country","text":"source .run_optimizer_for_country( country_data, scenario_option, create_pptx_with_all_countries, show_country_figures, save_all_results, figure_save_postfix = '', title = 'Untitled' )","title":".run_optimizer_for_country"},{"location":"modules/src/scenarios/run_model_no_trade/#fill_data_for_map","text":"source .fill_data_for_map( world, country_code, needs_ratio )","title":".fill_data_for_map"},{"location":"modules/src/scenarios/run_model_no_trade/#run_model_no_trade","text":"source .run_model_no_trade( title = 'untitled', create_pptx_with_all_countries = True, show_country_figures = False, show_map_figures = False, add_map_slide_to_pptx = True, scenario_option = [], countries_list = [], figure_save_postfix = '', return_results = False, save_all_results = False ) This function runs the model for all countries in the world, no trade. countries_list is a list of country codes to run the model for, but if there's an \"!\" in the list, you skip that one. If you leave it blank, it runs all the countries You can generate a powerpoint as an option here too","title":".run_model_no_trade"},{"location":"modules/src/scenarios/run_model_no_trade/#save_pptx","text":"source .save_pptx( title )","title":".save_pptx"},{"location":"modules/src/scenarios/run_model_no_trade/#save_all_results_to_csv","text":"source .save_all_results_to_csv( results, title ) Save the results to a csv file Read by the web interface","title":".save_all_results_to_csv"},{"location":"modules/src/scenarios/run_model_no_trade/#get_countries_to_run_and_skip","text":"source .get_countries_to_run_and_skip( countries_list ) if there's any country code with a \"!\", skip that one For example, if !USA is one of the country codes, that one will be skipped If !USA and !CHN are country codes, then both will skip if there's no ! in any of the codes, then only the ones listed will be run.","title":".get_countries_to_run_and_skip"},{"location":"modules/src/scenarios/run_model_no_trade/#run_many_options","text":"source .run_many_options( scenario_options, title, add_map_slide_to_pptx = True, show_map_figures = False, countries_list = [], return_results = False )","title":".run_many_options"},{"location":"modules/src/scenarios/run_model_no_trade/#create_several_maps_with_different_assumptions","text":"source .create_several_maps_with_different_assumptions( this_simulation, show_map_figures = False )","title":".create_several_maps_with_different_assumptions"},{"location":"modules/src/scenarios/run_model_no_trade/#run_desired_simulation","text":"source .run_desired_simulation( this_simulation, args )","title":".run_desired_simulation"},{"location":"modules/src/scenarios/run_model_no_trade/#apply_custom_parameters","text":"source .apply_custom_parameters( country_data, scenario_option ) Apply custom parameters to the country data using parameters defined in the scenario yaml file","title":".apply_custom_parameters"},{"location":"modules/src/scenarios/run_model_no_trade/#verify_country_data","text":"source .verify_country_data( country_data ) Runs a bunch of checks to make sure the country data is reasonable Arguments country_data : a dictionary with the country data","title":".verify_country_data"},{"location":"modules/src/scenarios/run_scenario/","text":"ScenarioRunner source Methods: .display_results_of_optimizer_round source .display_results_of_optimizer_round( interpreted_results, country_name, show_country_figures, create_pptx_with_all_countries, scenario_loader, figure_save_postfix, slaughter_title = '', feed_title = '', to_humans_title = '' ) .run_round_1 source .run_round_1( consts_for_optimizer_round1, time_consts_round1, interpreter, feed_and_biofuels_round1, meat_dictionary_zero_feed_biofuels, title = 'Untitled' ) .run_round_2 source .run_round_2( constants_loader, constants_for_params, interpreted_results_round1, percent_fed_from_model_round1, consts_for_optimizer_round1, time_consts_round1, interpreter, title = 'Untitled' ) .run_round_3 source .run_round_3( constants_loader, constants_for_params, consts_for_optimizer_round1, consts_for_optimizer_round2, time_consts_round1, time_consts_round2, interpreted_results_round2, feed_and_biofuels_round1, feed_demand, biofuels_demand, interpreted_results_round1, meat_dictionary_round2, each_month_meat_slaughtered, max_consumed_culled_kcals_each_month, meat_summed_consumption, feed_meat_object_round1, title = 'Untitled' ) .get_interpreted_results_for_round3_if_zero_feed source .get_interpreted_results_for_round3_if_zero_feed( interpreter, NMONTHS ) .run_and_analyze_scenario source .run_and_analyze_scenario( constants_for_params, time_consts_for_params, scenario_loader, create_pptx_with_all_countries, show_country_figures, figure_save_postfix, country_data, save_all_results, country_name, country_iso3, title = 'Untitled' ) computes params, Runs the optimizer, extracts data from optimizer, interprets the results, validates the results, and optionally prints an output with people fed. arguments: constants from the scenario, scenario loader (to print the aspects of the scenario and check no scenario parameter has been set twice or left unset) returns: the interpreted results .interpret_optimizer_results source .interpret_optimizer_results( consts_for_optimizer, model, variables, time_consts, interpreter, percent_fed_from_model, optimization_type, title = 'Untitled' ) .run_optimizer source .run_optimizer( consts_for_optimizer, time_consts, optimization_type = None, min_human_food_consumption = None, title = 'Untitled' ) Runs the optimizer and returns the model, variables, and constants .alter_scenario_if_known_to_fail source .alter_scenario_if_known_to_fail( scenario_option, iso3 ) These are the scenarios I seem to be unable to determine why optimization is failing. I belive I have hit diminishing returns trying to figure them out, so I just patch them instead. .set_depending_on_option source .set_depending_on_option( scenario_option, country_data = None ) .save_outdoor_crop_production_to_csv source .save_outdoor_crop_production_to_csv( time_consts_round1, title, country_data ) Saves the outdoor crop production to a csv file .save_feed_and_biofuels_to_csv source .save_feed_and_biofuels_to_csv( feed_demand, biofuels_demand, title, country_data ) Saves the feed and biofuels demand to a csv file are_dicts_approx_same source .are_dicts_approx_same( dict1, dict2 )","title":"Run scenario"},{"location":"modules/src/scenarios/run_scenario/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_scenario/#scenariorunner","text":"source Methods:","title":"ScenarioRunner"},{"location":"modules/src/scenarios/run_scenario/#display_results_of_optimizer_round","text":"source .display_results_of_optimizer_round( interpreted_results, country_name, show_country_figures, create_pptx_with_all_countries, scenario_loader, figure_save_postfix, slaughter_title = '', feed_title = '', to_humans_title = '' )","title":".display_results_of_optimizer_round"},{"location":"modules/src/scenarios/run_scenario/#run_round_1","text":"source .run_round_1( consts_for_optimizer_round1, time_consts_round1, interpreter, feed_and_biofuels_round1, meat_dictionary_zero_feed_biofuels, title = 'Untitled' )","title":".run_round_1"},{"location":"modules/src/scenarios/run_scenario/#run_round_2","text":"source .run_round_2( constants_loader, constants_for_params, interpreted_results_round1, percent_fed_from_model_round1, consts_for_optimizer_round1, time_consts_round1, interpreter, title = 'Untitled' )","title":".run_round_2"},{"location":"modules/src/scenarios/run_scenario/#run_round_3","text":"source .run_round_3( constants_loader, constants_for_params, consts_for_optimizer_round1, consts_for_optimizer_round2, time_consts_round1, time_consts_round2, interpreted_results_round2, feed_and_biofuels_round1, feed_demand, biofuels_demand, interpreted_results_round1, meat_dictionary_round2, each_month_meat_slaughtered, max_consumed_culled_kcals_each_month, meat_summed_consumption, feed_meat_object_round1, title = 'Untitled' )","title":".run_round_3"},{"location":"modules/src/scenarios/run_scenario/#get_interpreted_results_for_round3_if_zero_feed","text":"source .get_interpreted_results_for_round3_if_zero_feed( interpreter, NMONTHS )","title":".get_interpreted_results_for_round3_if_zero_feed"},{"location":"modules/src/scenarios/run_scenario/#run_and_analyze_scenario","text":"source .run_and_analyze_scenario( constants_for_params, time_consts_for_params, scenario_loader, create_pptx_with_all_countries, show_country_figures, figure_save_postfix, country_data, save_all_results, country_name, country_iso3, title = 'Untitled' ) computes params, Runs the optimizer, extracts data from optimizer, interprets the results, validates the results, and optionally prints an output with people fed. arguments: constants from the scenario, scenario loader (to print the aspects of the scenario and check no scenario parameter has been set twice or left unset) returns: the interpreted results","title":".run_and_analyze_scenario"},{"location":"modules/src/scenarios/run_scenario/#interpret_optimizer_results","text":"source .interpret_optimizer_results( consts_for_optimizer, model, variables, time_consts, interpreter, percent_fed_from_model, optimization_type, title = 'Untitled' )","title":".interpret_optimizer_results"},{"location":"modules/src/scenarios/run_scenario/#run_optimizer","text":"source .run_optimizer( consts_for_optimizer, time_consts, optimization_type = None, min_human_food_consumption = None, title = 'Untitled' ) Runs the optimizer and returns the model, variables, and constants","title":".run_optimizer"},{"location":"modules/src/scenarios/run_scenario/#alter_scenario_if_known_to_fail","text":"source .alter_scenario_if_known_to_fail( scenario_option, iso3 ) These are the scenarios I seem to be unable to determine why optimization is failing. I belive I have hit diminishing returns trying to figure them out, so I just patch them instead.","title":".alter_scenario_if_known_to_fail"},{"location":"modules/src/scenarios/run_scenario/#set_depending_on_option","text":"source .set_depending_on_option( scenario_option, country_data = None )","title":".set_depending_on_option"},{"location":"modules/src/scenarios/run_scenario/#save_outdoor_crop_production_to_csv","text":"source .save_outdoor_crop_production_to_csv( time_consts_round1, title, country_data ) Saves the outdoor crop production to a csv file","title":".save_outdoor_crop_production_to_csv"},{"location":"modules/src/scenarios/run_scenario/#save_feed_and_biofuels_to_csv","text":"source .save_feed_and_biofuels_to_csv( feed_demand, biofuels_demand, title, country_data ) Saves the feed and biofuels demand to a csv file","title":".save_feed_and_biofuels_to_csv"},{"location":"modules/src/scenarios/run_scenario/#are_dicts_approx_same","text":"source .are_dicts_approx_same( dict1, dict2 )","title":"are_dicts_approx_same"},{"location":"modules/src/scenarios/run_scenarios_from_yaml/","text":"run_scenarios_from_yaml source .run_scenarios_from_yaml( config_data, show_country_figures, show_map_figures, web_interface ) Run the scenario in a loop, for each scenario specified, and using all data defined from the scenarios config file load_config_data source .load_config_data( yaml_filename ) Load the configuration data for the scenarios from a YAML file in the \"scenarios/\" directory. print_usage_message source .print_usage_message( repo_root ) get_input_args source .get_input_args( args ) Get the input arguments from the command line. Print an error message if usage is incorrect.","title":"Run scenarios from yaml"},{"location":"modules/src/scenarios/run_scenarios_from_yaml/#_1","text":"","title":""},{"location":"modules/src/scenarios/run_scenarios_from_yaml/#run_scenarios_from_yaml","text":"source .run_scenarios_from_yaml( config_data, show_country_figures, show_map_figures, web_interface ) Run the scenario in a loop, for each scenario specified, and using all data defined from the scenarios config file","title":"run_scenarios_from_yaml"},{"location":"modules/src/scenarios/run_scenarios_from_yaml/#load_config_data","text":"source .load_config_data( yaml_filename ) Load the configuration data for the scenarios from a YAML file in the \"scenarios/\" directory.","title":"load_config_data"},{"location":"modules/src/scenarios/run_scenarios_from_yaml/#print_usage_message","text":"source .print_usage_message( repo_root )","title":"print_usage_message"},{"location":"modules/src/scenarios/run_scenarios_from_yaml/#get_input_args","text":"source .get_input_args( args ) Get the input arguments from the command line. Print an error message if usage is incorrect.","title":"get_input_args"},{"location":"modules/src/scenarios/scenarios/","text":"Scenarios source Methods: .check_all_set source .check_all_set() Ensure all properties of scenarios have been set .init_generic_scenario source .init_generic_scenario() .init_global_food_system_properties source .init_global_food_system_properties() .init_country_food_system_properties source .init_country_food_system_properties( country_data ) .set_immediate_shutoff source .set_immediate_shutoff( constants_for_params ) .set_one_month_delayed_shutoff source .set_one_month_delayed_shutoff( constants_for_params ) .set_short_delayed_shutoff source .set_short_delayed_shutoff( constants_for_params ) .set_long_delayed_shutoff source .set_long_delayed_shutoff( constants_for_params ) .set_continued_feed_biofuels source .set_continued_feed_biofuels( constants_for_params ) .set_continued_after_10_percent_fed source .set_continued_after_10_percent_fed( constants_for_params ) .set_long_delayed_shutoff_after_10_percent_fed source .set_long_delayed_shutoff_after_10_percent_fed( constants_for_params ) .set_breeding_to_greatly_reduced source .set_breeding_to_greatly_reduced( constants_for_params ) .set_to_baseline_breeding source .set_to_baseline_breeding( constants_for_params ) .set_to_feed_only_ruminants source .set_to_feed_only_ruminants( constants_for_params ) .set_waste_to_zero source .set_waste_to_zero( constants_for_params ) .get_global_distribution_waste source .get_global_distribution_waste() Calculates the distribution waste of the global food system. .set_global_waste_to_tripled_prices source .set_global_waste_to_tripled_prices( constants_for_params ) .set_global_waste_to_doubled_prices source .set_global_waste_to_doubled_prices( constants_for_params ) overall waste, on farm + distribution + retail 2x prices (note, currently set to 2019, not 2020) .set_global_waste_to_baseline_prices source .set_global_waste_to_baseline_prices( constants_for_params ) overall waste, on farm+distribution+retail 1x prices (note, currently set to 2019, not 2020) .get_distribution_waste source .get_distribution_waste( country_data ) Calculates the distribution waste of the global food system. .set_country_waste_to_tripled_prices source .set_country_waste_to_tripled_prices( constants_for_params, country_data ) overall waste, on farm + distribution + retail 3x prices (note, currently set to 2019, not 2020) .set_country_waste_to_doubled_prices source .set_country_waste_to_doubled_prices( constants_for_params, country_data ) overall waste, on farm + distribution + retail 2x prices (note, currently set to 2019, not 2020) .set_country_waste_to_baseline_prices source .set_country_waste_to_baseline_prices( constants_for_params, country_data ) overall waste, on farm+distribution+retail 1x prices (note, currently set to 2019, not 2020) .set_baseline_nutrition_profile source .set_baseline_nutrition_profile( constants_for_params ) .set_catastrophe_nutrition_profile source .set_catastrophe_nutrition_profile( constants_for_params ) .set_intake_constraints_to_enabled source .set_intake_constraints_to_enabled( constants_for_params ) .set_intake_constraints_to_disabled_for_humans source .set_intake_constraints_to_disabled_for_humans( constants_for_params ) .set_no_stored_food source .set_no_stored_food( constants_for_params ) Sets the stored food at start of simulation to zero. .set_baseline_stored_food source .set_baseline_stored_food( constants_for_params ) Sets the stored food at start of simulation to the expected amount in the start month. .set_stored_food_buffer_zero source .set_stored_food_buffer_zero( constants_for_params ) Sets the stored food buffer as zero -- no stored food left at the end of the simulation. However, in reality food in transit and food in grocery stores and warehouses means there would still likely be some food available at the end as a buffer. .set_no_stored_food_between_years source .set_no_stored_food_between_years( constants_for_params ) Sets the stored food between years as zero. No food is traded between the 12 month intervals seasons. Makes more sense if seasonality is assumed zero. All expected stored food at start is however available. However, in reality food in transit and food in grocery stores and warehouses means there would still likely be some food available at the end as a buffer. .set_stored_food_buffer_as_baseline source .set_stored_food_buffer_as_baseline( constants_for_params ) Sets the stored food buffer as 100% -- the typical stored food buffer in ~2020 left at the end of the simulation. .set_stored_food_buffer_as_baseline_and_no_stored_between_years source .set_stored_food_buffer_as_baseline_and_no_stored_between_years( constants_for_params ) Sets the stored food buffer as 100% -- the typical stored food buffer in ~2020 left at the end of the simulation. .set_no_seasonality source .set_no_seasonality( constants_for_params ) .set_global_seasonality_baseline source .set_global_seasonality_baseline( constants_for_params ) .set_global_seasonality_nuclear_winter source .set_global_seasonality_nuclear_winter( constants_for_params ) .set_country_seasonality source .set_country_seasonality( constants_for_params, country_data ) .set_grasses_baseline source .set_grasses_baseline( constants_for_params ) .set_global_grasses_nuclear_winter source .set_global_grasses_nuclear_winter( constants_for_params ) .set_country_grasses_nuclear_winter source .set_country_grasses_nuclear_winter( constants_for_params, country_data ) .set_country_grasses_to_zero source .set_country_grasses_to_zero( constants_for_params ) .set_fish_zero source .set_fish_zero( constants_for_params, time_consts ) .set_fish_nuclear_winter_reduction source .set_fish_nuclear_winter_reduction( time_consts ) Set the fish percentages in every country (or globally) from baseline although this is a global number, we don't have the regional number, so we use the global instead. This data comes from reading the graph off of this figure in the following paper: Global food insecurity and famine from reduced crop, marine fishery and livestock production due to climate disruption from nuclear war soot injection https://www.nature.com/articles/s43016-022-00573-0/figures/2 Specifically, plot b. .set_fish_baseline source .set_fish_baseline( constants_for_params, time_consts ) .set_disruption_to_crops_to_zero source .set_disruption_to_crops_to_zero( constants_for_params ) .set_nuclear_winter_global_disruption_to_crops source .set_nuclear_winter_global_disruption_to_crops( constants_for_params ) .set_nuclear_winter_country_disruption_to_crops source .set_nuclear_winter_country_disruption_to_crops( constants_for_params, country_data ) .set_zero_crops source .set_zero_crops( constants_for_params ) .include_protein source .include_protein( constants_for_params ) .dont_include_protein source .dont_include_protein( constants_for_params ) .include_fat source .include_fat( constants_for_params ) .dont_include_fat source .dont_include_fat( constants_for_params ) .no_resilient_foods source .no_resilient_foods( constants_for_params ) .seaweed source .seaweed( constants_for_params ) .greenhouse source .greenhouse( constants_for_params ) .relocated_outdoor_crops source .relocated_outdoor_crops( constants_for_params ) .expanded_area_and_relocated_outdoor_crops source .expanded_area_and_relocated_outdoor_crops( constants_for_params ) .methane_scp source .methane_scp( constants_for_params ) .cellulosic_sugar source .cellulosic_sugar( constants_for_params ) .get_all_resilient_foods_scenario source .get_all_resilient_foods_scenario( constants_for_params ) .get_all_resilient_foods_and_more_area_scenario source .get_all_resilient_foods_and_more_area_scenario( constants_for_params ) .get_seaweed_scenario source .get_seaweed_scenario( constants_for_params ) .get_methane_scp_scenario source .get_methane_scp_scenario( constants_for_params ) .get_cellulosic_sugar_scenario source .get_cellulosic_sugar_scenario( constants_for_params ) .get_industrial_foods_scenario source .get_industrial_foods_scenario( constants_for_params ) .get_relocated_crops_scenario source .get_relocated_crops_scenario( constants_for_params ) .get_greenhouse_scenario source .get_greenhouse_scenario( constants_for_params ) .get_no_resilient_food_scenario source .get_no_resilient_food_scenario( constants_for_params ) .cull_animals source .cull_animals( constants_for_params ) .dont_cull_animals source .dont_cull_animals( constants_for_params )","title":"Scenarios"},{"location":"modules/src/scenarios/scenarios/#_1","text":"","title":""},{"location":"modules/src/scenarios/scenarios/#scenarios","text":"source Methods:","title":"Scenarios"},{"location":"modules/src/scenarios/scenarios/#check_all_set","text":"source .check_all_set() Ensure all properties of scenarios have been set","title":".check_all_set"},{"location":"modules/src/scenarios/scenarios/#init_generic_scenario","text":"source .init_generic_scenario()","title":".init_generic_scenario"},{"location":"modules/src/scenarios/scenarios/#init_global_food_system_properties","text":"source .init_global_food_system_properties()","title":".init_global_food_system_properties"},{"location":"modules/src/scenarios/scenarios/#init_country_food_system_properties","text":"source .init_country_food_system_properties( country_data )","title":".init_country_food_system_properties"},{"location":"modules/src/scenarios/scenarios/#set_immediate_shutoff","text":"source .set_immediate_shutoff( constants_for_params )","title":".set_immediate_shutoff"},{"location":"modules/src/scenarios/scenarios/#set_one_month_delayed_shutoff","text":"source .set_one_month_delayed_shutoff( constants_for_params )","title":".set_one_month_delayed_shutoff"},{"location":"modules/src/scenarios/scenarios/#set_short_delayed_shutoff","text":"source .set_short_delayed_shutoff( constants_for_params )","title":".set_short_delayed_shutoff"},{"location":"modules/src/scenarios/scenarios/#set_long_delayed_shutoff","text":"source .set_long_delayed_shutoff( constants_for_params )","title":".set_long_delayed_shutoff"},{"location":"modules/src/scenarios/scenarios/#set_continued_feed_biofuels","text":"source .set_continued_feed_biofuels( constants_for_params )","title":".set_continued_feed_biofuels"},{"location":"modules/src/scenarios/scenarios/#set_continued_after_10_percent_fed","text":"source .set_continued_after_10_percent_fed( constants_for_params )","title":".set_continued_after_10_percent_fed"},{"location":"modules/src/scenarios/scenarios/#set_long_delayed_shutoff_after_10_percent_fed","text":"source .set_long_delayed_shutoff_after_10_percent_fed( constants_for_params )","title":".set_long_delayed_shutoff_after_10_percent_fed"},{"location":"modules/src/scenarios/scenarios/#set_breeding_to_greatly_reduced","text":"source .set_breeding_to_greatly_reduced( constants_for_params )","title":".set_breeding_to_greatly_reduced"},{"location":"modules/src/scenarios/scenarios/#set_to_baseline_breeding","text":"source .set_to_baseline_breeding( constants_for_params )","title":".set_to_baseline_breeding"},{"location":"modules/src/scenarios/scenarios/#set_to_feed_only_ruminants","text":"source .set_to_feed_only_ruminants( constants_for_params )","title":".set_to_feed_only_ruminants"},{"location":"modules/src/scenarios/scenarios/#set_waste_to_zero","text":"source .set_waste_to_zero( constants_for_params )","title":".set_waste_to_zero"},{"location":"modules/src/scenarios/scenarios/#get_global_distribution_waste","text":"source .get_global_distribution_waste() Calculates the distribution waste of the global food system.","title":".get_global_distribution_waste"},{"location":"modules/src/scenarios/scenarios/#set_global_waste_to_tripled_prices","text":"source .set_global_waste_to_tripled_prices( constants_for_params )","title":".set_global_waste_to_tripled_prices"},{"location":"modules/src/scenarios/scenarios/#set_global_waste_to_doubled_prices","text":"source .set_global_waste_to_doubled_prices( constants_for_params ) overall waste, on farm + distribution + retail 2x prices (note, currently set to 2019, not 2020)","title":".set_global_waste_to_doubled_prices"},{"location":"modules/src/scenarios/scenarios/#set_global_waste_to_baseline_prices","text":"source .set_global_waste_to_baseline_prices( constants_for_params ) overall waste, on farm+distribution+retail 1x prices (note, currently set to 2019, not 2020)","title":".set_global_waste_to_baseline_prices"},{"location":"modules/src/scenarios/scenarios/#get_distribution_waste","text":"source .get_distribution_waste( country_data ) Calculates the distribution waste of the global food system.","title":".get_distribution_waste"},{"location":"modules/src/scenarios/scenarios/#set_country_waste_to_tripled_prices","text":"source .set_country_waste_to_tripled_prices( constants_for_params, country_data ) overall waste, on farm + distribution + retail 3x prices (note, currently set to 2019, not 2020)","title":".set_country_waste_to_tripled_prices"},{"location":"modules/src/scenarios/scenarios/#set_country_waste_to_doubled_prices","text":"source .set_country_waste_to_doubled_prices( constants_for_params, country_data ) overall waste, on farm + distribution + retail 2x prices (note, currently set to 2019, not 2020)","title":".set_country_waste_to_doubled_prices"},{"location":"modules/src/scenarios/scenarios/#set_country_waste_to_baseline_prices","text":"source .set_country_waste_to_baseline_prices( constants_for_params, country_data ) overall waste, on farm+distribution+retail 1x prices (note, currently set to 2019, not 2020)","title":".set_country_waste_to_baseline_prices"},{"location":"modules/src/scenarios/scenarios/#set_baseline_nutrition_profile","text":"source .set_baseline_nutrition_profile( constants_for_params )","title":".set_baseline_nutrition_profile"},{"location":"modules/src/scenarios/scenarios/#set_catastrophe_nutrition_profile","text":"source .set_catastrophe_nutrition_profile( constants_for_params )","title":".set_catastrophe_nutrition_profile"},{"location":"modules/src/scenarios/scenarios/#set_intake_constraints_to_enabled","text":"source .set_intake_constraints_to_enabled( constants_for_params )","title":".set_intake_constraints_to_enabled"},{"location":"modules/src/scenarios/scenarios/#set_intake_constraints_to_disabled_for_humans","text":"source .set_intake_constraints_to_disabled_for_humans( constants_for_params )","title":".set_intake_constraints_to_disabled_for_humans"},{"location":"modules/src/scenarios/scenarios/#set_no_stored_food","text":"source .set_no_stored_food( constants_for_params ) Sets the stored food at start of simulation to zero.","title":".set_no_stored_food"},{"location":"modules/src/scenarios/scenarios/#set_baseline_stored_food","text":"source .set_baseline_stored_food( constants_for_params ) Sets the stored food at start of simulation to the expected amount in the start month.","title":".set_baseline_stored_food"},{"location":"modules/src/scenarios/scenarios/#set_stored_food_buffer_zero","text":"source .set_stored_food_buffer_zero( constants_for_params ) Sets the stored food buffer as zero -- no stored food left at the end of the simulation. However, in reality food in transit and food in grocery stores and warehouses means there would still likely be some food available at the end as a buffer.","title":".set_stored_food_buffer_zero"},{"location":"modules/src/scenarios/scenarios/#set_no_stored_food_between_years","text":"source .set_no_stored_food_between_years( constants_for_params ) Sets the stored food between years as zero. No food is traded between the 12 month intervals seasons. Makes more sense if seasonality is assumed zero. All expected stored food at start is however available. However, in reality food in transit and food in grocery stores and warehouses means there would still likely be some food available at the end as a buffer.","title":".set_no_stored_food_between_years"},{"location":"modules/src/scenarios/scenarios/#set_stored_food_buffer_as_baseline","text":"source .set_stored_food_buffer_as_baseline( constants_for_params ) Sets the stored food buffer as 100% -- the typical stored food buffer in ~2020 left at the end of the simulation.","title":".set_stored_food_buffer_as_baseline"},{"location":"modules/src/scenarios/scenarios/#set_stored_food_buffer_as_baseline_and_no_stored_between_years","text":"source .set_stored_food_buffer_as_baseline_and_no_stored_between_years( constants_for_params ) Sets the stored food buffer as 100% -- the typical stored food buffer in ~2020 left at the end of the simulation.","title":".set_stored_food_buffer_as_baseline_and_no_stored_between_years"},{"location":"modules/src/scenarios/scenarios/#set_no_seasonality","text":"source .set_no_seasonality( constants_for_params )","title":".set_no_seasonality"},{"location":"modules/src/scenarios/scenarios/#set_global_seasonality_baseline","text":"source .set_global_seasonality_baseline( constants_for_params )","title":".set_global_seasonality_baseline"},{"location":"modules/src/scenarios/scenarios/#set_global_seasonality_nuclear_winter","text":"source .set_global_seasonality_nuclear_winter( constants_for_params )","title":".set_global_seasonality_nuclear_winter"},{"location":"modules/src/scenarios/scenarios/#set_country_seasonality","text":"source .set_country_seasonality( constants_for_params, country_data )","title":".set_country_seasonality"},{"location":"modules/src/scenarios/scenarios/#set_grasses_baseline","text":"source .set_grasses_baseline( constants_for_params )","title":".set_grasses_baseline"},{"location":"modules/src/scenarios/scenarios/#set_global_grasses_nuclear_winter","text":"source .set_global_grasses_nuclear_winter( constants_for_params )","title":".set_global_grasses_nuclear_winter"},{"location":"modules/src/scenarios/scenarios/#set_country_grasses_nuclear_winter","text":"source .set_country_grasses_nuclear_winter( constants_for_params, country_data )","title":".set_country_grasses_nuclear_winter"},{"location":"modules/src/scenarios/scenarios/#set_country_grasses_to_zero","text":"source .set_country_grasses_to_zero( constants_for_params )","title":".set_country_grasses_to_zero"},{"location":"modules/src/scenarios/scenarios/#set_fish_zero","text":"source .set_fish_zero( constants_for_params, time_consts )","title":".set_fish_zero"},{"location":"modules/src/scenarios/scenarios/#set_fish_nuclear_winter_reduction","text":"source .set_fish_nuclear_winter_reduction( time_consts ) Set the fish percentages in every country (or globally) from baseline although this is a global number, we don't have the regional number, so we use the global instead. This data comes from reading the graph off of this figure in the following paper: Global food insecurity and famine from reduced crop, marine fishery and livestock production due to climate disruption from nuclear war soot injection https://www.nature.com/articles/s43016-022-00573-0/figures/2 Specifically, plot b.","title":".set_fish_nuclear_winter_reduction"},{"location":"modules/src/scenarios/scenarios/#set_fish_baseline","text":"source .set_fish_baseline( constants_for_params, time_consts )","title":".set_fish_baseline"},{"location":"modules/src/scenarios/scenarios/#set_disruption_to_crops_to_zero","text":"source .set_disruption_to_crops_to_zero( constants_for_params )","title":".set_disruption_to_crops_to_zero"},{"location":"modules/src/scenarios/scenarios/#set_nuclear_winter_global_disruption_to_crops","text":"source .set_nuclear_winter_global_disruption_to_crops( constants_for_params )","title":".set_nuclear_winter_global_disruption_to_crops"},{"location":"modules/src/scenarios/scenarios/#set_nuclear_winter_country_disruption_to_crops","text":"source .set_nuclear_winter_country_disruption_to_crops( constants_for_params, country_data )","title":".set_nuclear_winter_country_disruption_to_crops"},{"location":"modules/src/scenarios/scenarios/#set_zero_crops","text":"source .set_zero_crops( constants_for_params )","title":".set_zero_crops"},{"location":"modules/src/scenarios/scenarios/#include_protein","text":"source .include_protein( constants_for_params )","title":".include_protein"},{"location":"modules/src/scenarios/scenarios/#dont_include_protein","text":"source .dont_include_protein( constants_for_params )","title":".dont_include_protein"},{"location":"modules/src/scenarios/scenarios/#include_fat","text":"source .include_fat( constants_for_params )","title":".include_fat"},{"location":"modules/src/scenarios/scenarios/#dont_include_fat","text":"source .dont_include_fat( constants_for_params )","title":".dont_include_fat"},{"location":"modules/src/scenarios/scenarios/#no_resilient_foods","text":"source .no_resilient_foods( constants_for_params )","title":".no_resilient_foods"},{"location":"modules/src/scenarios/scenarios/#seaweed","text":"source .seaweed( constants_for_params )","title":".seaweed"},{"location":"modules/src/scenarios/scenarios/#greenhouse","text":"source .greenhouse( constants_for_params )","title":".greenhouse"},{"location":"modules/src/scenarios/scenarios/#relocated_outdoor_crops","text":"source .relocated_outdoor_crops( constants_for_params )","title":".relocated_outdoor_crops"},{"location":"modules/src/scenarios/scenarios/#expanded_area_and_relocated_outdoor_crops","text":"source .expanded_area_and_relocated_outdoor_crops( constants_for_params )","title":".expanded_area_and_relocated_outdoor_crops"},{"location":"modules/src/scenarios/scenarios/#methane_scp","text":"source .methane_scp( constants_for_params )","title":".methane_scp"},{"location":"modules/src/scenarios/scenarios/#cellulosic_sugar","text":"source .cellulosic_sugar( constants_for_params )","title":".cellulosic_sugar"},{"location":"modules/src/scenarios/scenarios/#get_all_resilient_foods_scenario","text":"source .get_all_resilient_foods_scenario( constants_for_params )","title":".get_all_resilient_foods_scenario"},{"location":"modules/src/scenarios/scenarios/#get_all_resilient_foods_and_more_area_scenario","text":"source .get_all_resilient_foods_and_more_area_scenario( constants_for_params )","title":".get_all_resilient_foods_and_more_area_scenario"},{"location":"modules/src/scenarios/scenarios/#get_seaweed_scenario","text":"source .get_seaweed_scenario( constants_for_params )","title":".get_seaweed_scenario"},{"location":"modules/src/scenarios/scenarios/#get_methane_scp_scenario","text":"source .get_methane_scp_scenario( constants_for_params )","title":".get_methane_scp_scenario"},{"location":"modules/src/scenarios/scenarios/#get_cellulosic_sugar_scenario","text":"source .get_cellulosic_sugar_scenario( constants_for_params )","title":".get_cellulosic_sugar_scenario"},{"location":"modules/src/scenarios/scenarios/#get_industrial_foods_scenario","text":"source .get_industrial_foods_scenario( constants_for_params )","title":".get_industrial_foods_scenario"},{"location":"modules/src/scenarios/scenarios/#get_relocated_crops_scenario","text":"source .get_relocated_crops_scenario( constants_for_params )","title":".get_relocated_crops_scenario"},{"location":"modules/src/scenarios/scenarios/#get_greenhouse_scenario","text":"source .get_greenhouse_scenario( constants_for_params )","title":".get_greenhouse_scenario"},{"location":"modules/src/scenarios/scenarios/#get_no_resilient_food_scenario","text":"source .get_no_resilient_food_scenario( constants_for_params )","title":".get_no_resilient_food_scenario"},{"location":"modules/src/scenarios/scenarios/#cull_animals","text":"source .cull_animals( constants_for_params )","title":".cull_animals"},{"location":"modules/src/scenarios/scenarios/#dont_cull_animals","text":"source .dont_cull_animals( constants_for_params )","title":".dont_cull_animals"},{"location":"modules/src/utilities/constants/","text":"ScenarioConstants source Methods: .define source .define( name, value ) FixedConstants source Methods: .define source .define( name, value ) MonthlyConstants source Methods: .define source .define( name, value )","title":"Constants"},{"location":"modules/src/utilities/constants/#_1","text":"","title":""},{"location":"modules/src/utilities/constants/#scenarioconstants","text":"source Methods:","title":"ScenarioConstants"},{"location":"modules/src/utilities/constants/#define","text":"source .define( name, value )","title":".define"},{"location":"modules/src/utilities/constants/#fixedconstants","text":"source Methods:","title":"FixedConstants"},{"location":"modules/src/utilities/constants/#define_1","text":"source .define( name, value )","title":".define"},{"location":"modules/src/utilities/constants/#monthlyconstants","text":"source Methods:","title":"MonthlyConstants"},{"location":"modules/src/utilities/constants/#define_2","text":"source .define( name, value )","title":".define"},{"location":"modules/src/utilities/import_utilities/","text":"ImportUtilities source ImportUtilities() This class contains methods for importing data from various sources. Methods: .stack_on_list source .stack_on_list( list, layer ) This function creates another layer on an existing stack of layers, or creates the first layer in the stack. It takes in the original list and the layer to be added, and returns the combined original and layer with the list stacked down below it. Example If we have an existing list [a,b,c] and we want to add [d,e,f] to it, we can call the function like this: stack_on_list([a,b,c], [d,e,f]) This will give us: [ [a,b,c], [d,e,f] ] Args list (numpy.ndarray) : The original list to which the layer is to be added layer (numpy.ndarray) : The layer to be added to the original list Returns ndarray : The combined list with the layer stacked down below it .add_row_to_csv source .add_row_to_csv( nw_csv, country, country_name, reductions ) Adds a row to a CSV file. Args nw_csv (List[List[str]]) : The CSV file to add a row to. country (str) : The country to add to the row. country_name (str) : The name of the country to add to the row. reductions (List[float]) : A list of reduction values to add to the row. Returns The updated CSV file with the new row added. .weighted_average_percentages source .weighted_average_percentages( percentages, weights ) Calculates the weighted average of a list of percentage reductions. Args percentages (list) : A list of percentage reductions. weights (list) : A list of weights corresponding to the percentages. Returns float : The weighted average of the percentages. Raises AssertionError : If the length of the percentages and weights lists are not equal. AssertionError : If the sum of the weights is not between 0.99999 and 1.00001. The function calculates the weighted average of a list of percentage reductions. Any non-possible number is removed. The remaining are averaged. If only non-possible numbers are included, then the result is a non-possible number. A percentage reduction is considered non-possible if it is greater than 1e5 or less than -100. If there are no valid percentages, the function returns 9.37e36. .average_percentages source .average_percentages( percentages ) This function calculates the weighted average of a list of percentages. The weightings are set up to be even across all percentages. Args percentages (list) : A list of percentages to be averaged. Returns float : The weighted average of the percentages. .average_columns source .average_columns( vstack ) This function takes a vertical stack of columns and returns a single row with the averages of each column. Args vstack (numpy.ndarray) : A vertical stack of columns. Returns list : A single row with the averages of each column. Example >>> vstack = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> average_columns(vstack) [4.0, 5.0, 6.0] .clean_up_eswatini source .clean_up_eswatini( nw_csv ) This function changes the country code for Swaziland from the FAOSTAT default to the USDA standard for compatibility with other datasets. It does this by finding the index of the Swaziland country code in the input numpy array and changing it to the new country code for Eswatini. Args nw_csv (numpy.ndarray) : A numpy array containing country codes and other data Returns ndarray : The input numpy array with the Swaziland country code changed to Eswatini .import_csv source .import_csv( csv_loc, col_names, iso3_col_name ) This function imports a CSV file into a pandas dataframe and calls the import_csv_from_df function. Args csv_loc (str) : The file path of the CSV file to be imported. col_names (list) : A list of column names to be included in the dataframe. iso3_col_name (str) : The name of the column containing the ISO3 country codes. Returns DataFrame : A dataframe containing the specified columns from the CSV file. Example import_csv('data.csv', ['col1', 'col2', 'col3'], 'iso3_code') .import_csv_from_df source .import_csv_from_df( df, iso3_col_name ) This function takes a pandas dataframe and a column name as input and returns a dictionary containing each table for each unique value in the specified column. Args df (pandas.DataFrame) : The input dataframe iso3_col_name (str) : The name of the column containing the unique values Returns dict : A dictionary containing each table for each unique value in the specified column","title":"Import utilities"},{"location":"modules/src/utilities/import_utilities/#_1","text":"","title":""},{"location":"modules/src/utilities/import_utilities/#importutilities","text":"source ImportUtilities() This class contains methods for importing data from various sources. Methods:","title":"ImportUtilities"},{"location":"modules/src/utilities/import_utilities/#stack_on_list","text":"source .stack_on_list( list, layer ) This function creates another layer on an existing stack of layers, or creates the first layer in the stack. It takes in the original list and the layer to be added, and returns the combined original and layer with the list stacked down below it. Example If we have an existing list [a,b,c] and we want to add [d,e,f] to it, we can call the function like this: stack_on_list([a,b,c], [d,e,f]) This will give us: [ [a,b,c], [d,e,f] ] Args list (numpy.ndarray) : The original list to which the layer is to be added layer (numpy.ndarray) : The layer to be added to the original list Returns ndarray : The combined list with the layer stacked down below it","title":".stack_on_list"},{"location":"modules/src/utilities/import_utilities/#add_row_to_csv","text":"source .add_row_to_csv( nw_csv, country, country_name, reductions ) Adds a row to a CSV file. Args nw_csv (List[List[str]]) : The CSV file to add a row to. country (str) : The country to add to the row. country_name (str) : The name of the country to add to the row. reductions (List[float]) : A list of reduction values to add to the row. Returns The updated CSV file with the new row added.","title":".add_row_to_csv"},{"location":"modules/src/utilities/import_utilities/#weighted_average_percentages","text":"source .weighted_average_percentages( percentages, weights ) Calculates the weighted average of a list of percentage reductions. Args percentages (list) : A list of percentage reductions. weights (list) : A list of weights corresponding to the percentages. Returns float : The weighted average of the percentages. Raises AssertionError : If the length of the percentages and weights lists are not equal. AssertionError : If the sum of the weights is not between 0.99999 and 1.00001. The function calculates the weighted average of a list of percentage reductions. Any non-possible number is removed. The remaining are averaged. If only non-possible numbers are included, then the result is a non-possible number. A percentage reduction is considered non-possible if it is greater than 1e5 or less than -100. If there are no valid percentages, the function returns 9.37e36.","title":".weighted_average_percentages"},{"location":"modules/src/utilities/import_utilities/#average_percentages","text":"source .average_percentages( percentages ) This function calculates the weighted average of a list of percentages. The weightings are set up to be even across all percentages. Args percentages (list) : A list of percentages to be averaged. Returns float : The weighted average of the percentages.","title":".average_percentages"},{"location":"modules/src/utilities/import_utilities/#average_columns","text":"source .average_columns( vstack ) This function takes a vertical stack of columns and returns a single row with the averages of each column. Args vstack (numpy.ndarray) : A vertical stack of columns. Returns list : A single row with the averages of each column. Example >>> vstack = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) >>> average_columns(vstack) [4.0, 5.0, 6.0]","title":".average_columns"},{"location":"modules/src/utilities/import_utilities/#clean_up_eswatini","text":"source .clean_up_eswatini( nw_csv ) This function changes the country code for Swaziland from the FAOSTAT default to the USDA standard for compatibility with other datasets. It does this by finding the index of the Swaziland country code in the input numpy array and changing it to the new country code for Eswatini. Args nw_csv (numpy.ndarray) : A numpy array containing country codes and other data Returns ndarray : The input numpy array with the Swaziland country code changed to Eswatini","title":".clean_up_eswatini"},{"location":"modules/src/utilities/import_utilities/#import_csv","text":"source .import_csv( csv_loc, col_names, iso3_col_name ) This function imports a CSV file into a pandas dataframe and calls the import_csv_from_df function. Args csv_loc (str) : The file path of the CSV file to be imported. col_names (list) : A list of column names to be included in the dataframe. iso3_col_name (str) : The name of the column containing the ISO3 country codes. Returns DataFrame : A dataframe containing the specified columns from the CSV file. Example import_csv('data.csv', ['col1', 'col2', 'col3'], 'iso3_code')","title":".import_csv"},{"location":"modules/src/utilities/import_utilities/#import_csv_from_df","text":"source .import_csv_from_df( df, iso3_col_name ) This function takes a pandas dataframe and a column name as input and returns a dictionary containing each table for each unique value in the specified column. Args df (pandas.DataFrame) : The input dataframe iso3_col_name (str) : The name of the column containing the unique values Returns dict : A dictionary containing each table for each unique value in the specified column","title":".import_csv_from_df"},{"location":"modules/src/utilities/make_powerpoint/","text":"MakePowerpoint source Methods: .create_title_slide source .create_title_slide( the_title ) Creates a title slide with the given title and today's date as the subtitle. Args the_title (str) : The title to be displayed on the slide. Returns None .insert_slide source .insert_slide( title_below, description, figure_save_loc ) Inserts a slide into the PowerPoint presentation with a title, description, and figure. Args title_below (str) : The title of the slide. description (str) : The description of the slide. figure_save_loc (str) : The file path of the figure to be added to the slide. Returns None .save_ppt source .save_ppt( pres_name ) Saves the PowerPoint presentation with the given name. Args self : the PowerPoint presentation object pres_name (str) : the name of the PowerPoint presentation to save Returns None .insert_slide_with_feed source .insert_slide_with_feed( title_below, description, figure_save_loc, feed_figure_save_loc ) Inserts a slide with a title, two images, and a textbox with a description. Args title_below (str) : The title of the slide. description (str) : The description to be added to the textbox. figure_save_loc (str) : The file path of the first image to be added. feed_figure_save_loc (str) : The file path of the second image to be added. Returns None","title":"Make powerpoint"},{"location":"modules/src/utilities/make_powerpoint/#_1","text":"","title":""},{"location":"modules/src/utilities/make_powerpoint/#makepowerpoint","text":"source Methods:","title":"MakePowerpoint"},{"location":"modules/src/utilities/make_powerpoint/#create_title_slide","text":"source .create_title_slide( the_title ) Creates a title slide with the given title and today's date as the subtitle. Args the_title (str) : The title to be displayed on the slide. Returns None","title":".create_title_slide"},{"location":"modules/src/utilities/make_powerpoint/#insert_slide","text":"source .insert_slide( title_below, description, figure_save_loc ) Inserts a slide into the PowerPoint presentation with a title, description, and figure. Args title_below (str) : The title of the slide. description (str) : The description of the slide. figure_save_loc (str) : The file path of the figure to be added to the slide. Returns None","title":".insert_slide"},{"location":"modules/src/utilities/make_powerpoint/#save_ppt","text":"source .save_ppt( pres_name ) Saves the PowerPoint presentation with the given name. Args self : the PowerPoint presentation object pres_name (str) : the name of the PowerPoint presentation to save Returns None","title":".save_ppt"},{"location":"modules/src/utilities/make_powerpoint/#insert_slide_with_feed","text":"source .insert_slide_with_feed( title_below, description, figure_save_loc, feed_figure_save_loc ) Inserts a slide with a title, two images, and a textbox with a description. Args title_below (str) : The title of the slide. description (str) : The description to be added to the textbox. figure_save_loc (str) : The file path of the first image to be added. feed_figure_save_loc (str) : The file path of the second image to be added. Returns None","title":".insert_slide_with_feed"},{"location":"modules/src/utilities/plotter/","text":"Plotter source Methods: .helper_for_plotting_fig_3abcde source .helper_for_plotting_fig_3abcde( interpreter, xlim, gs, row, fig, max_y_percent, ADD_SECOND_COLUMN, split_legend = True ) .helper_for_plotting_fig_2abcde source .helper_for_plotting_fig_2abcde( ax, interpreter, xlim, title, add_ylabel = True, add_xlabel = True, ylim_constraint = 100000, split_legend = True ) .plot_fig_3abcde_updated source .plot_fig_3abcde_updated( results, xlim, ADD_SECOND_COLUMN = False ) .plot_fig_3ab source .plot_fig_3ab( monte_carlo_data, food_names, removed, added ) .plot_fig_s2abcd source .plot_fig_s2abcd( interpreter1, interpreter2, xlim1, xlim2 ) .getylim_nutrients source .getylim_nutrients( interpreter, xlim ) .plot_histogram source .plot_histogram( ax, data, N, xlabel, ylabel, title ) Plots a histogram of the given data on the given axis with the given labels and title. Args ax (matplotlib.axes.Axes) : The axis to plot the histogram on. data (list) : The data to plot. N (int) : The number of data points. xlabel (str) : The label for the x-axis. ylabel (str) : The label for the y-axis. title (str) : The title for the plot. Returns None Example >>> data = [1, 2, 3, 4, 5] >>> N = 5 >>> xlabel = \"X Label\" >>> ylabel = \"Y Label\" >>> title = \"Title\" >>> plot_histogram(ax, data, N, xlabel, ylabel, title) .plot_histogram_with_boxplot source .plot_histogram_with_boxplot( data, xlabel, title ) .get_people_fed_legend source .get_people_fed_legend( interpreter, is_nuclear_winter, split_legend = False ) .get_feed_biofuels_legend source .get_feed_biofuels_legend( interpreter ) .plot_monthly_reductions_seasonally source .plot_monthly_reductions_seasonally( ratios ) .plot_monthly_reductions_no_seasonality source .plot_monthly_reductions_no_seasonality( all_months_reductions ) Plot the reduction each month, showing the seasonal variability. .plot_food source .plot_food( food, title ) Plot the food generically with the 3 macronutrients. .plot_food_alternative source .plot_food_alternative( food, title ) Plot the food generically with the 3 macronutrients (alternative layout).","title":"Plotter"},{"location":"modules/src/utilities/plotter/#_1","text":"","title":""},{"location":"modules/src/utilities/plotter/#plotter","text":"source Methods:","title":"Plotter"},{"location":"modules/src/utilities/plotter/#helper_for_plotting_fig_3abcde","text":"source .helper_for_plotting_fig_3abcde( interpreter, xlim, gs, row, fig, max_y_percent, ADD_SECOND_COLUMN, split_legend = True )","title":".helper_for_plotting_fig_3abcde"},{"location":"modules/src/utilities/plotter/#helper_for_plotting_fig_2abcde","text":"source .helper_for_plotting_fig_2abcde( ax, interpreter, xlim, title, add_ylabel = True, add_xlabel = True, ylim_constraint = 100000, split_legend = True )","title":".helper_for_plotting_fig_2abcde"},{"location":"modules/src/utilities/plotter/#plot_fig_3abcde_updated","text":"source .plot_fig_3abcde_updated( results, xlim, ADD_SECOND_COLUMN = False )","title":".plot_fig_3abcde_updated"},{"location":"modules/src/utilities/plotter/#plot_fig_3ab","text":"source .plot_fig_3ab( monte_carlo_data, food_names, removed, added )","title":".plot_fig_3ab"},{"location":"modules/src/utilities/plotter/#plot_fig_s2abcd","text":"source .plot_fig_s2abcd( interpreter1, interpreter2, xlim1, xlim2 )","title":".plot_fig_s2abcd"},{"location":"modules/src/utilities/plotter/#getylim_nutrients","text":"source .getylim_nutrients( interpreter, xlim )","title":".getylim_nutrients"},{"location":"modules/src/utilities/plotter/#plot_histogram","text":"source .plot_histogram( ax, data, N, xlabel, ylabel, title ) Plots a histogram of the given data on the given axis with the given labels and title. Args ax (matplotlib.axes.Axes) : The axis to plot the histogram on. data (list) : The data to plot. N (int) : The number of data points. xlabel (str) : The label for the x-axis. ylabel (str) : The label for the y-axis. title (str) : The title for the plot. Returns None Example >>> data = [1, 2, 3, 4, 5] >>> N = 5 >>> xlabel = \"X Label\" >>> ylabel = \"Y Label\" >>> title = \"Title\" >>> plot_histogram(ax, data, N, xlabel, ylabel, title)","title":".plot_histogram"},{"location":"modules/src/utilities/plotter/#plot_histogram_with_boxplot","text":"source .plot_histogram_with_boxplot( data, xlabel, title )","title":".plot_histogram_with_boxplot"},{"location":"modules/src/utilities/plotter/#get_people_fed_legend","text":"source .get_people_fed_legend( interpreter, is_nuclear_winter, split_legend = False )","title":".get_people_fed_legend"},{"location":"modules/src/utilities/plotter/#get_feed_biofuels_legend","text":"source .get_feed_biofuels_legend( interpreter )","title":".get_feed_biofuels_legend"},{"location":"modules/src/utilities/plotter/#plot_monthly_reductions_seasonally","text":"source .plot_monthly_reductions_seasonally( ratios )","title":".plot_monthly_reductions_seasonally"},{"location":"modules/src/utilities/plotter/#plot_monthly_reductions_no_seasonality","text":"source .plot_monthly_reductions_no_seasonality( all_months_reductions ) Plot the reduction each month, showing the seasonal variability.","title":".plot_monthly_reductions_no_seasonality"},{"location":"modules/src/utilities/plotter/#plot_food","text":"source .plot_food( food, title ) Plot the food generically with the 3 macronutrients.","title":".plot_food"},{"location":"modules/src/utilities/plotter/#plot_food_alternative","text":"source .plot_food_alternative( food, title ) Plot the food generically with the 3 macronutrients (alternative layout).","title":".plot_food_alternative"}]}