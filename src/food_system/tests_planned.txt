tests:
calculate_reduction_to_biofuels with uneven biofuels
calculate_reduction_to_feed with uneven feed
run with exceedances and test that it creates an appropriate amount of meat and dairy at the end
test the exceedance to see that it actually gives a correct calculate_exceedance_past_crops result
run calculate_reduction_to_feed 
test that biofuels is zero if feed is large enough and nonzero if small
check food min is actually min of numbers
check sum food array is actually sum of numbers
check sum,milt,div of foods is correct
check biofuel reduction ratio is correct by setting it to what should be 70%


>>> from food import Food
>>> f=Food(10,3,1)
>>> g=Food(-2,4,0)
>>> f * 10
<food.Food object at 0x7fde48c848e0>
>>> print(f * 10)
    kcals: 100
    fat: 30
    protein: 10
>>> print( 10*f)
    kcals: 100
    fat: 30
    protein: 10
>>> print( 10*g)
    kcals: -20
    fat: 40
    protein: 0
>>> print( g*10)
    kcals: -20
    fat: 40
    protein: 0
>>> print( g*f)
    kcals: -20
    fat: 12
    protein: 0
>>> print( f*g)
    kcals: -20
    fat: 12
    protein: 0
>>> 



Example:

outdoor crops:
    kcals:   10, 20, 10, 10
    fat:     10, 30, 20, 20
    protein: 10, 30, 20, 20
    month:    1   2   3   4

nonhuman_consumption:
    kcals:    5, 20, 10, 15
    fat:      5, 15, 25, 20
    protein: 25, 15, 20, 20
    month:    1   2   3   4

supply_minus_demand:
    kcals:    5,  0,  0, -5
    fat:      5, 15, -5,  0
    protein:-15, 15,  0,  0
    month:    1   2   3   4

running_net_supply:
    kcals:    5,  5,  5,  0
    fat:      5, 20, 15, 15
    protein:-15,  0,  0,  0
    month:    1   2   3   4

min_running_net_supply:
    kcals:    0
    fat:      5
    protein:-15
    month: allmonths

max_running_net_demand:
    kcals:    0
    fat:      -5
    protein: 15
    month: allmonths

    For all month combined, how much original stored food is needed to make up for
    each macronutrient?

    Answer:
        We sum up all the discrepancies between supply and demand.
        The stored food will need to make up for the minimum total shortage added
        up.



testing running sum
    >>> from food import Food
    >>> from food import Food
    >>> f=Food([1,0,1],[0,1,1],[-2,-3,-4],'wow each month','noway each month','really each month')
    >>> print(f.get_running_total_nutrients_sum())
