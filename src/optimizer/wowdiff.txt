3c3
< ##       Functions and constants relating to meat and milk production        #
---
> ##       Functions and constants relating to meat and dairy production        #
18c18
<         self.ADD_MILK = constants_for_params["ADD_MILK"]
---
>         self.ADD_DAIRY = constants_for_params["ADD_DAIRY"]
24c24
<         self.MILK_WASTE = constants_for_params["WASTE"]["MILK"]
---
>         self.DAIRY_WASTE = constants_for_params["WASTE"]["DAIRY"]
54c54
<         self.INEDIBLE_TO_MILK_CONVERSION = 1.44
---
>         self.INEDIBLE_TO_DAIRY_CONVERSION = 1.44
141c141
<     def calculate_meat_and_dairy_from_excess(self, fed_to_animals):
---
>     def calculate_meat_and_dairy_from_excess(self, kcals_fed_to_animals):
144c144
<         # are fed first to milk, then to pigs and chickens, then to cattle
---
>         # are fed first to dairy, then to pigs and chickens, then to cattle
146c146
<         excess_dry_cal_tons = fed_to_animals.kcals * 1e9 / 4e6
---
>         excess_dry_cal_tons = kcals_fed_to_animals * 1e9 / 4e6
157,159c157,159
<         EDIBLE_TO_MILK_CONVERSION = 0.7
<         grain_fed_milk_limit_food_usage = (
<             self.grain_fed_milk_limit * EDIBLE_TO_MILK_CONVERSION
---
>         EDIBLE_TO_DAIRY_CONVERSION = 0.7
>         h_e_fed_dairy_limit_food_usage = (
>             self.h_e_fed_dairy_limit * EDIBLE_TO_DAIRY_CONVERSION
172c172
<         grain_fed_milk_produced = []
---
>         h_e_fed_dairy_produced = []
174c174
<         cattle_feedlot_maintained = []
---
>         cattle_h_e_maintained = []
177c177
<             max_milk = excess_dry_cal_tons[m] / EDIBLE_TO_MILK_CONVERSION
---
>             max_dairy = excess_dry_cal_tons[m] / EDIBLE_TO_DAIRY_CONVERSION
179c179
<             if self.ADD_MILK:
---
>             if self.ADD_DAIRY:
181,183c181,183
<                 if max_milk <= self.grain_fed_milk_limit[m]:
<                     # tons per month milk
<                     grain_fed_milk_produced.append(max_milk)
---
>                 if max_dairy <= self.h_e_fed_dairy_limit[m]:
>                     # tons per month dairy
>                     h_e_fed_dairy_produced.append(max_dairy)
186c186
<                     cattle_feedlot_maintained.append(0)
---
>                     cattle_h_e_maintained.append(0)
189c189
<                 grain_fed_milk_produced.append(self.grain_fed_milk_limit[m])
---
>                 h_e_fed_dairy_produced.append(self.h_e_fed_dairy_limit[m])
191c191
<                 limit_milk = grain_fed_milk_limit_food_usage[m]
---
>                 limit_dairy = h_e_fed_dairy_limit_food_usage[m]
193,194c193,194
<                 limit_milk = 0
<                 grain_fed_milk_produced.append(0)
---
>                 limit_dairy = 0
>                 h_e_fed_dairy_produced.append(0)
196c196
<             for_chicken_pork_cattle = excess_dry_cal_tons[m] - limit_milk
---
>             for_chicken_pork_cattle = excess_dry_cal_tons[m] - limit_dairy
206c206
<                 cattle_feedlot_maintained.append(0)
---
>                 cattle_h_e_maintained.append(0)
214c214
<             cattle_feedlot_maintained.append(for_cattle / EDIBLE_TO_CATTLE_CONVERSION)
---
>             cattle_h_e_maintained.append(for_cattle / EDIBLE_TO_CATTLE_CONVERSION)
216c216
<         assert (np.array(grain_fed_milk_produced) >= 0).all()
---
>         assert (np.array(h_e_fed_dairy_produced) >= 0).all()
218,219c218,219
<         if not self.ADD_MILK:
<             grain_fed_milk_produced = np.array([0] * self.NMONTHS)
---
>         if not self.ADD_DAIRY:
>             h_e_fed_dairy_produced = np.array([0] * self.NMONTHS)
221,222c221,222
<         self.grain_fed_milk_produced = grain_fed_milk_produced
<         self.cattle_feedlot_maintained = cattle_feedlot_maintained
---
>         self.h_e_fed_dairy_produced = h_e_fed_dairy_produced
>         self.cattle_h_e_maintained = cattle_h_e_maintained
235,236c235
<             np.array(self.cattle_grazing_maintained)
<             + np.array(self.cattle_feedlot_maintained)
---
>             np.array(self.cattle_maintained) + np.array(self.cattle_h_e_maintained)
244,254c243,252
<             PRINT_CATTLE_WARNING = True
<             if PRINT_CATTLE_WARNING:
<                 print("")
<                 print(
<                     "WARNING: cattle maintained is exceeding 2020 baseline levels in months:"
<                 )
<                 print(np.where(ratio_maintained_cattle[0:47] >= 1))
<                 print(
<                     "Consider whether the predicted amount of human edible feed fed to animals is reasonable."
<                 )
<                 print("")
---
>             print("")
>             print(
>                 "WARNING: cattle maintained is exceeding 2020 baseline levels in months:"
>             )
>             print(np.where(ratio_maintained_cattle[0:47] >= 1))
>             print(
>                 "Consider whether the predicted amount of human edible feed fed to animals is reasonable."
>             )
>             print("")
>             pass
315,316c313,314
<         cattle_feedlot_maintained_kcals = (
<             np.array(self.cattle_feedlot_maintained)
---
>         cattle_h_e_maintained_kcals = (
>             np.array(self.cattle_h_e_maintained)
323,324c321,322
<         cattle_feedlot_maintained_fat = (
<             cattle_feedlot_maintained_kcals
---
>         cattle_h_e_maintained_fat = (
>             cattle_h_e_maintained_kcals
332,333c330,331
<         cattle_feedlot_maintained_protein = (
<             cattle_feedlot_maintained_kcals
---
>         cattle_h_e_maintained_protein = (
>             cattle_h_e_maintained_kcals
340,344c338,339
<         grain_fed_meat_kcals = np.array(
<             cattle_feedlot_maintained_kcals + self.chicken_pork_kcals
<         ) * (1 - self.MEAT_WASTE / 100)
<         grain_fed_meat_fat = np.array(
<             cattle_feedlot_maintained_fat + self.chicken_pork_fat
---
>         h_e_meat_kcals = np.array(
>             cattle_h_e_maintained_kcals + self.chicken_pork_kcals
346,347c341,345
<         grain_fed_meat_protein = np.array(
<             cattle_feedlot_maintained_protein + self.chicken_pork_protein
---
>         h_e_meat_fat = np.array(cattle_h_e_maintained_fat + self.chicken_pork_fat) * (
>             1 - self.MEAT_WASTE / 100
>         )
>         h_e_meat_protein = np.array(
>             cattle_h_e_maintained_protein + self.chicken_pork_protein
351,353c349,351
<             grain_fed_meat_kcals = np.array([0] * self.NMONTHS)
<             grain_fed_meat_fat = np.array([0] * self.NMONTHS)
<             grain_fed_meat_protein = np.array([0] * self.NMONTHS)
---
>             h_e_meat_kcals = np.array([0] * self.NMONTHS)
>             h_e_meat_fat = np.array([0] * self.NMONTHS)
>             h_e_meat_protein = np.array([0] * self.NMONTHS)
359,361c357,359
<             grain_fed_meat_kcals,
<             grain_fed_meat_fat,
<             grain_fed_meat_protein,
---
>             h_e_meat_kcals,
>             h_e_meat_fat,
>             h_e_meat_protein,
364c362
<     def calculate_meat_milk_from_human_inedible_feed(self, constants_for_params):
---
>     def calculate_meat_dairy_from_human_inedible_feed(self, constants_for_params):
366c364
<         MILK_LIMIT = constants_for_params["TONS_MILK_ANNUAL"] / 12
---
>         DAIRY_LIMIT = constants_for_params["TONS_DAIRY_ANNUAL"] / 12
369,371c367,370
<         MILK_LIMIT_FEED_USAGE = MILK_LIMIT * self.INEDIBLE_TO_MILK_CONVERSION
<         self.grazing_milk_produced = []  # tons
<         self.cattle_grazing_maintained = []  # tons
---
>         DAIRY_LIMIT_FEED_USAGE = DAIRY_LIMIT * self.INEDIBLE_TO_DAIRY_CONVERSION
> 
>         self.dairy_milk_produced = []  # tons
>         self.cattle_maintained = []  # tons
373,379c372,378
<             if self.ADD_MILK:
<                 max_milk = (
<                     self.human_inedible_feed[m] / self.INEDIBLE_TO_MILK_CONVERSION
<                 )
<                 if max_milk <= MILK_LIMIT:
<                     self.grazing_milk_produced.append(max_milk)
<                     self.cattle_grazing_maintained.append(0)
---
>             if self.ADD_DAIRY:
>                 max_dairy = (
>                     self.human_inedible_feed[m] / self.INEDIBLE_TO_DAIRY_CONVERSION
>                 )
>                 if max_dairy <= DAIRY_LIMIT:
>                     self.dairy_milk_produced.append(max_dairy)
>                     self.cattle_maintained.append(0)
381c380
<                 self.grazing_milk_produced.append(MILK_LIMIT)
---
>                 self.dairy_milk_produced.append(DAIRY_LIMIT)
383c382
<                     self.human_inedible_feed[m] - MILK_LIMIT_FEED_USAGE
---
>                     self.human_inedible_feed[m] - DAIRY_LIMIT_FEED_USAGE
386c385
<                 self.grazing_milk_produced.append(0)
---
>                 self.dairy_milk_produced.append(0)
390c389
<                 self.cattle_grazing_maintained.append(
---
>                 self.cattle_maintained.append(
394c393
<                 self.cattle_grazing_maintained.append(0)
---
>                 self.cattle_maintained.append(0)
396,397c395
<         # assign the resulting remaining limit to milk past inedible sources
<         self.grain_fed_milk_limit = MILK_LIMIT - np.array(self.grazing_milk_produced)
---
>         self.h_e_fed_dairy_limit = DAIRY_LIMIT - np.array(self.dairy_milk_produced)
399c397
<     def get_milk_produced(self):
---
>     def get_dairy_produced(self):
401,402c399,400
<         grazing_milk_kcals = (
<             np.array(self.grazing_milk_produced)
---
>         dairy_milk_kcals = (
>             np.array(self.dairy_milk_produced)
406c404
<             * (1 - self.MILK_WASTE / 100)
---
>             * (1 - self.DAIRY_WASTE / 100)
410,411c408,409
<         grazing_milk_fat = (
<             np.array(self.grazing_milk_produced)
---
>         dairy_milk_fat = (
>             np.array(self.dairy_milk_produced)
414c412
<             * (1 - self.MILK_WASTE / 100)
---
>             * (1 - self.DAIRY_WASTE / 100)
418,419c416,417
<         grazing_milk_protein = (
<             np.array(self.grazing_milk_produced)
---
>         dairy_milk_protein = (
>             np.array(self.dairy_milk_produced)
422c420
<             * (1 - self.MILK_WASTE / 100)
---
>             * (1 - self.DAIRY_WASTE / 100)
425c423
<         return (grazing_milk_kcals, grazing_milk_fat, grazing_milk_protein)
---
>         return (dairy_milk_kcals, dairy_milk_fat, dairy_milk_protein)
427c425
<     def get_cattle_grazing_maintained(self):
---
>     def get_cattle_maintained(self):
432,433c430,431
<             cattle_grazing_maintained_kcals = (
<                 np.array(self.cattle_grazing_maintained)
---
>             cattle_maintained_kcals = (
>                 np.array(self.cattle_maintained)
441,442c439,440
<             cattle_grazing_maintained_fat = (
<                 cattle_grazing_maintained_kcals
---
>             cattle_maintained_fat = (
>                 cattle_maintained_kcals
450,451c448,449
<             cattle_grazing_maintained_protein = (
<                 cattle_grazing_maintained_kcals
---
>             cattle_maintained_protein = (
>                 cattle_maintained_kcals
459,463c457,459
<             cattle_grazing_maintained_kcals = [0] * len(self.cattle_grazing_maintained)
<             cattle_grazing_maintained_fat = [0] * len(self.cattle_grazing_maintained)
<             cattle_grazing_maintained_protein = [0] * len(
<                 self.cattle_grazing_maintained
<             )
---
>             cattle_maintained_kcals = [0] * len(self.cattle_maintained)
>             cattle_maintained_fat = [0] * len(self.cattle_maintained)
>             cattle_maintained_protein = [0] * len(self.cattle_maintained)
466,468c462,464
<             cattle_grazing_maintained_kcals,
<             cattle_grazing_maintained_fat,
<             cattle_grazing_maintained_protein,
---
>             cattle_maintained_kcals,
>             cattle_maintained_fat,
>             cattle_maintained_protein,
499c495
<         return np.array(meat_culled)
---
>         return meat_culled
517c513
<     def get_milk_from_human_edible_feed(self, constants_for_params):
---
>     def get_dairy_from_human_edible_feed(self, constants_for_params):
519c515
<         if self.ADD_MILK:
---
>         if self.ADD_DAIRY:
521,522c517,518
<             grain_fed_milk_kcals = (
<                 np.array(self.grain_fed_milk_produced)
---
>             h_e_milk_kcals = (
>                 np.array(self.h_e_fed_dairy_produced)
526c522
<                 * (1 - self.MILK_WASTE / 100)
---
>                 * (1 - self.DAIRY_WASTE / 100)
529,530c525,526
<             grain_fed_milk_fat = (
<                 np.array(self.grain_fed_milk_produced)
---
>             h_e_milk_fat = (
>                 np.array(self.h_e_fed_dairy_produced)
533c529
<                 * (1 - self.MILK_WASTE / 100)
---
>                 * (1 - self.DAIRY_WASTE / 100)
536,537c532,533
<             grain_fed_milk_protein = (
<                 np.array(self.grain_fed_milk_produced)
---
>             h_e_milk_protein = (
>                 np.array(self.h_e_fed_dairy_produced)
540c536
<                 * (1 - self.MILK_WASTE / 100)
---
>                 * (1 - self.DAIRY_WASTE / 100)
545,620c541,543
<             grain_fed_milk_kcals = np.array([0] * self.NMONTHS)
<             grain_fed_milk_fat = np.array([0] * self.NMONTHS)
<             grain_fed_milk_protein = np.array([0] * self.NMONTHS)
< 
<         return (grain_fed_milk_kcals, grain_fed_milk_fat, grain_fed_milk_protein)
< 
<     def cap_fat_protein_to_amount_used(
<         self,
<         feed,
<         grain_fed_meat_fat,
<         grain_fed_meat_protein,
<         grain_fed_milk_fat,
<         grain_fed_milk_protein,
<     ):
<         # Cap the max created by the amount used, as conversion can't be > 1,
<         # but the actual conversion only uses kcals
<         # Add a little buffer to be safe -- it's probably at best a 90% conversion ratio.
< 
<         # TODO: DELETE THIS IF ALL WORKS OUT WITHOUT ERRORS
<         # BEST_POSSIBLE_CONVERSION_RATIO = .9
<         BEST_POSSIBLE_CONVERSION_RATIO = 1
< 
<         assert feed.all_greater_than_or_equal_to_zero()
< 
<         return_grain_fed_meat_fat = np.array([])
<         return_grain_fed_meat_protein = np.array([])
<         return_grain_fed_milk_fat = np.array([])
<         return_grain_fed_milk_protein = np.array([])
<         for i in range(self.NMONTHS):
<             if (
<                 grain_fed_milk_fat[i] + grain_fed_meat_fat[i]
<                 > feed.fat[i] * BEST_POSSIBLE_CONVERSION_RATIO
<             ):
<                 adjustment_ratio = (
<                     BEST_POSSIBLE_CONVERSION_RATIO
<                     * feed.fat[i]
<                     / (grain_fed_milk_fat[i] + grain_fed_meat_fat[i])
<                 )
<                 return_grain_fed_meat_fat = np.append(
<                     return_grain_fed_meat_fat, adjustment_ratio * grain_fed_meat_fat[i]
<                 )
<                 return_grain_fed_milk_fat = np.append(
<                     return_grain_fed_milk_fat, adjustment_ratio * grain_fed_milk_fat[i]
<                 )
<             else:
<                 return_grain_fed_meat_fat = np.append(
<                     return_grain_fed_meat_fat, grain_fed_meat_fat[i]
<                 )
<                 return_grain_fed_milk_fat = np.append(
<                     return_grain_fed_milk_fat, grain_fed_milk_fat[i]
<                 )
< 
<             if (
<                 grain_fed_milk_protein[i] + grain_fed_meat_protein[i]
<                 > BEST_POSSIBLE_CONVERSION_RATIO * feed.protein[i]
<             ):
<                 adjustment_ratio = (
<                     BEST_POSSIBLE_CONVERSION_RATIO
<                     * feed.protein[i]
<                     / (grain_fed_milk_protein[i] + grain_fed_meat_protein[i])
<                 )
<                 return_grain_fed_meat_protein = np.append(
<                     return_grain_fed_meat_protein,
<                     adjustment_ratio * grain_fed_meat_protein[i],
<                 )
<                 return_grain_fed_milk_protein = np.append(
<                     return_grain_fed_milk_protein,
<                     adjustment_ratio * grain_fed_milk_protein[i],
<                 )
<             else:
<                 return_grain_fed_meat_protein = np.append(
<                     return_grain_fed_meat_protein, grain_fed_meat_protein[i]
<                 )
<                 return_grain_fed_milk_protein = np.append(
<                     return_grain_fed_milk_protein, grain_fed_milk_protein[i]
<                 )
---
>             h_e_milk_kcals = np.array([0] * self.NMONTHS)
>             h_e_milk_fat = np.array([0] * self.NMONTHS)
>             h_e_milk_protein = np.array([0] * self.NMONTHS)
622,627c545
<         return (
<             return_grain_fed_meat_fat,
<             return_grain_fed_meat_protein,
<             return_grain_fed_milk_fat,
<             return_grain_fed_milk_protein,
<         )
---
>         return (h_e_milk_kcals, h_e_milk_fat, h_e_milk_protein)
