34,39c34
< 	def makeMidMonthlyOGKcals(self,
< 		crops_food_eaten_no_rot,
< 		crops_food_eaten_rot,
< 		crops_kcals_produced,
< 		conversion,
< 		show_output):
---
> 	def makeMidMonthlyOGVars(self,crops_food_eaten,crops_food_produced,conversion,show_output):
47,49c42,43
< 		if(type(crops_food_eaten_no_rot[0])==type(0)):
< 			return [[0]*len(crops_food_eaten_no_rot),\
< 				[0]*len(crops_food_eaten_no_rot)]  #return initial value
---
> 		if(type(crops_food_eaten[0])==type(0)):
> 			return [[0]*len(crops_food_eaten),[0]*len(crops_food_eaten)]  #return initial value
55c49
< 			cf_produced = crops_kcals_produced[m]
---
> 			cf_produced = crops_food_produced[m]
58,59c52
< 			cf_eaten = crops_food_eaten_no_rot[m].varValue + \
< 				crops_food_eaten_rot[m].varValue*self.c["OG_ROTATION_FRACTION_KCALS"]
---
> 			cf_eaten = crops_food_eaten[m].varValue
65c58
< 			else: #crops_food_eaten < crops_kcals_produced
---
> 			else: #crops_food_eaten < crops_food_produced
75a69
> 		import matplotlib.pyplot as plt
78d71
< 		# import matplotlib.pyplot as plt
92d84
< 		# quit()
142d133
< 		greenhouse_fat_per_ha,
143a135
> 		greenhouse_fat_per_ha,
228,231c220,223
< 		crops_food_eaten_no_rot,
< 		crops_food_eaten_rot,
< 		crops_food_storage_no_rot,
< 		crops_food_storage_rot,
---
> 		crops_food_eaten,
> #		crops_food_start,
> #		crops_food_end,
> 		crops_food_storage,
232a225,227
> 		og_rot_frac_kcals,
> 		og_rot_frac_fat,
> 		og_rot_frac_protein,
235,261c230,232
< 		self.billions_fed_OG_storage_no_rot = self.makeMidMonthlyVars(
< 			crops_food_storage_no_rot,
< 			1/self.c["KCALS_MONTHLY"],\
< 			show_output)
< 
< 		self.billions_fed_OG_storage_rot = self.makeMidMonthlyVars(
< 			crops_food_storage_rot,
< 			self.c["OG_ROTATION_FRACTION_KCALS"]/self.c["KCALS_MONTHLY"],\
< 			show_output)
< 
< 		#immediate from produced and storage changes account for all eaten
< 		# but storage can come from produced!
< 		#we know storage_change + all_eaten = produced
< 		# if(storage_change>=0):
< 		# 	assert(all_eaten >= storage_change)
< 		# 	eaten_from_stored = storage_change
< 		# 	immediately_eaten = all_eaten - eaten_from_stored
< 		# else:
< 		# 	eaten_from_stored = 0
< 
< 		og_produced_kcals = \
< 			np.concatenate([
< 				np.array(crops_food_produced[0:self.c['inputs']["INITIAL_HARVEST_DURATION"]]),\
< 				np.array(crops_food_produced[self.c['inputs']["INITIAL_HARVEST_DURATION"]:])\
< 				 * self.c["OG_ROTATION_FRACTION_KCALS"],
< 			])
< 
---
> 		# import matplotlib.pyplot as plt
> 		# plt.plot(crops_food_eaten)
> 		# plt.show()
262a234,243
> 		self.billions_fed_OG_storage = np.multiply(np.multiply(og_rot_frac_kcals,\
> 			self.makeMidMonthlyVars(
> 				crops_food_storage,
> 				1/self.c["KCALS_MONTHLY"]\
> 				,
> 				show_output)
> 			),self.h_e_fraction_kcals_fed_to_humans)
> 		# import matplotlib.pyplot as plt
> 		# plt.plot(self.billions_fed_OG_storage)
> 		# plt.show()
265,268c246,248
< 		 = self.makeMidMonthlyOGKcals(
< 			crops_food_eaten_no_rot,
< 			crops_food_eaten_rot,
< 			og_produced_kcals,
---
> 		 = self.makeMidMonthlyOGVars(
> 			crops_food_eaten,
> 			crops_food_produced,
273d252
< 
275,279c254,257
< 			np.multiply(
< 				np.array(self.billions_fed_immediate_OG_kcals_tmp),
< 				self.h_e_fraction_kcals_fed_to_humans
< 			)
< 
---
> 			np.multiply(np.multiply(
> 				og_rot_frac_kcals,
> 				self.billions_fed_immediate_OG_kcals_tmp
> 			),self.h_e_fraction_kcals_fed_to_humans)
281,284c259,262
< 			np.multiply(
< 				np.array(self.billions_fed_new_stored_OG_kcals_tmp),
< 				self.h_e_fraction_kcals_fed_to_humans
< 			)
---
> 			np.multiply(np.multiply(
> 				og_rot_frac_kcals,
> 				self.billions_fed_new_stored_OG_kcals_tmp
> 			),self.h_e_fraction_kcals_fed_to_humans)
286c264,265
< 		self.billions_fed_OG_kcals = np.multiply(
---
> 		self.billions_fed_OG_kcals = np.multiply(np.multiply(
> 			og_rot_frac_kcals,
288c267
< 				crops_food_eaten_no_rot,
---
> 				crops_food_eaten,
291,296c270,271
< 			+ np.array(self.makeMidMonthlyVars(
< 				crops_food_eaten_rot,
< 				self.c["OG_ROTATION_FRACTION_KCALS"]/self.c["KCALS_MONTHLY"],
< 				show_output)),
< 			self.h_e_fraction_kcals_fed_to_humans\
< 		)
---
> 			),self.h_e_fraction_kcals_fed_to_humans)
> 
298c273,274
< 		self.billions_fed_OG_fat = np.multiply(
---
> 		self.billions_fed_OG_fat = np.multiply(np.multiply(
> 			og_rot_frac_fat,
300,308c276,279
< 				crops_food_eaten_no_rot,
< 				self.c["OG_FRACTION_FAT"]/self.c["FAT_MONTHLY"]/1e9,
< 				show_output))
< 			+ np.array(self.makeMidMonthlyVars(
< 				crops_food_eaten_rot,
< 				self.c["OG_ROTATION_FRACTION_FAT"]/self.c["FAT_MONTHLY"]/1e9,
< 				show_output)),
< 			self.h_e_fraction_fat_fed_to_humans\
< 		)
---
> 				crops_food_eaten,
> 				1/self.c["FAT_MONTHLY"]/1e9,
> 				show_output))\
> 			),self.h_e_fraction_fat_fed_to_humans)
310c281,282
< 		self.billions_fed_OG_protein = np.multiply(
---
> 		self.billions_fed_OG_protein = np.multiply(np.multiply(
> 			og_rot_frac_protein,
312,314c284,285
< 				crops_food_eaten_no_rot,
< 				self.c["OG_FRACTION_PROTEIN"]\
< 				/self.c["PROTEIN_MONTHLY"]/1e9,
---
> 				crops_food_eaten,
> 				1/self.c["PROTEIN_MONTHLY"]/1e9,
316,322c287
< 			+ np.array(self.makeMidMonthlyVars(
< 				crops_food_eaten_rot,
< 				self.c["OG_ROTATION_FRACTION_PROTEIN"]\
< 				/self.c["PROTEIN_MONTHLY"]/1e9,
< 				show_output)),
< 			self.h_e_fraction_protein_fed_to_humans\
< 		)
---
> 			),self.h_e_fraction_protein_fed_to_humans)
325,328c290,294
< 			np.multiply(
< 				og_produced_kcals / self.c["KCALS_MONTHLY"],
< 				self.h_e_fraction_kcals_fed_to_humans
< 			)
---
> 			np.multiply(np.multiply(
> 				np.array(crops_food_produced[0:len(og_rot_frac_kcals)]),\
> 				og_rot_frac_kcals\
> 			) * 1 / self.c["KCALS_MONTHLY"],self.h_e_fraction_kcals_fed_to_humans)
> 
331,339c297,300
< 			np.multiply(
< 				np.concatenate([
< 					np.array(crops_food_produced[0:self.c['inputs']["INITIAL_HARVEST_DURATION"]])
< 					* self.c["OG_FRACTION_FAT"],\
< 					np.array(crops_food_produced[self.c['inputs']["INITIAL_HARVEST_DURATION"]:])\
< 					 * self.c["OG_ROTATION_FRACTION_FAT"],
< 				]) / self.c["FAT_MONTHLY"]/1e9,
< 				self.h_e_fraction_fat_fed_to_humans
< 			)
---
> 			np.multiply(np.multiply(
> 				og_rot_frac_fat,
> 				np.array(crops_food_produced[0:len(og_rot_frac_fat)])
> 			) / self.c["FAT_MONTHLY"] / 1e9,self.h_e_fraction_fat_fed_to_humans)
342,365c303,321
< 			np.multiply(
< 				np.concatenate([
< 					np.array(crops_food_produced[0:self.c['inputs']["INITIAL_HARVEST_DURATION"]])
< 					* self.c["OG_FRACTION_PROTEIN"],\
< 					np.array(crops_food_produced[self.c['inputs']["INITIAL_HARVEST_DURATION"]:])\
< 					 * self.c["OG_ROTATION_FRACTION_PROTEIN"],
< 				]) / self.c["PROTEIN_MONTHLY"]/1e9,
< 				self.h_e_fraction_protein_fed_to_humans
< 			)
< 		# print("self.billions_fed_OG_produced_kcals")
< 		# print(self.billions_fed_OG_produced_kcals)
< 		# print("self.billions_fed_OG_produced_fat")
< 		# print(self.billions_fed_OG_produced_fat)
< 		# print("self.billions_fed_OG_produced_protein")
< 		# print(self.billions_fed_OG_produced_protein)
< 		# print("self.billions_fed_OG_kcals")
< 		# print(self.billions_fed_OG_kcals)
< 		# print("self.billions_fed_OG_fat")
< 		# print(self.billions_fed_OG_fat)
< 		# print("self.billions_fed_OG_protein")
< 		# print(self.billions_fed_OG_protein)
< 		# print("self.billions_fed_GH_fat")
< 		# print(self.billions_fed_GH_fat)
< 		# quit()
---
> 			np.multiply(np.multiply(
> 				og_rot_frac_protein,
> 				np.array(crops_food_produced[0:len(og_rot_frac_protein)])\
> 			) / self.c["PROTEIN_MONTHLY"]	/ 1e9,self.h_e_fraction_protein_fed_to_humans)
> 
> 		# import matplotlib.pyplot as plt
> 		# plt.plot(crops_food_produced)
> 		# plt.show()
> 
> 		# self.billion_person_years_OG_kcals = list(np.array(crops_food_produced[0:len(crops_food_eaten)])
> 			# * og_rot_frac_kcals/(self.c["KCALS_MONTHLY"]*12))
> 
> 		# self.billion_person_years_OG_fat = list(np.array(crops_food_produced[0:len(crops_food_eaten)])*
> 			# self.c["OG_ROTATION_FRACTION_FAT"]/(self.c["FAT_MONTHLY"]*12)/1e9)
> 
> 		# self.billion_person_years_OG_protein = list(np.array(crops_food_produced[0:len(crops_food_eaten)])*
> 			# self.c["OG_ROTATION_FRACTION_PROTEIN"]/(self.c["PROTEIN_MONTHLY"]*12)/1e9)
> 
> 
382d337
< 		production_fat_scp_per_m,
383a339
> 		production_fat_scp_per_m,
402,404c358,360
< 		meat_start,
< 		meat_end,
< 		meat_eaten,
---
> 		nonegg_nondairy_meat_start,
> 		nonegg_nondairy_meat_end,
> 		nonegg_nondairy_meat_eaten,
424,425c380,381
< 			meat_eaten,
< 			1/self.c["KCALS_MONTHLY"],
---
> 			nonegg_nondairy_meat_eaten,
> 			self.c["MEAT_FRACTION_KCALS"]/self.c["KCALS_MONTHLY"],
428d383
< 
435,441d389
< 		if(self.c["VERBOSE"]):
< 			print("expected culled meat kcals month 0 to 8ish")
< 			# print(self.c["MEAT_FRACTION_KCALS"]*self.c["LIMIT_PER_MONTH_CULLED"])
< 			print(self.c["LIMIT_PER_MONTH_CULLED"])
< 			print("actual culled meat")
< 			print(self.billions_fed_meat_kcals_tmp*self.c["KCALS_MONTHLY"])
< 			# print(np.divide(self.billions_fed_meat_kcals_tmp,self.h_e_fraction_kcals_fed_to_humans)*self.c["KCALS_MONTHLY"])
444c392
< 			meat_eaten,
---
> 			nonegg_nondairy_meat_eaten,
451,452c399
< 		print("self.h_e_fraction_fat_fed_to_humans")
< 		print(self.h_e_fraction_fat_fed_to_humans)
---
> 
457,459d403
< 		print("meat expected total fed ")
< 		print(np.divide(self.billions_fed_meat_fat/(1-self.c["inputs"]["WASTE"]["MEAT"]/100)*self.c["FAT_MONTHLY"]*1e9/1e3,self.h_e_fraction_fat_fed_to_humans))
< 
461c405
< 			meat_eaten,
---
> 			nonegg_nondairy_meat_eaten,
479a424
> 
510c455
< 		#useful for plotting meat and dairy
---
> 		##useful for plotting meat and dairy
515c460
< 		# plt.plot(cm,label = "cattle meat")
---
> 		# # plt.plot(cm)
517,519c462
< 		# plt.plot(m,label = "non cattle meat")
< 		# plt.plot(self.billions_fed_milk_kcals,label = "milk")
< 		# plt.title("milk and meat")
---
> 		# plt.plot(m)
521,525c464,470
< 		# plt.plot(np.array([lim]*self.c["inputs"]["NMONTHS"]),label = "lim dairy")
< 		# plt.plot(self.billions_fed_h_e_meat_kcals,label = "h e meat")
< 		# plt.plot(self.billions_fed_h_e_milk_kcals,label = "h e milk")
< 		# plt.plot(cm + m +self.billions_fed_h_e_meat_kcals + self.billions_fed_h_e_milk_kcals + self.billions_fed_milk_kcals,label = "sum")
< 		# plt.legend()
---
> 		# plt.plot(np.array([lim]*self.c["inputs"]["NMONTHS"]))
> 		# plt.plot(self.billions_fed_h_e_meat_kcals)
> 		# plt.plot(self.billions_fed_h_e_milk_kcals)
> 		# plt.title("milk and meat")
> 		# plt.plot(self.billions_fed_milk_kcals)
> 		# plt.plot(cm + m +self.billions_fed_h_e_meat_kcals + self.billions_fed_h_e_milk_kcals + self.billions_fed_milk_kcals)
> 		# plt.legend(["cattle","not cattle meat","limit dairy","h_e_meat_kcals","h_e_milk_kcals","milk_kcals","sum "])
529c474
< 		if(self.c['ADD_MEAT'] and self.c['VERBOSE']):
---
> 		if(self.c['ADD_NONEGG_NONDAIRY_MEAT'] and self.c['VERBOSE']):
531c476,477
< 			print(360*self.c['INITIAL_MEAT'] 
---
> 			print(360*self.c['INITIAL_NONEGG_NONDAIRY_MEAT'] 
> 				* self.c['MEAT_FRACTION_KCALS']
614c560
< 		self.seaweed_built_area_max_density = np.array(built_area)*self.c['MAXIMUM_DENSITY']
---
> 		self.seaweed_built_area_max_density = np.array(built_area)*self.c["inputs"]['MAXIMUM_DENSITY']
693a640,641
> 		print("humans_fed_kcals[0]")
> 		print(humans_fed_kcals)
706,714c654,656
< 		feed_delay = self.c['inputs']['FEED_SHUTOFF_DELAY']
< 		sum_before = np.sum((np.array(humans_fed_kcals)[:feed_delay] - self.c["WORLD_POP"]/1e9))
< 
< 		if(feed_delay == self.c["NMONTHS"]):
< 			self.excess_after_run = (np.array(humans_fed_kcals) - self.c["WORLD_POP"]/1e9)*self.c["KCALS_MONTHLY"]
< 		else:		
< 			#spread out excess calories to be used in future months
< 			self.excess_after_run = (np.array(humans_fed_kcals) - self.c["WORLD_POP"]/1e9+(sum_before)/(self.c["NMONTHS"]-feed_delay))*self.c["KCALS_MONTHLY"]
< 			"""
---
> 		humans_fed_kcals
> 		self.excess_after_run = (np.array(humans_fed_kcals) - self.c["WORLD_POP"]/1e9)*self.c["KCALS_MONTHLY"]
> 		"""
730a673,674
> 		it's also true
> 
764,787d707
< 		# it seems impossible for there to be more fat used for feed than actually produced from all the sources, if the optimizer spits out a positive number of people fed in terms of fat.
< 		# The estimate for amount used for feed divides the excess by all the sources (except human edible feed). If the excess is greater than the sources, we have a problem.
< 		# The sources actually added to get humans_fed_fat, does however include the excess as a negative number. The excess is added to humans_fat_fed to cancel this. Also, humans_fed_fat includes meat and milk from human edible.
< 		# So the only reason it doesnt actually go negative is because the optimizer takes an optimization including the human edible fat which pushes it to some positive balance of people fed in terms of fat.
< 		# So its not impossible, it just means that the part of the excess which required more fat had to come from the animal outputs themselves.
< 		# By adding a requirement that the fat, calories and protein need to be satisfied before human edible produce meat is taken into account we will have 100% of resources spent on meeting these requirements and 0% going to humans. The optimizer will still 
< 
< 		# print("h_e_meat_fat + h_e_milk_fat")
< 		# print(h_e_meat_fat + h_e_milk_fat)
< 
< 		# print("np.array(humans_fed_fat)")
< 		# print(np.array(humans_fed_fat)\
< 		# 			 * self.c["FAT_MONTHLY"]\
< 		# 			 * 1e9)
< 
< 
< 		print("excess_fat_used")
< 		print(excess_fat_used)
< 		
< 		print("humans_fed_fat")
< 		print(np.array(humans_fed_fat)\
< 		 * self.c["FAT_MONTHLY"]\
< 		 * 1e9)
< 
813,815d732
< 		
< 		# print("h_e_fraction_fat_used_for_feed")
< 		# print(h_e_fraction_fat_used_for_feed)
817,820c734
< 		# print("h_e_fraction_fat_used_for_feed")
< 		# print(h_e_fraction_fat_used_for_feed)
< 		# print(h_e_fraction_fat_used_for_feed<=1)
< 		assert((h_e_fraction_kcals_used_for_feed <= 1+ 1e-5).all())
---
> 		assert((h_e_fraction_kcals_used_for_feed < 1).all())
822c736
< 		assert((h_e_fraction_fat_used_for_feed <= 1 + 1e-5).all())
---
> 		assert((h_e_fraction_fat_used_for_feed < 1).all())
824c738
< 		assert((h_e_fraction_protein_used_for_feed <= 1+ 1e-5).all())
---
> 		assert((h_e_fraction_protein_used_for_feed < 1).all())
826a741,742
> 		print("h e fraction kcals fed to humans")
> 		print(h_e_fraction_kcals_fed_to_humans)
844a761,764
> 		print("self.billions_fed_h_e_meat_kcals")
> 		print(self.billions_fed_h_e_meat_kcals)
> 		print("self.billions_fed_h_e_milk_kcals")
> 		print(self.billions_fed_h_e_milk_kcals)
878,879d797
< 		# print("billions_fed_meat_fat")
< 		# print(self.billions_fed_meat_fat)
899,911d816
< 			
< 		#if it takes all the available ag production to produce minimum for biofuel and animal feed demands
< 		division = []
< 		for zipped_lists in zip(sum_sources_minus_excess_minus_h_e_fed_kcals,self.h_e_fraction_kcals_fed_to_humans):
< 			
< 			if(zipped_lists[1] <= 0):
< 				assert(zipped_lists[0] >= -1e-5)
< 				division.append(0)
< 			else:
< 				division.append(zipped_lists[0]/zipped_lists[1])
< 		
< 
< 
921c826,830
< 					np.array(division)+self.billions_fed_h_e_balance_kcals\
---
> 					np.divide(\
> 						sum_sources_minus_excess_minus_h_e_fed_kcals,\
> 						self.h_e_fraction_kcals_fed_to_humans\
> 					)\
> 					+self.billions_fed_h_e_balance_kcals\
929,955d837
< 
< 		division = []
< 		for zipped_lists in zip(sum_sources_minus_excess_minus_h_e_fed_fat,self.h_e_fraction_fat_fed_to_humans):
< 			
< 			if(zipped_lists[1] <= 0):
< 				assert(zipped_lists[0] >= -1e-5)
< 				division.append(0)
< 			else:
< 				division.append(zipped_lists[0]/zipped_lists[1])
< 		# print("sum_sources_minus_excess_minus_h_e_fed_fat")
< 		# print(sum_sources_minus_excess_minus_h_e_fed_fat)
< 		# print("division")
< 		# print(division)
< 		# print("excess - self.billions_fed_h_e_meat_fat sum_sources_minus_excess_minus_h_e_fed_fat")
< 		# print("sum_sources_minus_excess_h_e_fed_fat")
< 		# print(sum_sources_minus_excess_minus_h_e_fed_fat)
< 		print("sum_sources_minus_h_e_fed_fat")
< 		print(division)
< 
< 		print("self.billions_fed_h_e_meat_fat")
< 		print(self.billions_fed_h_e_meat_fat)
< 
< 		# print("self.billions_fed_h_e_balance_fat")
< 		# print(self.billions_fed_h_e_balance_fat)
< 
< 		# print("same, sum sources ")
< 		# print(sum_sources_minus_excess_minus_h_e_fed_fat + self.billions_fed_h_e_meat_fat)
966c848,851
< 					np.array(division)\
---
> 					np.divide(\
> 						sum_sources_minus_excess_minus_h_e_fed_fat,\
> 						self.h_e_fraction_fat_fed_to_humans\
> 					)\
974c859
< 		# print(fractional_difference)
---
> 		print(fractional_difference)
978,986d862
< 
< 		division = []
< 		for zipped_lists in zip(sum_sources_minus_excess_minus_h_e_fed_protein,self.h_e_fraction_protein_fed_to_humans):			
< 			
< 			if(zipped_lists[1] <= 0):
< 				assert(zipped_lists[0] >= -1e-5)
< 				division.append(0)
< 			else:
< 				division.append(zipped_lists[0]/zipped_lists[1])
997c873,876
< 					np.array(division)\
---
> 					np.divide(\
> 						sum_sources_minus_excess_minus_h_e_fed_protein,\
> 						self.h_e_fraction_protein_fed_to_humans\
> 					)\
1006a886
> 
