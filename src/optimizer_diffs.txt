89a90
> 		v["seaweed_wet_on_farm"]=[0]*c["NDAYS"]
94d94
< 		v["seaweed_wet_on_farm"]=[0]*NDAYS
96d95
< 		v["used_area"]=[0]*NDAYS
98,106c97,102
< 
< 		v["crops_food_storage_no_rot"]=[0]*NMONTHS
< 		v["crops_food_storage_rot"]=[0]*NMONTHS
< 		v["crops_food_eaten_rot"]=[0]*NMONTHS
< 		v["crops_food_eaten_no_rot"]=[0]*NMONTHS
< 
< 		v["meat_start"]=[0]*NMONTHS
< 		v["meat_end"]=[0]*NMONTHS
< 		v["meat_eaten"]=[0]*NMONTHS
---
> 		v["used_area"]=[0]*NDAYS
> 		v["crops_food_storage"]=[0]*NDAYS
> 		v["crops_food_eaten"]=[0]*NDAYS
> 		v["nonegg_nondairy_meat_start"]=[0]*NMONTHS
> 		v["nonegg_nondairy_meat_end"]=[0]*NMONTHS
> 		v["nonegg_nondairy_meat_eaten"]=[0]*NMONTHS
129,130c125,126
< 			if(c["ADD_MEAT"]):
< 				(model,v) = self.add_meat_to_model(model,v,m)
---
> 			if(c["ADD_NONEGG_NONDAIRY_MEAT"]):
> 				(model,v) = self.add_nonegg_nondairy_meat_to_model(model,v,m)
149,155d144
< 		print("excess_fat_used")
< 		print(s["excess_fat_used"]/1e9/c["FAT_MONTHLY"])
< 
< 		print("h_e_balance_fat")
< 		print("cattle_maintained_fat")
< 		print(self.s["h_e_balance_fat"]/1e9/c["FAT_MONTHLY"])
< 		print(self.s["cattle_maintained_fat"]/1e9/c["FAT_MONTHLY"])
185c174
< 			s["excess_kcals"],\
---
> 			s["excess_calories"],\
218d206
< 			s["production_fat_scp_per_m"],
219a208
> 			s["production_fat_scp_per_m"],
234d222
< 			s["greenhouse_fat_per_ha"],
235a224
> 			s["greenhouse_fat_per_ha"],
242,245c231,232
< 			v["crops_food_eaten_no_rot"],
< 			v["crops_food_eaten_rot"],
< 			v["crops_food_storage_no_rot"],
< 			v["crops_food_storage_rot"],
---
> 			v["crops_food_eaten"],
> 			v["crops_food_storage"],
246a234,236
> 			np.array(s["og_rot_frac_kcals"]),
> 			np.array(s["og_rot_frac_fat"]),
> 			np.array(s["og_rot_frac_protein"]),
252,254c242,244
< 			v["meat_start"],
< 			v["meat_end"],
< 			v["meat_eaten"],
---
> 			v["nonegg_nondairy_meat_start"],
> 			v["nonegg_nondairy_meat_end"],
> 			v["nonegg_nondairy_meat_eaten"],
288c278
< 				v["seaweed_wet_on_farm"][d] = LpVariable("Seaweed_Wet_On_Farm_"+str(d)+"_Variable", self.c["INITIAL_SEAWEED"], self.c["MAXIMUM_DENSITY"]*self.s["built_area"][d])
---
> 				v["seaweed_wet_on_farm"][d] = LpVariable("Seaweed_Wet_On_Farm_"+str(d)+"_Variable", self.c["inputs"]["INITIAL_SEAWEED"], self.c["inputs"]["MAXIMUM_DENSITY"]*self.s["built_area"][d])
292c282
< 				v["used_area"][d] = LpVariable("Used_Area_"+str(d)+"_Variable", self.c["INITIAL_AREA"],self.s["built_area"][d])
---
> 				v["used_area"][d] = LpVariable("Used_Area_"+str(d)+"_Variable", self.c["inputs"]["INITIAL_AREA"],self.s["built_area"][d])
295c285
< 					model += (v["seaweed_wet_on_farm"][0] == self.c["INITIAL_SEAWEED"],
---
> 					model += (v["seaweed_wet_on_farm"][0] == self.c["inputs"]["INITIAL_SEAWEED"],
297c287
< 					model += (v["used_area"][0] == self.c["INITIAL_AREA"],
---
> 					model += (v["used_area"][0] == self.c["inputs"]["INITIAL_AREA"],
303c293
< 					model += (v["seaweed_wet_on_farm"][d] <= v["used_area"][d]*self.c["MAXIMUM_DENSITY"])
---
> 					model += (v["seaweed_wet_on_farm"][d] <= v["used_area"][d]*self.c["inputs"]["MAXIMUM_DENSITY"])
308c298
< 						- (v["used_area"][d]-v["used_area"][d-1])*self.c["MINIMUM_DENSITY"]*(self.c["HARVEST_LOSS"]/100),
---
> 						- (v["used_area"][d]-v["used_area"][d-1])*self.c["inputs"]["MINIMUM_DENSITY"]*(self.c["inputs"]["HARVEST_LOSS"]/100),
338c328
< 				model += (v["stored_food_eaten"][m] >= v["stored_food_eaten"][m-1]*(1/self.c["inputs"]["FLUCTUATION_LIMIT"]), "Small_Change_Minus_SF_Eaten_Month_"+str(m)+"_Constraint")
---
> 				model += (v["stored_food_eaten"][m] >= v["stored_food_eaten"][m-1]*(1/self.c["FLUCTUATION_LIMIT"]), "Small_Change_Minus_SF_Eaten_Month_"+str(m)+"_Constraint")
350,367c340
< 		v["crops_food_storage_rot"][m] = \
< 			LpVariable(\
< 				"Crops_Food_Storage_Rotation_Month_"+str(m)+"_Variable", \
< 				lowBound=0)
< 		v["crops_food_storage_no_rot"][m] = \
< 			LpVariable(\
< 				"Crops_Food_Storage_No_Rotation_Month_"+str(m)+"_Variable",\
< 				lowBound=0)
< 
< 		v["crops_food_eaten_rot"][m] = \
< 			LpVariable(\
< 				"Crops_Food_Eaten_Rotation_During_Month_"+str(m)+"_Variable",\
< 				lowBound=0\
< 			)
< 		v["crops_food_eaten_no_rot"][m] = \
< 			LpVariable(\
< 				"Crops_Food_Eaten_No_Rotation_During_Month_"+str(m)+"_Variable",\
< 				lowBound=0)
---
> 		v["crops_food_storage"][m] = LpVariable("Crops_Food_Storage_Month_"+str(m)+"_Variable", lowBound=0)
369,386c342,347
< 		if(m==0):
< 			
< 			model += (\
< 				v["crops_food_storage_no_rot"][m] == \
< 				self.s["crops_food_produced"][m]\
< 				 - v["crops_food_eaten_no_rot"][m],\
< 				"Crops_Food_Storage_No_Rotation"+str(m)+"_Constraint"\
< 			)
< 
< 			model += (\
< 				v["crops_food_storage_rot"][m] == 0,\
< 				"Crops_Food_Storage_Rotation"+str(m)+"_Constraint"\
< 			)
< 
< 			model += (\
< 				v["crops_food_eaten_rot"][m] == 0,\
< 				"Crops_Food_Eaten_Rotation"+str(m)+"_Constraint"\
< 			)
---
> 		v["crops_food_eaten"][m] = LpVariable("Crops_Food_Eaten_During_Month_"+str(m)+"_Variable",lowBound=0)
> 		
> 		# if(m==0): #first Month
> 		# 	model += (crops_food_start[m] == 0, "Crops_Food_Start_Month_0_Constraint")
> 		# else:
> 		# 	model += (crops_food_start[m] == crops_food_end[m-1], "Crops_Food_Start_Month_"+str(m)+"_Constraint")
387a349,353
> 		# if(m<60):
> 		if(m==0):
> 			# model += (crops_food_storage[m] == 0, "Crops_Food_Storage_"+str(m)+"_Constraint")
> 			# model += (crops_food_eaten[m] < crops_food_produced[m], "Crops_Food_Eaten_First_Month_"+str(m)+"_Constraint")
> 			model += (v["crops_food_storage"][m] == self.s["crops_food_produced"][m]-v["crops_food_eaten"][m], "Crops_Food_Storage_"+str(m)+"_Constraint")
389,451c355,358
< 			print(m)
< 			#haven't dealt with the case of nmonths being less than initial harvest
< 			assert(m>self.c["inputs"]["INITIAL_HARVEST_DURATION"])
< 			
< 			model += (\
< 				v["crops_food_storage_no_rot"][m] == 0,\
< 				"Crops_Food_No_Rotation_None_Left_"+str(m)+"_Constraint"\
< 			)
< 			
< 			model += (\
< 				v["crops_food_storage_rot"][m] == 0,\
< 				"Crops_Food_Rotation_None_Left_"+str(m)+"_Constraint"\
< 			)
< 			
< 			model += (\
< 				v["crops_food_storage_rot"][m] \
< 				== self.s["crops_food_produced"][m]\
< 				 - v["crops_food_eaten_rot"][m]\
< 				 + v["crops_food_storage_rot"][m-1],\
< 				"Crops_Food_Rotation_Storage_"+str(m)+"_Constraint"\
< 			)
< 			
< 			model += (\
< 				v["crops_food_storage_no_rot"][m] \
< 				== v["crops_food_storage_no_rot"][m-1]\
< 				 - v["crops_food_eaten_no_rot"][m], \
< 				"Crops_Food_No_Rotation_Storage_"+str(m)+"_Constraint")
< 
< 		elif(m<self.c["inputs"]["INITIAL_HARVEST_DURATION"]):
< 
< 			model += (\
< 				v["crops_food_storage_rot"][m] == 0,\
< 				"Crops_Food_Storage_Rotation"+str(m)+"_Constraint"\
< 			)
< 
< 			model += (\
< 				v["crops_food_eaten_rot"][m] == 0,\
< 				"Crops_Food_Eaten_Rotation"+str(m)+"_Constraint"\
< 			)
< 
< 			model += (\
< 				v["crops_food_storage_no_rot"][m] \
< 				== self.s["crops_food_produced"][m]\
< 				 - v["crops_food_eaten_no_rot"][m]\
< 				 + v["crops_food_storage_no_rot"][m-1],\
< 				"Crops_Food_Storage_No_Rotation_"+str(m)+"_Constraint"
< 			)
< 
< 		else: # now producing rotation, but can still eat "no rotation" storage
< 
< 			model += (\
< 				v["crops_food_storage_rot"][m] \
< 				== self.s["crops_food_produced"][m]\
< 				 - v["crops_food_eaten_rot"][m]\
< 				 + v["crops_food_storage_rot"][m-1],\
< 				"Crops_Food_Storage_Rotation_"+str(m)+"_Constraint"\
< 			)
< 
< 			model += (\
< 				v["crops_food_storage_no_rot"][m] \
< 				== v["crops_food_storage_no_rot"][m-1]\
< 				 - v["crops_food_eaten_no_rot"][m],\
< 				"Crops_Food_Storage_No_Rotation_"+str(m)+"_Constraint")
---
> 			model += (v["crops_food_storage"][m] == 0, "Crops_Food_None_Left_"+str(m)+"_Constraint")
> 			model += (v["crops_food_storage"][m] == self.s["crops_food_produced"][m]-v["crops_food_eaten"][m]+v["crops_food_storage"][m-1], "Crops_Food_Storage_"+str(m)+"_Constraint")
> 		else:
> 			model += (v["crops_food_storage"][m] == self.s["crops_food_produced"][m]-v["crops_food_eaten"][m]+v["crops_food_storage"][m-1], "Crops_Food_Storage_"+str(m)+"_Constraint")
520,523c427,430
< 	def add_meat_to_model(self,model,v,m):
< 		v["meat_start"][m] = LpVariable("Meat_Start_"+str(m)+"_Variable", 0,self.c["INITIAL_MEAT"])
< 		v["meat_end"][m] = LpVariable("Meat_End_"+str(m)+"_Variable", 0,self.c["INITIAL_MEAT"])
< 		v["meat_eaten"][m] = LpVariable("Meat_Eaten_During_Month_"+str(m)+"_Variable",0,self.c["INITIAL_MEAT"])
---
> 	def add_nonegg_nondairy_meat_to_model(self,model,v,m):
> 		v["nonegg_nondairy_meat_start"][m] = LpVariable("Non_Egg_Nondairy_Meat_Start_"+str(m)+"_Variable", 0,self.c["INITIAL_NONEGG_NONDAIRY_MEAT"])
> 		v["nonegg_nondairy_meat_end"][m] = LpVariable("Non_Egg_Nondairy_Meat_End_"+str(m)+"_Variable", 0,self.c["INITIAL_NONEGG_NONDAIRY_MEAT"])
> 		v["nonegg_nondairy_meat_eaten"][m] = LpVariable("Non_Egg_Nondairy_Meat_Eaten_During_Month_"+str(m)+"_Variable",0,self.c["INITIAL_NONEGG_NONDAIRY_MEAT"])
526c433
< 			model += (v["meat_start"][0] == self.c["INITIAL_MEAT"], "Meat_Start_Month_0_Constraint")
---
> 			model += (v["nonegg_nondairy_meat_start"][0] == self.c["INITIAL_NONEGG_NONDAIRY_MEAT"], "Non_Egg_Nondairy_Meat_Start_Month_0_Constraint")
528c435
< 			model += (v["meat_start"][m] == v["meat_end"][m-1], "Meat_Start_Month_"+str(m)+"_Constraint")
---
> 			model += (v["nonegg_nondairy_meat_start"][m] == v["nonegg_nondairy_meat_end"][m-1], "Non_Egg_Nondairy_Meat_Start_Month_"+str(m)+"_Constraint")
534,535c441,442
< 				model += (v["meat_eaten"][m] <= v["meat_eaten"][m-1]*self.c["FLUCTUATION_LIMIT"], "Small_Change_Plus_Eaten_Month_"+str(m)+"_Constraint")
< 				model += (v["meat_eaten"][m] >= v["meat_eaten"][m-1]*(1/self.c["FLUCTUATION_LIMIT"]), "Small_Change_Minus_Eaten_Month_"+str(m)+"_Constraint")
---
> 				model += (v["nonegg_nondairy_meat_eaten"][m] <= v["nonegg_nondairy_meat_eaten"][m-1]*self.c["FLUCTUATION_LIMIT"], "Small_Change_Plus_Eaten_Month_"+str(m)+"_Constraint")
> 				model += (v["nonegg_nondairy_meat_eaten"][m] >= v["nonegg_nondairy_meat_eaten"][m-1]*(1/self.c["FLUCTUATION_LIMIT"]), "Small_Change_Minus_Eaten_Month_"+str(m)+"_Constraint")
537,540c444
< 		model += (v["meat_end"][m] == v["meat_start"][m] - v["meat_eaten"][m], "Meat_End_Month_"+str(m)+"_Constraint")
< 
< 		if(self.c["inputs"]["IS_NUCLEAR_WINTER"]):
< 			model += (v["meat_eaten"][m] <= self.c["LIMIT_PER_MONTH_CULLED"], "Meat_Limit_Culled_"+str(m)+"_Constraint")
---
> 		model += (v["nonegg_nondairy_meat_end"][m] == v["nonegg_nondairy_meat_start"][m] - v["nonegg_nondairy_meat_eaten"][m], "Non_Egg_Nondairy_Meat_End_Month_"+str(m)+"_Constraint")
613,614c517
< 			+ v["crops_food_eaten_no_rot"][m]
< 			+ v["crops_food_eaten_rot"][m]*self.c["OG_ROTATION_FRACTION_KCALS"]
---
> 			+ v["crops_food_eaten"][m]*self.s["og_rot_frac_kcals"][m]
618c521,522
< 			+ v["meat_eaten"][m]
---
> 			+ v["nonegg_nondairy_meat_eaten"][m]*self.c["MEAT_FRACTION_KCALS"]
> 			- self.s["biofuels_kcals"][m]
635,638c539
< 				+ v["crops_food_eaten_no_rot"][m]\
< 					* self.c["OG_FRACTION_FAT"]
< 				+ v["crops_food_eaten_rot"][m]\
< 					* self.c["OG_ROTATION_FRACTION_FAT"]
---
> 				+ v["crops_food_eaten"][m]*self.s["og_rot_frac_fat"][m]
642c543
< 				+ v["meat_eaten"][m]*self.c["MEAT_FRACTION_FAT"]
---
> 				- self.s["biofuels_fat"][m]
643a545
> 				+ v["nonegg_nondairy_meat_eaten"][m]*self.c["MEAT_FRACTION_FAT"]
650,651c552,553
< 			# print("h_e_balance_fat")
< 			# print(self.s["h_e_balance_fat"])
---
> 
> 
660,663c562
< 				+ v["crops_food_eaten_no_rot"][m]\
< 					* self.c["OG_FRACTION_PROTEIN"]
< 				+ v["crops_food_eaten_rot"][m]\
< 					* self.c["OG_ROTATION_FRACTION_PROTEIN"]
---
> 				+ v["crops_food_eaten"][m]*self.s["og_rot_frac_protein"][m]
666a566
> 				- self.s["biofuels_protein"][m]
668c568
< 				+ v["meat_eaten"][m]*self.c["MEAT_FRACTION_PROTEIN"]
---
> 				+ v["nonegg_nondairy_meat_eaten"][m]*self.c["MEAT_FRACTION_PROTEIN"]
674,689d573
< 
< 		# no feeding human edible maintained meat or dairy to animals or biofuels
< 		model += (v["humans_fed_kcals"][m] >= \
< 			(self.s["h_e_meat_kcals"][m] \
< 			+ self.s["h_e_milk_kcals"][m])/self.c["KCALS_MONTHLY"],\
< 			"Excess_Kcals_From_Primary_Sources_"+str(m)+"_Constraint")
< 
< 		model += (v["humans_fed_fat"][m] >= \
< 			(self.s["h_e_meat_fat"][m] \
< 			+ self.s["h_e_milk_fat"][m])/self.c["FAT_MONTHLY"]/1e9,\
< 			"Excess_Fat_From_Primary_Sources_"+str(m)+"_Constraint")
< 
< 		model += (v["humans_fed_protein"][m] >= \
< 			(self.s["h_e_meat_protein"][m] \
< 			+ self.s["h_e_milk_protein"][m])/self.c["PROTEIN_MONTHLY"]/1e9,\
< 			"Excess_Protein_From_Primary_Sources_"+str(m)+"_Constraint")
692,702c576,595
< 		# if(m>0 and self.c['inputs']['KCAL_SMOOTHING']):
< 		if(m>0 and self.c['inputs']['KCAL_SMOOTHING']):
< 			model += (v["humans_fed_kcals"][m-1] >= v["humans_fed_kcals"][m]*(1/1.1), "Small_Change_Minus_Humans_Fed_Month_"+str(m)+"_Constraint")
< 			# model += (v["humans_fed_kcals"][m] >= v["humans_fed_kcals"][m]*(1/self.c["inputs"]["FLUCTUATION_LIMIT"]), "Small_Change_Minus_Humans_Fed_Month_"+str(m)+"_Constraint")
< 			# model += (v["humans_fed_kcals"][m] <= v["humans_fed_kcals"][m]*(self.c["inputs"]["FLUCTUATION_LIMIT"]), "Small_Change_Plus_Humans_Fed_Month_"+str(m)+"_Constraint")
< 			model += (v["humans_fed_kcals"][m-1] <= v["humans_fed_kcals"][m]*(1.1), "Small_Change_Plus_Humans_Fed_Month_"+str(m)+"_Constraint")
< 
< 		# couldn't get this to work?
< 		# if(m>0 and self.c['inputs']['PROTEIN_SMOOTHING'] and m < 74):
< 		# 	model += (v["humans_fed_protein"][m] >= v["humans_fed_protein"][m]*(1/self.c["inputs"]["FLUCTUATION_LIMIT"]), "Small_Change_Minus_Humans_Protein_Month_"+str(m)+"_Constraint")
< 		# 	model += (v["humans_fed_protein"][m] <= v["humans_fed_protein"][m]*(self.c["inputs"]["FLUCTUATION_LIMIT"]), "Small_Change_Plus_Humans_Protein_Month_"+str(m)+"_Constraint")
---
> 		if(m>0 and self.c['inputs']['OVERALL_SMOOTHING'] and m < 74):
> 			model += (v["humans_fed_kcals"][m] >= v["humans_fed_kcals"][m]*(1/self.c["inputs"]["FLUCTUATION_LIMIT"]), "Small_Change_Minus_Humans_Fed_Month_"+str(m)+"_Constraint")
> 
> 		# make sure we haven't left any crops produced unconsumed
> 		# if(m==NMONTHS-1):
> 		# 	# probably not best practice to use eval, but pulp won't accept 
> 		# 	# sum(v["crops_food_eaten"+str(.	# 	exec(
> 		# 		"model += (crops_food_eaten[79]"
> 		# 		+ "".join(
> 		# 			[" + crops_food_eaten["+str(month)+"]"
> 		# 				for month in range(80,NMONTHS)]
> 		# 			)
> 		# 		+ " >= " + str(sum(crops_food_produced))
> 		# 		+ "*0.5 , \"No_Lost_Crops_Constraint\")"
> 		# 	)
> 		# 	pass
> 		# if(m>56):
> 		# 	model += (crops_food_eaten[m] == crops_food_produced[m], 
> 		# 	"No_Lost_Crops_"+str(m)+"_Constraint")
> 
